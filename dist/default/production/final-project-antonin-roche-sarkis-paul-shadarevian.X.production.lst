

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 06 13:50:10 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    40   000000                     
    41                           ; Version 2.35
    42                           ; Generated 05/05/2021 GMT
    43                           ; 
    44                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F67K40 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000000                     _LATDbits	set	3964
    77   000000                     _SSP2CON2bits	set	3802
    78   000000                     _SSP2CLKPPS	set	3612
    79   000000                     _SSP2DATPPS	set	3613
    80   000000                     _ANSELDbits	set	3751
    81   000000                     _SSP2ADD	set	3798
    82   000000                     _SSP2CON1bits	set	3801
    83   000000                     _LATCbits	set	3963
    84   000000                     _LATEbits	set	3965
    85   000000                     _SSP2CON2	set	3802
    86   000000                     _TRISDbits	set	3972
    87   000000                     _CCPR4H	set	3873
    88   000000                     _CCPR3H	set	3877
    89   000000                     _SSP2STAT	set	3800
    90   000000                     _TRISGbits	set	3975
    91   000000                     _TRISEbits	set	3973
    92   000000                     _SSP2BUF	set	3797
    93   000000                     _PIE0bits	set	3625
    94   000000                     _PIR0bits	set	3635
    95   000000                     _RC7PPS	set	3689
    96   000000                     _RD5PPS	set	3695
    97   000000                     _RE2PPS	set	3700
    98   000000                     _RD6PPS	set	3696
    99   000000                     _LATGbits	set	3967
   100   000000                     _LATHbits	set	3968
   101   000000                     _TRISCbits	set	3971
   102   000000                     _TRISHbits	set	3976
   103   000000                     _T2PR	set	4028
   104   000000                     _T2CONbits	set	4029
   105   000000                     _CCPR2H	set	4006
   106   000000                     _CCPR1H	set	4010
   107   000000                     _RE4PPS	set	3702
   108   000000                     _RG6PPS	set	3720
   109   000000                     _TMR0L	set	4051
   110   000000                     _TMR0H	set	4052
   111   000000                     _T0CON0bits	set	4053
   112   000000                     _T2CLKCONbits	set	4031
   113   000000                     _T2HLTbits	set	4030
   114   000000                     _CCP1CONbits	set	4011
   115   000000                     _CCPTMRS0bits	set	4013
   116   000000                     _CCP2CONbits	set	4007
   117   000000                     _CCP3CONbits	set	3878
   118   000000                     _CCP4CONbits	set	3874
   119   000000                     _T0CON1bits	set	4054
   120   000000                     _INTCONbits	set	4082
   121                           
   122                           ; #config settings
   123                           
   124                           	psect	cinit
   125   000CFE                     __pcinit:
   126                           	callstack 0
   127   000CFE                     start_initialization:
   128                           	callstack 0
   129   000CFE                     __initialization:
   130                           	callstack 0
   131                           
   132                           ; Clear objects allocated to BANK1 (2 bytes)
   133   000CFE  0101               	movlb	1
   134   000D00  6BDD               	clrf	(__pbssBANK1+1)& (0+255),b
   135   000D02  6BDC               	clrf	__pbssBANK1& (0+255),b
   136                           
   137                           ; Clear objects allocated to COMRAM (6 bytes)
   138   000D04  6A26               	clrf	(__pbssCOMRAM+5)& (0+255),c
   139   000D06  6A25               	clrf	(__pbssCOMRAM+4)& (0+255),c
   140   000D08  6A24               	clrf	(__pbssCOMRAM+3)& (0+255),c
   141   000D0A  6A23               	clrf	(__pbssCOMRAM+2)& (0+255),c
   142   000D0C  6A22               	clrf	(__pbssCOMRAM+1)& (0+255),c
   143   000D0E  6A21               	clrf	__pbssCOMRAM& (0+255),c
   144   000D10                     end_of_initialization:
   145                           	callstack 0
   146   000D10                     __end_of__initialization:
   147                           	callstack 0
   148   000D10  9027               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149   000D12  9227               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150   000D14  0100               	movlb	0
   151   000D16  EF16  F000         	goto	_main	;jump to C main() function
   152                           
   153                           	psect	bssCOMRAM
   154   000021                     __pbssCOMRAM:
   155                           	callstack 0
   156   000021                     _off_period:
   157                           	callstack 0
   158   000021                     	ds	2
   159   000023                     _on_period:
   160                           	callstack 0
   161   000023                     	ds	2
   162   000025                     _pathposition:
   163                           	callstack 0
   164   000025                     	ds	1
   165   000026                     _timeposition:
   166                           	callstack 0
   167   000026                     	ds	1
   168                           
   169                           	psect	bssBANK1
   170   0001DC                     __pbssBANK1:
   171                           	callstack 0
   172   0001DC                     _timercount:
   173                           	callstack 0
   174   0001DC                     	ds	2
   175                           
   176                           	psect	cstackBANK1
   177   000100                     __pcstackBANK1:
   178                           	callstack 0
   179   000100                     main@timearray:
   180                           	callstack 0
   181                           
   182                           ; 100 bytes @ 0x0
   183   000100                     	ds	100
   184   000164                     main@path:
   185                           	callstack 0
   186                           
   187                           ; 100 bytes @ 0x64
   188   000164                     	ds	100
   189   0001C8                     main@a:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0xC8
   193   0001C8                     	ds	2
   194   0001CA                     main@motorL:
   195                           	callstack 0
   196                           
   197                           ; 9 bytes @ 0xCA
   198   0001CA                     	ds	9
   199   0001D3                     main@motorR:
   200                           	callstack 0
   201                           
   202                           ; 9 bytes @ 0xD3
   203   0001D3                     	ds	9
   204                           
   205                           	psect	cstackCOMRAM
   206   000001                     __pcstackCOMRAM:
   207                           	callstack 0
   208   000001                     ??_I2C_2_Master_Idle:
   209   000001                     ?_savetime:
   210                           	callstack 0
   211   000001                     ?___wmul:
   212                           	callstack 0
   213   000001                     initDCmotorsPWM@PWMperiod:
   214                           	callstack 0
   215   000001                     savepath@path:
   216                           	callstack 0
   217   000001                     savetime@timearray:
   218                           	callstack 0
   219   000001                     ___wmul@multiplier:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x0
   223   000001                     	ds	1
   224   000002                     I2C_2_Master_Write@data_byte:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0x1
   228   000002                     	ds	1
   229   000003                     color_writetoaddr@value:
   230                           	callstack 0
   231   000003                     savepath@instruction:
   232                           	callstack 0
   233   000003                     savetime@timercount:
   234                           	callstack 0
   235   000003                     ___wmul@multiplicand:
   236                           	callstack 0
   237                           
   238                           ; 2 bytes @ 0x2
   239   000003                     	ds	1
   240   000004                     ??_savepath:
   241   000004                     color_writetoaddr@address:
   242                           	callstack 0
   243                           
   244                           ; 1 bytes @ 0x3
   245   000004                     	ds	1
   246   000005                     ??_color_click_init:
   247   000005                     ??_savetime:
   248   000005                     ___wmul@product:
   249                           	callstack 0
   250                           
   251                           ; 2 bytes @ 0x4
   252   000005                     	ds	2
   253   000007                     ?___lwdiv:
   254                           	callstack 0
   255   000007                     ___lwdiv@dividend:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0x6
   259   000007                     	ds	2
   260   000009                     ___lwdiv@divisor:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x8
   264   000009                     	ds	2
   265   00000B                     ___lwdiv@quotient:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0xA
   269   00000B                     	ds	2
   270   00000D                     ___lwdiv@counter:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0xC
   274   00000D                     	ds	1
   275   00000E                     setMotorPWM@m:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0xD
   279   00000E                     	ds	2
   280   000010                     ??_setMotorPWM:
   281                           
   282                           ; 1 bytes @ 0xF
   283   000010                     	ds	2
   284   000012                     setMotorPWM@posDuty:
   285                           	callstack 0
   286                           
   287                           ; 1 bytes @ 0x11
   288   000012                     	ds	1
   289   000013                     setMotorPWM@negDuty:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x12
   293   000013                     	ds	1
   294   000014                     stop@mL:
   295                           	callstack 0
   296   000014                     fullSpeedAhead@mL:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x13
   300   000014                     	ds	2
   301   000016                     stop@mR:
   302                           	callstack 0
   303   000016                     fullSpeedAhead@mR:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0x15
   307   000016                     	ds	2
   308   000018                     ??_stop:
   309   000018                     fullSpeedAhead@dir:
   310                           	callstack 0
   311                           
   312                           ; 1 bytes @ 0x17
   313   000018                     	ds	1
   314   000019                     ??_fullSpeedAhead:
   315   000019                     turnLeft90@mL:
   316                           	callstack 0
   317   000019                     turnRight90@mL:
   318                           	callstack 0
   319   000019                     turnLeft135@mL:
   320                           	callstack 0
   321   000019                     turnRight135@mL:
   322                           	callstack 0
   323   000019                     turn180@mL:
   324                           	callstack 0
   325   000019                     square@mL:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x18
   329   000019                     	ds	2
   330   00001B                     turnLeft90@mR:
   331                           	callstack 0
   332   00001B                     turnRight90@mR:
   333                           	callstack 0
   334   00001B                     turnLeft135@mR:
   335                           	callstack 0
   336   00001B                     turnRight135@mR:
   337                           	callstack 0
   338   00001B                     turn180@mR:
   339                           	callstack 0
   340   00001B                     square@mR:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x1A
   344   00001B                     	ds	2
   345   00001D                     ??_turnLeft90:
   346   00001D                     ??_turnRight90:
   347   00001D                     ??_turnLeft135:
   348   00001D                     ??_turnRight135:
   349   00001D                     ??_turn180:
   350   00001D                     square@dir:
   351                           	callstack 0
   352                           
   353                           ; 1 bytes @ 0x1C
   354   00001D                     	ds	1
   355   00001E                     ??_square:
   356                           
   357                           ; 1 bytes @ 0x1D
   358   00001E                     	ds	1
   359   00001F                     ??_main:
   360                           
   361                           ; 1 bytes @ 0x1E
   362   00001F                     	ds	2
   363                           
   364 ;;
   365 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   366 ;;
   367 ;; *************** function _main *****************
   368 ;; Defined at:
   369 ;;		line 21 in file "mainfinal.c"
   370 ;; Parameters:    Size  Location     Type
   371 ;;		None
   372 ;; Auto vars:     Size  Location     Type
   373 ;;  path          100  100[BANK1 ] unsigned char [100]
   374 ;;  timearray     100    0[BANK1 ] unsigned char [100]
   375 ;;  motorR          9  211[BANK1 ] struct DC_motor
   376 ;;  motorL          9  202[BANK1 ] struct DC_motor
   377 ;;  a               2  200[BANK1 ] int 
   378 ;;  PWMcycle        2    0        unsigned int 
   379 ;; Return value:  Size  Location     Type
   380 ;;                  1    wreg      void 
   381 ;; Registers used:
   382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : 0/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   389 ;;      Locals:         0       0     220       0       0       0       0       0       0       0       0       0       
      +0       0       0
   390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   391 ;;      Totals:         2       0     220       0       0       0       0       0       0       0       0       0       
      +0       0       0
   392 ;;Total ram usage:      222 bytes
   393 ;; Hardware stack levels required when called: 5
   394 ;; This function calls:
   395 ;;		_Interrupts_init
   396 ;;		_Timer0_init
   397 ;;		_color_click_init
   398 ;;		_fullSpeedAhead
   399 ;;		_initDCmotorsPWM
   400 ;;		_savepath
   401 ;;		_savetime
   402 ;;		_square
   403 ;;		_turn180
   404 ;;		_turnLeft135
   405 ;;		_turnLeft90
   406 ;;		_turnRight135
   407 ;;		_turnRight90
   408 ;; This function is called by:
   409 ;;		Startup code after reset
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text0
   414   00002C                     __ptext0:
   415                           	callstack 0
   416   00002C                     _main:
   417                           	callstack 26
   418   00002C                     
   419                           ;mainfinal.c: 23:     int a = 4;
   420   00002C  0E00               	movlw	0
   421   00002E  0101               	movlb	1	; () banked
   422   000030  6FC9               	movwf	(main@a+1)& (0+255),b
   423   000032  0E04               	movlw	4
   424   000034  6FC8               	movwf	main@a& (0+255),b
   425   000036                     
   426                           ; BSR set to: 1
   427                           ;mainfinal.c: 26:     Timer0_init();
   428   000036  EC8D  F006         	call	_Timer0_init	;wreg free
   429                           
   430                           ;mainfinal.c: 27:     Interrupts_init();
   431   00003A  EC9C  F006         	call	_Interrupts_init	;wreg free
   432   00003E                     
   433                           ;mainfinal.c: 28:     initDCmotorsPWM(199);
   434   00003E  0E00               	movlw	0
   435   000040  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   436   000042  0EC7               	movlw	199
   437   000044  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   438   000046  EC3B  F005         	call	_initDCmotorsPWM	;wreg free
   439   00004A                     
   440                           ;mainfinal.c: 29:     color_click_init();
   441   00004A  ECF6  F005         	call	_color_click_init	;wreg free
   442   00004E                     
   443                           ;mainfinal.c: 36:     LATHbits.LATH1=0;
   444   00004E  9280               	bcf	128,1,c	;volatile
   445   000050                     
   446                           ;mainfinal.c: 37:     TRISHbits.TRISH1 = 0;
   447   000050  9288               	bcf	136,1,c	;volatile
   448   000052                     
   449                           ;mainfinal.c: 40:     LATDbits.LATD3=0;
   450   000052  967C               	bcf	124,3,c	;volatile
   451   000054                     
   452                           ;mainfinal.c: 41:     TRISDbits.TRISD3 = 0;
   453   000054  9684               	bcf	132,3,c	;volatile
   454   000056                     
   455                           ;mainfinal.c: 44:     LATDbits.LATD4=0;
   456   000056  987C               	bcf	124,4,c	;volatile
   457   000058                     
   458                           ;mainfinal.c: 45:     TRISDbits.TRISD4 = 0;
   459   000058  9884               	bcf	132,4,c	;volatile
   460   00005A                     
   461                           ;mainfinal.c: 48:     struct DC_motor motorL, motorR;;mainfinal.c: 50:     motorR.power 
      +                          = 0;
   462   00005A  0E00               	movlw	0
   463   00005C  0101               	movlb	1	; () banked
   464   00005E  6FD3               	movwf	main@motorR& (0+255),b
   465   000060                     
   466                           ; BSR set to: 1
   467                           ;mainfinal.c: 51:     motorL.direction = 1;
   468   000060  0E01               	movlw	1
   469   000062  6FCB               	movwf	(main@motorL+1)& (0+255),b
   470   000064                     
   471                           ; BSR set to: 1
   472                           ;mainfinal.c: 52:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   473   000064  0EAA               	movlw	170
   474   000066  6FCF               	movwf	(main@motorL+5)& (0+255),b
   475   000068  0E0F               	movlw	15
   476   00006A  6FD0               	movwf	(main@motorL+6)& (0+255),b
   477   00006C                     
   478                           ; BSR set to: 1
   479                           ;mainfinal.c: 53:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   480   00006C  0EA6               	movlw	166
   481   00006E  6FD1               	movwf	(main@motorL+7)& (0+255),b
   482   000070  0E0F               	movlw	15
   483   000072  6FD2               	movwf	(main@motorL+8)& (0+255),b
   484   000074                     
   485                           ; BSR set to: 1
   486                           ;mainfinal.c: 54:     motorL.PWMperiod=PWMcycle;
   487   000074  0E00               	movlw	0
   488   000076  6FCE               	movwf	(main@motorL+4)& (0+255),b
   489   000078  0EC7               	movlw	199
   490   00007A  6FCD               	movwf	(main@motorL+3)& (0+255),b
   491   00007C                     
   492                           ; BSR set to: 1
   493                           ;mainfinal.c: 56:     motorL.power = 0;
   494   00007C  0E00               	movlw	0
   495   00007E  6FCA               	movwf	main@motorL& (0+255),b
   496   000080                     
   497                           ; BSR set to: 1
   498                           ;mainfinal.c: 57:     motorR.direction = 1;
   499   000080  0E01               	movlw	1
   500   000082  6FD4               	movwf	(main@motorR+1)& (0+255),b
   501   000084                     
   502                           ; BSR set to: 1
   503                           ;mainfinal.c: 58:     motorR.PWMperiod=PWMcycle;
   504   000084  0E00               	movlw	0
   505   000086  6FD7               	movwf	(main@motorR+4)& (0+255),b
   506   000088  0EC7               	movlw	199
   507   00008A  6FD6               	movwf	(main@motorR+3)& (0+255),b
   508   00008C                     
   509                           ; BSR set to: 1
   510                           ;mainfinal.c: 59:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   511   00008C  0E25               	movlw	37
   512   00008E  6FD8               	movwf	(main@motorR+5)& (0+255),b
   513   000090  0E0F               	movlw	15
   514   000092  6FD9               	movwf	(main@motorR+6)& (0+255),b
   515   000094                     
   516                           ; BSR set to: 1
   517                           ;mainfinal.c: 60:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   518   000094  0E21               	movlw	33
   519   000096  6FDA               	movwf	(main@motorR+7)& (0+255),b
   520   000098  0E0F               	movlw	15
   521   00009A  6FDB               	movwf	(main@motorR+8)& (0+255),b
   522   00009C                     l1938:
   523                           
   524                           ;mainfinal.c: 74:     fullSpeedAhead(&motorL,&motorR, 1);
   525   00009C  0ECA               	movlw	low main@motorL
   526   00009E  6E14               	movwf	fullSpeedAhead@mL^0,c
   527   0000A0  0E01               	movlw	high main@motorL
   528   0000A2  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   529   0000A4  0ED3               	movlw	low main@motorR
   530   0000A6  6E16               	movwf	fullSpeedAhead@mR^0,c
   531   0000A8  0E01               	movlw	high main@motorR
   532   0000AA  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   533   0000AC  0E01               	movlw	1
   534   0000AE  6E18               	movwf	fullSpeedAhead@dir^0,c
   535   0000B0  ECE1  F004         	call	_fullSpeedAhead	;wreg free
   536   0000B4                     
   537                           ;mainfinal.c: 77:     _delay((unsigned long)((100)*(64000000/4000.0)));
   538   0000B4  0E09               	movlw	9
   539   0000B6  6E20               	movwf	(??_main+1)^0,c
   540   0000B8  0E1E               	movlw	30
   541   0000BA  6E1F               	movwf	??_main^0,c
   542   0000BC  0EE4               	movlw	228
   543   0000BE                     u937:
   544   0000BE  2EE8               	decfsz	wreg,f,c
   545   0000C0  D7FE               	bra	u937
   546   0000C2  2E1F               	decfsz	??_main^0,f,c
   547   0000C4  D7FC               	bra	u937
   548   0000C6  2E20               	decfsz	(??_main+1)^0,f,c
   549   0000C8  D7FA               	bra	u937
   550   0000CA  D000               	nop2	
   551   0000CC                     
   552                           ;mainfinal.c: 79:     if (a == 1){
   553   0000CC  0101               	movlb	1	; () banked
   554   0000CE  05C8               	decf	main@a& (0+255),w,b
   555   0000D0  11C9               	iorwf	(main@a+1)& (0+255),w,b
   556   0000D2  A4D8               	btfss	status,2,c
   557   0000D4  EF6E  F000         	goto	u831
   558   0000D8  EF70  F000         	goto	u830
   559   0000DC                     u831:
   560   0000DC  EF96  F000         	goto	l1950
   561   0000E0                     u830:
   562   0000E0                     
   563                           ; BSR set to: 1
   564                           ;mainfinal.c: 80:     timercount = savetime(timearray, timercount);
   565   0000E0  0E00               	movlw	low main@timearray
   566   0000E2  6E01               	movwf	savetime@timearray^0,c
   567   0000E4  0E01               	movlw	high main@timearray
   568   0000E6  6E02               	movwf	(savetime@timearray+1)^0,c
   569   0000E8  C1DC  F003         	movff	_timercount,savetime@timercount
   570   0000EC  C1DD  F004         	movff	_timercount+1,savetime@timercount+1
   571   0000F0  EC25  F006         	call	_savetime	;wreg free
   572   0000F4  C001  F1DC         	movff	?_savetime,_timercount
   573   0000F8  C002  F1DD         	movff	?_savetime+1,_timercount+1
   574   0000FC                     
   575                           ;mainfinal.c: 81:     square(&motorL,&motorR, 1);
   576   0000FC  0ECA               	movlw	low main@motorL
   577   0000FE  6E19               	movwf	square@mL^0,c
   578   000100  0E01               	movlw	high main@motorL
   579   000102  6E1A               	movwf	(square@mL+1)^0,c
   580   000104  0ED3               	movlw	low main@motorR
   581   000106  6E1B               	movwf	square@mR^0,c
   582   000108  0E01               	movlw	high main@motorR
   583   00010A  6E1C               	movwf	(square@mR+1)^0,c
   584   00010C  0E01               	movlw	1
   585   00010E  6E1D               	movwf	square@dir^0,c
   586   000110  EC81  F004         	call	_square	;wreg free
   587   000114                     
   588                           ;mainfinal.c: 82:     square(&motorL,&motorR, 0);
   589   000114  0ECA               	movlw	low main@motorL
   590   000116  6E19               	movwf	square@mL^0,c
   591   000118  0E01               	movlw	high main@motorL
   592   00011A  6E1A               	movwf	(square@mL+1)^0,c
   593   00011C  0ED3               	movlw	low main@motorR
   594   00011E  6E1B               	movwf	square@mR^0,c
   595   000120  0E01               	movlw	high main@motorR
   596   000122  6E1C               	movwf	(square@mR+1)^0,c
   597   000124  0E00               	movlw	0
   598   000126  6E1D               	movwf	square@dir^0,c
   599   000128  EC81  F004         	call	_square	;wreg free
   600   00012C                     l1950:
   601                           
   602                           ;mainfinal.c: 85:     if (a == 2){
   603   00012C  0E02               	movlw	2
   604   00012E  0101               	movlb	1	; () banked
   605   000130  19C8               	xorwf	main@a& (0+255),w,b
   606   000132  11C9               	iorwf	(main@a+1)& (0+255),w,b
   607   000134  A4D8               	btfss	status,2,c
   608   000136  EF9F  F000         	goto	u841
   609   00013A  EFA1  F000         	goto	u840
   610   00013E                     u841:
   611   00013E  EFAB  F000         	goto	l1954
   612   000142                     u840:
   613   000142                     
   614                           ; BSR set to: 1
   615                           ;mainfinal.c: 86:     turnRight90(&motorL,&motorR);}
   616   000142  0ECA               	movlw	low main@motorL
   617   000144  6E19               	movwf	turnRight90@mL^0,c
   618   000146  0E01               	movlw	high main@motorL
   619   000148  6E1A               	movwf	(turnRight90@mL+1)^0,c
   620   00014A  0ED3               	movlw	low main@motorR
   621   00014C  6E1B               	movwf	turnRight90@mR^0,c
   622   00014E  0E01               	movlw	high main@motorR
   623   000150  6E1C               	movwf	(turnRight90@mR+1)^0,c
   624   000152  EC18  F004         	call	_turnRight90	;wreg free
   625   000156                     l1954:
   626                           
   627                           ;mainfinal.c: 87:     savepath(path, 2);
   628   000156  0E64               	movlw	low main@path
   629   000158  6E01               	movwf	savepath@path^0,c
   630   00015A  0E01               	movlw	high main@path
   631   00015C  6E02               	movwf	(savepath@path+1)^0,c
   632   00015E  0E02               	movlw	2
   633   000160  6E03               	movwf	savepath@instruction^0,c
   634   000162  EC70  F006         	call	_savepath	;wreg free
   635   000166                     
   636                           ;mainfinal.c: 89:     if (a == 3){
   637   000166  0E03               	movlw	3
   638   000168  0101               	movlb	1	; () banked
   639   00016A  19C8               	xorwf	main@a& (0+255),w,b
   640   00016C  11C9               	iorwf	(main@a+1)& (0+255),w,b
   641   00016E  A4D8               	btfss	status,2,c
   642   000170  EFBC  F000         	goto	u851
   643   000174  EFBE  F000         	goto	u850
   644   000178                     u851:
   645   000178  EFD0  F000         	goto	l1962
   646   00017C                     u850:
   647   00017C                     
   648                           ; BSR set to: 1
   649                           ;mainfinal.c: 90:     turnLeft90(&motorL,&motorR);
   650   00017C  0ECA               	movlw	low main@motorL
   651   00017E  6E19               	movwf	turnLeft90@mL^0,c
   652   000180  0E01               	movlw	high main@motorL
   653   000182  6E1A               	movwf	(turnLeft90@mL+1)^0,c
   654   000184  0ED3               	movlw	low main@motorR
   655   000186  6E1B               	movwf	turnLeft90@mR^0,c
   656   000188  0E01               	movlw	high main@motorR
   657   00018A  6E1C               	movwf	(turnLeft90@mR+1)^0,c
   658   00018C  EC4C  F002         	call	_turnLeft90	;wreg free
   659   000190                     
   660                           ;mainfinal.c: 91:     savepath(path, 3);}
   661   000190  0E64               	movlw	low main@path
   662   000192  6E01               	movwf	savepath@path^0,c
   663   000194  0E01               	movlw	high main@path
   664   000196  6E02               	movwf	(savepath@path+1)^0,c
   665   000198  0E03               	movlw	3
   666   00019A  6E03               	movwf	savepath@instruction^0,c
   667   00019C  EC70  F006         	call	_savepath	;wreg free
   668   0001A0                     l1962:
   669                           
   670                           ;mainfinal.c: 94:     if (a == 4){
   671   0001A0  0E04               	movlw	4
   672   0001A2  0101               	movlb	1	; () banked
   673   0001A4  19C8               	xorwf	main@a& (0+255),w,b
   674   0001A6  11C9               	iorwf	(main@a+1)& (0+255),w,b
   675   0001A8  A4D8               	btfss	status,2,c
   676   0001AA  EFD9  F000         	goto	u861
   677   0001AE  EFDB  F000         	goto	u860
   678   0001B2                     u861:
   679   0001B2  EFED  F000         	goto	l1968
   680   0001B6                     u860:
   681   0001B6                     
   682                           ; BSR set to: 1
   683                           ;mainfinal.c: 95:     turn180(&motorL,&motorR);
   684   0001B6  0ECA               	movlw	low main@motorL
   685   0001B8  6E19               	movwf	turn180@mL^0,c
   686   0001BA  0E01               	movlw	high main@motorL
   687   0001BC  6E1A               	movwf	(turn180@mL+1)^0,c
   688   0001BE  0ED3               	movlw	low main@motorR
   689   0001C0  6E1B               	movwf	turn180@mR^0,c
   690   0001C2  0E01               	movlw	high main@motorR
   691   0001C4  6E1C               	movwf	(turn180@mR+1)^0,c
   692   0001C6  EC39  F003         	call	_turn180	;wreg free
   693   0001CA                     
   694                           ;mainfinal.c: 96:     savepath(path, 4);}
   695   0001CA  0E64               	movlw	low main@path
   696   0001CC  6E01               	movwf	savepath@path^0,c
   697   0001CE  0E01               	movlw	high main@path
   698   0001D0  6E02               	movwf	(savepath@path+1)^0,c
   699   0001D2  0E04               	movlw	4
   700   0001D4  6E03               	movwf	savepath@instruction^0,c
   701   0001D6  EC70  F006         	call	_savepath	;wreg free
   702   0001DA                     l1968:
   703                           
   704                           ;mainfinal.c: 98:     if (a == 5){
   705   0001DA  0E05               	movlw	5
   706   0001DC  0101               	movlb	1	; () banked
   707   0001DE  19C8               	xorwf	main@a& (0+255),w,b
   708   0001E0  11C9               	iorwf	(main@a+1)& (0+255),w,b
   709   0001E2  A4D8               	btfss	status,2,c
   710   0001E4  EFF6  F000         	goto	u871
   711   0001E8  EFF8  F000         	goto	u870
   712   0001EC                     u871:
   713   0001EC  EF16  F001         	goto	l1974
   714   0001F0                     u870:
   715   0001F0                     
   716                           ; BSR set to: 1
   717                           ;mainfinal.c: 99:     square(&motorL,&motorR, 0);
   718   0001F0  0ECA               	movlw	low main@motorL
   719   0001F2  6E19               	movwf	square@mL^0,c
   720   0001F4  0E01               	movlw	high main@motorL
   721   0001F6  6E1A               	movwf	(square@mL+1)^0,c
   722   0001F8  0ED3               	movlw	low main@motorR
   723   0001FA  6E1B               	movwf	square@mR^0,c
   724   0001FC  0E01               	movlw	high main@motorR
   725   0001FE  6E1C               	movwf	(square@mR+1)^0,c
   726   000200  0E00               	movlw	0
   727   000202  6E1D               	movwf	square@dir^0,c
   728   000204  EC81  F004         	call	_square	;wreg free
   729                           
   730                           ;mainfinal.c: 100:     turnRight90(&motorL,&motorR);
   731   000208  0ECA               	movlw	low main@motorL
   732   00020A  6E19               	movwf	turnRight90@mL^0,c
   733   00020C  0E01               	movlw	high main@motorL
   734   00020E  6E1A               	movwf	(turnRight90@mL+1)^0,c
   735   000210  0ED3               	movlw	low main@motorR
   736   000212  6E1B               	movwf	turnRight90@mR^0,c
   737   000214  0E01               	movlw	high main@motorR
   738   000216  6E1C               	movwf	(turnRight90@mR+1)^0,c
   739   000218  EC18  F004         	call	_turnRight90	;wreg free
   740   00021C                     
   741                           ;mainfinal.c: 101:     savepath(path, 2);
   742   00021C  0E64               	movlw	low main@path
   743   00021E  6E01               	movwf	savepath@path^0,c
   744   000220  0E01               	movlw	high main@path
   745   000222  6E02               	movwf	(savepath@path+1)^0,c
   746   000224  0E02               	movlw	2
   747   000226  6E03               	movwf	savepath@instruction^0,c
   748   000228  EC70  F006         	call	_savepath	;wreg free
   749   00022C                     l1974:
   750                           
   751                           ;mainfinal.c: 104:     if (a == 6){
   752   00022C  0E06               	movlw	6
   753   00022E  0101               	movlb	1	; () banked
   754   000230  19C8               	xorwf	main@a& (0+255),w,b
   755   000232  11C9               	iorwf	(main@a+1)& (0+255),w,b
   756   000234  A4D8               	btfss	status,2,c
   757   000236  EF1F  F001         	goto	u881
   758   00023A  EF21  F001         	goto	u880
   759   00023E                     u881:
   760   00023E  EF3F  F001         	goto	l1980
   761   000242                     u880:
   762   000242                     
   763                           ; BSR set to: 1
   764                           ;mainfinal.c: 105:     square(&motorL,&motorR, 0);
   765   000242  0ECA               	movlw	low main@motorL
   766   000244  6E19               	movwf	square@mL^0,c
   767   000246  0E01               	movlw	high main@motorL
   768   000248  6E1A               	movwf	(square@mL+1)^0,c
   769   00024A  0ED3               	movlw	low main@motorR
   770   00024C  6E1B               	movwf	square@mR^0,c
   771   00024E  0E01               	movlw	high main@motorR
   772   000250  6E1C               	movwf	(square@mR+1)^0,c
   773   000252  0E00               	movlw	0
   774   000254  6E1D               	movwf	square@dir^0,c
   775   000256  EC81  F004         	call	_square	;wreg free
   776                           
   777                           ;mainfinal.c: 106:     turnLeft90(&motorL,&motorR);
   778   00025A  0ECA               	movlw	low main@motorL
   779   00025C  6E19               	movwf	turnLeft90@mL^0,c
   780   00025E  0E01               	movlw	high main@motorL
   781   000260  6E1A               	movwf	(turnLeft90@mL+1)^0,c
   782   000262  0ED3               	movlw	low main@motorR
   783   000264  6E1B               	movwf	turnLeft90@mR^0,c
   784   000266  0E01               	movlw	high main@motorR
   785   000268  6E1C               	movwf	(turnLeft90@mR+1)^0,c
   786   00026A  EC4C  F002         	call	_turnLeft90	;wreg free
   787   00026E                     
   788                           ;mainfinal.c: 107:     savepath(path, 3);
   789   00026E  0E64               	movlw	low main@path
   790   000270  6E01               	movwf	savepath@path^0,c
   791   000272  0E01               	movlw	high main@path
   792   000274  6E02               	movwf	(savepath@path+1)^0,c
   793   000276  0E03               	movlw	3
   794   000278  6E03               	movwf	savepath@instruction^0,c
   795   00027A  EC70  F006         	call	_savepath	;wreg free
   796   00027E                     l1980:
   797                           
   798                           ;mainfinal.c: 110:     if (a == 7){
   799   00027E  0E07               	movlw	7
   800   000280  0101               	movlb	1	; () banked
   801   000282  19C8               	xorwf	main@a& (0+255),w,b
   802   000284  11C9               	iorwf	(main@a+1)& (0+255),w,b
   803   000286  A4D8               	btfss	status,2,c
   804   000288  EF48  F001         	goto	u891
   805   00028C  EF4A  F001         	goto	u890
   806   000290                     u891:
   807   000290  EF5C  F001         	goto	l1986
   808   000294                     u890:
   809   000294                     
   810                           ; BSR set to: 1
   811                           ;mainfinal.c: 111:     turnRight135(&motorL,&motorR);
   812   000294  0ECA               	movlw	low main@motorL
   813   000296  6E19               	movwf	turnRight135@mL^0,c
   814   000298  0E01               	movlw	high main@motorL
   815   00029A  6E1A               	movwf	(turnRight135@mL+1)^0,c
   816   00029C  0ED3               	movlw	low main@motorR
   817   00029E  6E1B               	movwf	turnRight135@mR^0,c
   818   0002A0  0E01               	movlw	high main@motorR
   819   0002A2  6E1C               	movwf	(turnRight135@mR+1)^0,c
   820   0002A4  ECAE  F003         	call	_turnRight135	;wreg free
   821   0002A8                     
   822                           ;mainfinal.c: 112:     savepath(path, 5);
   823   0002A8  0E64               	movlw	low main@path
   824   0002AA  6E01               	movwf	savepath@path^0,c
   825   0002AC  0E01               	movlw	high main@path
   826   0002AE  6E02               	movwf	(savepath@path+1)^0,c
   827   0002B0  0E05               	movlw	5
   828   0002B2  6E03               	movwf	savepath@instruction^0,c
   829   0002B4  EC70  F006         	call	_savepath	;wreg free
   830   0002B8                     l1986:
   831                           
   832                           ;mainfinal.c: 115:     if (a == 8){
   833   0002B8  0E08               	movlw	8
   834   0002BA  0101               	movlb	1	; () banked
   835   0002BC  19C8               	xorwf	main@a& (0+255),w,b
   836   0002BE  11C9               	iorwf	(main@a+1)& (0+255),w,b
   837   0002C0  A4D8               	btfss	status,2,c
   838   0002C2  EF65  F001         	goto	u901
   839   0002C6  EF67  F001         	goto	u900
   840   0002CA                     u901:
   841   0002CA  EF79  F001         	goto	l1994
   842   0002CE                     u900:
   843   0002CE                     
   844                           ; BSR set to: 1
   845                           ;mainfinal.c: 116:     turnLeft135(&motorL,&motorR);
   846   0002CE  0ECA               	movlw	low main@motorL
   847   0002D0  6E19               	movwf	turnLeft135@mL^0,c
   848   0002D2  0E01               	movlw	high main@motorL
   849   0002D4  6E1A               	movwf	(turnLeft135@mL+1)^0,c
   850   0002D6  0ED3               	movlw	low main@motorR
   851   0002D8  6E1B               	movwf	turnLeft135@mR^0,c
   852   0002DA  0E01               	movlw	high main@motorR
   853   0002DC  6E1C               	movwf	(turnLeft135@mR+1)^0,c
   854   0002DE  ECC3  F002         	call	_turnLeft135	;wreg free
   855   0002E2                     
   856                           ;mainfinal.c: 117:     savepath(path, 6);
   857   0002E2  0E64               	movlw	low main@path
   858   0002E4  6E01               	movwf	savepath@path^0,c
   859   0002E6  0E01               	movlw	high main@path
   860   0002E8  6E02               	movwf	(savepath@path+1)^0,c
   861   0002EA  0E06               	movlw	6
   862   0002EC  6E03               	movwf	savepath@instruction^0,c
   863   0002EE  EC70  F006         	call	_savepath	;wreg free
   864   0002F2                     l1994:
   865                           
   866                           ;mainfinal.c: 124:     if (a == 10) {
   867   0002F2  0E0A               	movlw	10
   868   0002F4  0101               	movlb	1	; () banked
   869   0002F6  19C8               	xorwf	main@a& (0+255),w,b
   870   0002F8  11C9               	iorwf	(main@a+1)& (0+255),w,b
   871   0002FA  A4D8               	btfss	status,2,c
   872   0002FC  EF82  F001         	goto	u911
   873   000300  EF84  F001         	goto	u910
   874   000304                     u911:
   875   000304  EF4E  F000         	goto	l1938
   876   000308                     u910:
   877   000308                     
   878                           ; BSR set to: 1
   879                           ;mainfinal.c: 125:         timercount = savetime(timearray, timercount);
   880   000308  0E00               	movlw	low main@timearray
   881   00030A  6E01               	movwf	savetime@timearray^0,c
   882   00030C  0E01               	movlw	high main@timearray
   883   00030E  6E02               	movwf	(savetime@timearray+1)^0,c
   884   000310  C1DC  F003         	movff	_timercount,savetime@timercount
   885   000314  C1DD  F004         	movff	_timercount+1,savetime@timercount+1
   886   000318  EC25  F006         	call	_savetime	;wreg free
   887   00031C  C001  F1DC         	movff	?_savetime,_timercount
   888   000320  C002  F1DD         	movff	?_savetime+1,_timercount+1
   889   000324  EF4E  F000         	goto	l1938
   890   000328  EF14  F000         	goto	start
   891   00032C                     __end_of_main:
   892                           	callstack 0
   893                           
   894 ;; *************** function _turnRight90 *****************
   895 ;; Defined at:
   896 ;;		line 132 in file "dc_motor.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;  mL              2   24[COMRAM] PTR struct DC_motor
   899 ;;		 -> main@motorL(9), returnstep@motorL(9), 
   900 ;;  mR              2   26[COMRAM] PTR struct DC_motor
   901 ;;		 -> main@motorR(9), returnstep@motorR(9), 
   902 ;; Auto vars:     Size  Location     Type
   903 ;;		None
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   913 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   915 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   916 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   917 ;;Total ram usage:        5 bytes
   918 ;; Hardware stack levels used: 1
   919 ;; Hardware stack levels required when called: 4
   920 ;; This function calls:
   921 ;;		_setMotorPWM
   922 ;;		_stop
   923 ;; This function is called by:
   924 ;;		_main
   925 ;;		_returnstep
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           	psect	text1
   930   000830                     __ptext1:
   931                           	callstack 0
   932   000830                     _turnRight90:
   933                           	callstack 26
   934   000830                     
   935                           ;dc_motor.c: 132: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 133: { stop(m
      +                          L, mR);
   936   000830  C019  F014         	movff	turnRight90@mL,stop@mL
   937   000834  C01A  F015         	movff	turnRight90@mL+1,stop@mL+1
   938   000838  C01B  F016         	movff	turnRight90@mR,stop@mR
   939   00083C  C01C  F017         	movff	turnRight90@mR+1,stop@mR+1
   940   000840  ECBD  F005         	call	_stop	;wreg free
   941   000844                     
   942                           ;dc_motor.c: 135:     mL->direction = 1;
   943   000844  EE20 F001          	lfsr	2,1
   944   000848  5019               	movf	turnRight90@mL^0,w,c
   945   00084A  26D9               	addwf	fsr2l,f,c
   946   00084C  501A               	movf	(turnRight90@mL+1)^0,w,c
   947   00084E  22DA               	addwfc	fsr2h,f,c
   948   000850  0E01               	movlw	1
   949   000852  6EDF               	movwf	indf2,c
   950   000854                     
   951                           ;dc_motor.c: 136:     mR->direction = 0;
   952   000854  EE20 F001          	lfsr	2,1
   953   000858  501B               	movf	turnRight90@mR^0,w,c
   954   00085A  26D9               	addwf	fsr2l,f,c
   955   00085C  501C               	movf	(turnRight90@mR+1)^0,w,c
   956   00085E  22DA               	addwfc	fsr2h,f,c
   957   000860  0E00               	movlw	0
   958   000862  6EDF               	movwf	indf2,c
   959   000864                     
   960                           ;dc_motor.c: 138:     mL->power = 20;
   961   000864  C019  FFD9         	movff	turnRight90@mL,fsr2l
   962   000868  C01A  FFDA         	movff	turnRight90@mL+1,fsr2h
   963   00086C  0E14               	movlw	20
   964   00086E  6EDF               	movwf	indf2,c
   965   000870                     
   966                           ;dc_motor.c: 139:     mR->power = 20;
   967   000870  C01B  FFD9         	movff	turnRight90@mR,fsr2l
   968   000874  C01C  FFDA         	movff	turnRight90@mR+1,fsr2h
   969   000878  0E14               	movlw	20
   970   00087A  6EDF               	movwf	indf2,c
   971                           
   972                           ;dc_motor.c: 141:     while (mL->power < 50 && mR->power < 50 ) {
   973   00087C  EF5E  F004         	goto	l1682
   974   000880                     l1672:
   975                           
   976                           ;dc_motor.c: 142:         _delay((unsigned long)((5)*(64000000/4000.0)));
   977   000880  0E68               	movlw	104
   978   000882  6E1D               	movwf	??_turnRight90^0,c
   979   000884  0EE4               	movlw	228
   980   000886                     u947:
   981   000886  2EE8               	decfsz	wreg,f,c
   982   000888  D7FE               	bra	u947
   983   00088A  2E1D               	decfsz	??_turnRight90^0,f,c
   984   00088C  D7FC               	bra	u947
   985   00088E  D000               	nop2	
   986   000890                     
   987                           ;dc_motor.c: 143:         mL->power++;
   988   000890  C019  FFD9         	movff	turnRight90@mL,fsr2l
   989   000894  C01A  FFDA         	movff	turnRight90@mL+1,fsr2h
   990   000898  2ADF               	incf	indf2,f,c
   991   00089A                     
   992                           ;dc_motor.c: 144:         mR->power++;
   993   00089A  C01B  FFD9         	movff	turnRight90@mR,fsr2l
   994   00089E  C01C  FFDA         	movff	turnRight90@mR+1,fsr2h
   995   0008A2  2ADF               	incf	indf2,f,c
   996   0008A4                     
   997                           ;dc_motor.c: 145:         setMotorPWM(mL);
   998   0008A4  C019  F00E         	movff	turnRight90@mL,setMotorPWM@m
   999   0008A8  C01A  F00F         	movff	turnRight90@mL+1,setMotorPWM@m+1
  1000   0008AC  EC96  F001         	call	_setMotorPWM	;wreg free
  1001   0008B0                     
  1002                           ;dc_motor.c: 146:         setMotorPWM(mR);
  1003   0008B0  C01B  F00E         	movff	turnRight90@mR,setMotorPWM@m
  1004   0008B4  C01C  F00F         	movff	turnRight90@mR+1,setMotorPWM@m+1
  1005   0008B8  EC96  F001         	call	_setMotorPWM	;wreg free
  1006   0008BC                     l1682:
  1007                           
  1008                           ;dc_motor.c: 141:     while (mL->power < 50 && mR->power < 50 ) {
  1009   0008BC  C019  FFD9         	movff	turnRight90@mL,fsr2l
  1010   0008C0  C01A  FFDA         	movff	turnRight90@mL+1,fsr2h
  1011   0008C4  0E32               	movlw	50
  1012   0008C6  60DF               	cpfslt	indf2,c
  1013   0008C8  EF68  F004         	goto	u581
  1014   0008CC  EF6A  F004         	goto	u580
  1015   0008D0                     u581:
  1016   0008D0  EF76  F004         	goto	l1686
  1017   0008D4                     u580:
  1018   0008D4  C01B  FFD9         	movff	turnRight90@mR,fsr2l
  1019   0008D8  C01C  FFDA         	movff	turnRight90@mR+1,fsr2h
  1020   0008DC  0E31               	movlw	49
  1021   0008DE  64DF               	cpfsgt	indf2,c
  1022   0008E0  EF74  F004         	goto	u591
  1023   0008E4  EF76  F004         	goto	u590
  1024   0008E8                     u591:
  1025   0008E8  EF40  F004         	goto	l1672
  1026   0008EC                     u590:
  1027   0008EC                     l1686:
  1028                           
  1029                           ;dc_motor.c: 150:     stop(mL, mR);
  1030   0008EC  C019  F014         	movff	turnRight90@mL,stop@mL
  1031   0008F0  C01A  F015         	movff	turnRight90@mL+1,stop@mL+1
  1032   0008F4  C01B  F016         	movff	turnRight90@mR,stop@mR
  1033   0008F8  C01C  F017         	movff	turnRight90@mR+1,stop@mR+1
  1034   0008FC  ECBD  F005         	call	_stop	;wreg free
  1035   000900  0012               	return		;funcret
  1036   000902                     __end_of_turnRight90:
  1037                           	callstack 0
  1038                           
  1039 ;; *************** function _turnRight135 *****************
  1040 ;; Defined at:
  1041 ;;		line 181 in file "dc_motor.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1044 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1045 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1046 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;		None
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1058 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1060 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1061 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;Total ram usage:        5 bytes
  1063 ;; Hardware stack levels used: 1
  1064 ;; Hardware stack levels required when called: 4
  1065 ;; This function calls:
  1066 ;;		_setMotorPWM
  1067 ;;		_stop
  1068 ;; This function is called by:
  1069 ;;		_main
  1070 ;;		_returnstep
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text2
  1075   00075C                     __ptext2:
  1076                           	callstack 0
  1077   00075C                     _turnRight135:
  1078                           	callstack 26
  1079   00075C                     
  1080                           ;dc_motor.c: 181: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 182: {;dc_mo
      +                          tor.c: 183:     stop(mL, mR);
  1081   00075C  C019  F014         	movff	turnRight135@mL,stop@mL
  1082   000760  C01A  F015         	movff	turnRight135@mL+1,stop@mL+1
  1083   000764  C01B  F016         	movff	turnRight135@mR,stop@mR
  1084   000768  C01C  F017         	movff	turnRight135@mR+1,stop@mR+1
  1085   00076C  ECBD  F005         	call	_stop	;wreg free
  1086   000770                     
  1087                           ;dc_motor.c: 185:     mL->direction = 1;
  1088   000770  EE20 F001          	lfsr	2,1
  1089   000774  5019               	movf	turnRight135@mL^0,w,c
  1090   000776  26D9               	addwf	fsr2l,f,c
  1091   000778  501A               	movf	(turnRight135@mL+1)^0,w,c
  1092   00077A  22DA               	addwfc	fsr2h,f,c
  1093   00077C  0E01               	movlw	1
  1094   00077E  6EDF               	movwf	indf2,c
  1095   000780                     
  1096                           ;dc_motor.c: 186:     mR->direction = 0;
  1097   000780  EE20 F001          	lfsr	2,1
  1098   000784  501B               	movf	turnRight135@mR^0,w,c
  1099   000786  26D9               	addwf	fsr2l,f,c
  1100   000788  501C               	movf	(turnRight135@mR+1)^0,w,c
  1101   00078A  22DA               	addwfc	fsr2h,f,c
  1102   00078C  0E00               	movlw	0
  1103   00078E  6EDF               	movwf	indf2,c
  1104   000790                     
  1105                           ;dc_motor.c: 188:     mL->power = 20;
  1106   000790  C019  FFD9         	movff	turnRight135@mL,fsr2l
  1107   000794  C01A  FFDA         	movff	turnRight135@mL+1,fsr2h
  1108   000798  0E14               	movlw	20
  1109   00079A  6EDF               	movwf	indf2,c
  1110   00079C                     
  1111                           ;dc_motor.c: 189:     mR->power = 20;
  1112   00079C  C01B  FFD9         	movff	turnRight135@mR,fsr2l
  1113   0007A0  C01C  FFDA         	movff	turnRight135@mR+1,fsr2h
  1114   0007A4  0E14               	movlw	20
  1115   0007A6  6EDF               	movwf	indf2,c
  1116                           
  1117                           ;dc_motor.c: 191:     while (mL->power != 50 || mR->power != 50 ) {
  1118   0007A8  EFF3  F003         	goto	l1734
  1119   0007AC                     l1724:
  1120                           
  1121                           ;dc_motor.c: 192:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1122   0007AC  0ED0               	movlw	208
  1123   0007AE  6E1D               	movwf	??_turnRight135^0,c
  1124   0007B0  0ECA               	movlw	202
  1125   0007B2                     u957:
  1126   0007B2  2EE8               	decfsz	wreg,f,c
  1127   0007B4  D7FE               	bra	u957
  1128   0007B6  2E1D               	decfsz	??_turnRight135^0,f,c
  1129   0007B8  D7FC               	bra	u957
  1130   0007BA                     
  1131                           ;dc_motor.c: 193:         mL->power++;
  1132   0007BA  C019  FFD9         	movff	turnRight135@mL,fsr2l
  1133   0007BE  C01A  FFDA         	movff	turnRight135@mL+1,fsr2h
  1134   0007C2  2ADF               	incf	indf2,f,c
  1135   0007C4                     
  1136                           ;dc_motor.c: 194:         mR->power++;
  1137   0007C4  C01B  FFD9         	movff	turnRight135@mR,fsr2l
  1138   0007C8  C01C  FFDA         	movff	turnRight135@mR+1,fsr2h
  1139   0007CC  2ADF               	incf	indf2,f,c
  1140   0007CE                     
  1141                           ;dc_motor.c: 195:         setMotorPWM(mL);
  1142   0007CE  C019  F00E         	movff	turnRight135@mL,setMotorPWM@m
  1143   0007D2  C01A  F00F         	movff	turnRight135@mL+1,setMotorPWM@m+1
  1144   0007D6  EC96  F001         	call	_setMotorPWM	;wreg free
  1145   0007DA                     
  1146                           ;dc_motor.c: 196:         setMotorPWM(mR);
  1147   0007DA  C01B  F00E         	movff	turnRight135@mR,setMotorPWM@m
  1148   0007DE  C01C  F00F         	movff	turnRight135@mR+1,setMotorPWM@m+1
  1149   0007E2  EC96  F001         	call	_setMotorPWM	;wreg free
  1150   0007E6                     l1734:
  1151                           
  1152                           ;dc_motor.c: 191:     while (mL->power != 50 || mR->power != 50 ) {
  1153   0007E6  C019  FFD9         	movff	turnRight135@mL,fsr2l
  1154   0007EA  C01A  FFDA         	movff	turnRight135@mL+1,fsr2h
  1155   0007EE  0E32               	movlw	50
  1156   0007F0  18DE               	xorwf	postinc2,w,c
  1157   0007F2  A4D8               	btfss	status,2,c
  1158   0007F4  EFFE  F003         	goto	u621
  1159   0007F8  EF00  F004         	goto	u620
  1160   0007FC                     u621:
  1161   0007FC  EFD6  F003         	goto	l1724
  1162   000800                     u620:
  1163   000800  C01B  FFD9         	movff	turnRight135@mR,fsr2l
  1164   000804  C01C  FFDA         	movff	turnRight135@mR+1,fsr2h
  1165   000808  0E32               	movlw	50
  1166   00080A  18DE               	xorwf	postinc2,w,c
  1167   00080C  A4D8               	btfss	status,2,c
  1168   00080E  EF0B  F004         	goto	u631
  1169   000812  EF0D  F004         	goto	u630
  1170   000816                     u631:
  1171   000816  EFD6  F003         	goto	l1724
  1172   00081A                     u630:
  1173   00081A                     
  1174                           ;dc_motor.c: 198:     stop(mL, mR);
  1175   00081A  C019  F014         	movff	turnRight135@mL,stop@mL
  1176   00081E  C01A  F015         	movff	turnRight135@mL+1,stop@mL+1
  1177   000822  C01B  F016         	movff	turnRight135@mR,stop@mR
  1178   000826  C01C  F017         	movff	turnRight135@mR+1,stop@mR+1
  1179   00082A  ECBD  F005         	call	_stop	;wreg free
  1180   00082E  0012               	return		;funcret
  1181   000830                     __end_of_turnRight135:
  1182                           	callstack 0
  1183                           
  1184 ;; *************** function _turnLeft90 *****************
  1185 ;; Defined at:
  1186 ;;		line 110 in file "dc_motor.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1189 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1190 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1191 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;Total ram usage:        5 bytes
  1208 ;; Hardware stack levels used: 1
  1209 ;; Hardware stack levels required when called: 4
  1210 ;; This function calls:
  1211 ;;		_setMotorPWM
  1212 ;;		_stop
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;;		_returnstep
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text3
  1220   000498                     __ptext3:
  1221                           	callstack 0
  1222   000498                     _turnLeft90:
  1223                           	callstack 26
  1224   000498                     
  1225                           ;dc_motor.c: 110: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 111: { stop(mL
      +                          , mR);
  1226   000498  C019  F014         	movff	turnLeft90@mL,stop@mL
  1227   00049C  C01A  F015         	movff	turnLeft90@mL+1,stop@mL+1
  1228   0004A0  C01B  F016         	movff	turnLeft90@mR,stop@mR
  1229   0004A4  C01C  F017         	movff	turnLeft90@mR+1,stop@mR+1
  1230   0004A8  ECBD  F005         	call	_stop	;wreg free
  1231   0004AC                     
  1232                           ;dc_motor.c: 113:     mL->direction = 0;
  1233   0004AC  EE20 F001          	lfsr	2,1
  1234   0004B0  5019               	movf	turnLeft90@mL^0,w,c
  1235   0004B2  26D9               	addwf	fsr2l,f,c
  1236   0004B4  501A               	movf	(turnLeft90@mL+1)^0,w,c
  1237   0004B6  22DA               	addwfc	fsr2h,f,c
  1238   0004B8  0E00               	movlw	0
  1239   0004BA  6EDF               	movwf	indf2,c
  1240   0004BC                     
  1241                           ;dc_motor.c: 114:     mR->direction = 1;
  1242   0004BC  EE20 F001          	lfsr	2,1
  1243   0004C0  501B               	movf	turnLeft90@mR^0,w,c
  1244   0004C2  26D9               	addwf	fsr2l,f,c
  1245   0004C4  501C               	movf	(turnLeft90@mR+1)^0,w,c
  1246   0004C6  22DA               	addwfc	fsr2h,f,c
  1247   0004C8  0E01               	movlw	1
  1248   0004CA  6EDF               	movwf	indf2,c
  1249   0004CC                     
  1250                           ;dc_motor.c: 116:     mL->power = 20;
  1251   0004CC  C019  FFD9         	movff	turnLeft90@mL,fsr2l
  1252   0004D0  C01A  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1253   0004D4  0E14               	movlw	20
  1254   0004D6  6EDF               	movwf	indf2,c
  1255   0004D8                     
  1256                           ;dc_motor.c: 117:     mR->power = 20;
  1257   0004D8  C01B  FFD9         	movff	turnLeft90@mR,fsr2l
  1258   0004DC  C01C  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1259   0004E0  0E14               	movlw	20
  1260   0004E2  6EDF               	movwf	indf2,c
  1261                           
  1262                           ;dc_motor.c: 119:     while (mL->power != 50 || mR->power != 50 ) {
  1263   0004E4  EF92  F002         	goto	l1656
  1264   0004E8                     l1646:
  1265                           
  1266                           ;dc_motor.c: 120:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1267   0004E8  0E68               	movlw	104
  1268   0004EA  6E1D               	movwf	??_turnLeft90^0,c
  1269   0004EC  0EE4               	movlw	228
  1270   0004EE                     u967:
  1271   0004EE  2EE8               	decfsz	wreg,f,c
  1272   0004F0  D7FE               	bra	u967
  1273   0004F2  2E1D               	decfsz	??_turnLeft90^0,f,c
  1274   0004F4  D7FC               	bra	u967
  1275   0004F6  D000               	nop2	
  1276   0004F8                     
  1277                           ;dc_motor.c: 121:         mL->power++;
  1278   0004F8  C019  FFD9         	movff	turnLeft90@mL,fsr2l
  1279   0004FC  C01A  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1280   000500  2ADF               	incf	indf2,f,c
  1281   000502                     
  1282                           ;dc_motor.c: 122:         mR->power++;
  1283   000502  C01B  FFD9         	movff	turnLeft90@mR,fsr2l
  1284   000506  C01C  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1285   00050A  2ADF               	incf	indf2,f,c
  1286   00050C                     
  1287                           ;dc_motor.c: 123:         setMotorPWM(mL);
  1288   00050C  C019  F00E         	movff	turnLeft90@mL,setMotorPWM@m
  1289   000510  C01A  F00F         	movff	turnLeft90@mL+1,setMotorPWM@m+1
  1290   000514  EC96  F001         	call	_setMotorPWM	;wreg free
  1291   000518                     
  1292                           ;dc_motor.c: 124:         setMotorPWM(mR);
  1293   000518  C01B  F00E         	movff	turnLeft90@mR,setMotorPWM@m
  1294   00051C  C01C  F00F         	movff	turnLeft90@mR+1,setMotorPWM@m+1
  1295   000520  EC96  F001         	call	_setMotorPWM	;wreg free
  1296   000524                     l1656:
  1297                           
  1298                           ;dc_motor.c: 119:     while (mL->power != 50 || mR->power != 50 ) {
  1299   000524  C019  FFD9         	movff	turnLeft90@mL,fsr2l
  1300   000528  C01A  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1301   00052C  0E32               	movlw	50
  1302   00052E  18DE               	xorwf	postinc2,w,c
  1303   000530  A4D8               	btfss	status,2,c
  1304   000532  EF9D  F002         	goto	u561
  1305   000536  EF9F  F002         	goto	u560
  1306   00053A                     u561:
  1307   00053A  EF74  F002         	goto	l1646
  1308   00053E                     u560:
  1309   00053E  C01B  FFD9         	movff	turnLeft90@mR,fsr2l
  1310   000542  C01C  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1311   000546  0E32               	movlw	50
  1312   000548  18DE               	xorwf	postinc2,w,c
  1313   00054A  A4D8               	btfss	status,2,c
  1314   00054C  EFAA  F002         	goto	u571
  1315   000550  EFAC  F002         	goto	u570
  1316   000554                     u571:
  1317   000554  EF74  F002         	goto	l1646
  1318   000558                     u570:
  1319   000558                     
  1320                           ;dc_motor.c: 126:     setMotorPWM(mL);
  1321   000558  C019  F00E         	movff	turnLeft90@mL,setMotorPWM@m
  1322   00055C  C01A  F00F         	movff	turnLeft90@mL+1,setMotorPWM@m+1
  1323   000560  EC96  F001         	call	_setMotorPWM	;wreg free
  1324                           
  1325                           ;dc_motor.c: 127:     setMotorPWM(mR);
  1326   000564  C01B  F00E         	movff	turnLeft90@mR,setMotorPWM@m
  1327   000568  C01C  F00F         	movff	turnLeft90@mR+1,setMotorPWM@m+1
  1328   00056C  EC96  F001         	call	_setMotorPWM	;wreg free
  1329                           
  1330                           ;dc_motor.c: 128:     stop(mL, mR);
  1331   000570  C019  F014         	movff	turnLeft90@mL,stop@mL
  1332   000574  C01A  F015         	movff	turnLeft90@mL+1,stop@mL+1
  1333   000578  C01B  F016         	movff	turnLeft90@mR,stop@mR
  1334   00057C  C01C  F017         	movff	turnLeft90@mR+1,stop@mR+1
  1335   000580  ECBD  F005         	call	_stop	;wreg free
  1336   000584  0012               	return		;funcret
  1337   000586                     __end_of_turnLeft90:
  1338                           	callstack 0
  1339                           
  1340 ;; *************** function _turnLeft135 *****************
  1341 ;; Defined at:
  1342 ;;		line 154 in file "dc_motor.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1345 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1346 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1347 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      void 
  1352 ;; Registers used:
  1353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1361 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1363 ;;Total ram usage:        5 bytes
  1364 ;; Hardware stack levels used: 1
  1365 ;; Hardware stack levels required when called: 4
  1366 ;; This function calls:
  1367 ;;		_setMotorPWM
  1368 ;;		_stop
  1369 ;; This function is called by:
  1370 ;;		_main
  1371 ;;		_returnstep
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text4
  1376   000586                     __ptext4:
  1377                           	callstack 0
  1378   000586                     _turnLeft135:
  1379                           	callstack 26
  1380   000586                     
  1381                           ;dc_motor.c: 154: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 155: {;dc_mot
      +                          or.c: 156:     stop(mL, mR);
  1382   000586  C019  F014         	movff	turnLeft135@mL,stop@mL
  1383   00058A  C01A  F015         	movff	turnLeft135@mL+1,stop@mL+1
  1384   00058E  C01B  F016         	movff	turnLeft135@mR,stop@mR
  1385   000592  C01C  F017         	movff	turnLeft135@mR+1,stop@mR+1
  1386   000596  ECBD  F005         	call	_stop	;wreg free
  1387   00059A                     
  1388                           ;dc_motor.c: 159:     mL->direction = 0;
  1389   00059A  EE20 F001          	lfsr	2,1
  1390   00059E  5019               	movf	turnLeft135@mL^0,w,c
  1391   0005A0  26D9               	addwf	fsr2l,f,c
  1392   0005A2  501A               	movf	(turnLeft135@mL+1)^0,w,c
  1393   0005A4  22DA               	addwfc	fsr2h,f,c
  1394   0005A6  0E00               	movlw	0
  1395   0005A8  6EDF               	movwf	indf2,c
  1396   0005AA                     
  1397                           ;dc_motor.c: 160:     mR->direction = 1;
  1398   0005AA  EE20 F001          	lfsr	2,1
  1399   0005AE  501B               	movf	turnLeft135@mR^0,w,c
  1400   0005B0  26D9               	addwf	fsr2l,f,c
  1401   0005B2  501C               	movf	(turnLeft135@mR+1)^0,w,c
  1402   0005B4  22DA               	addwfc	fsr2h,f,c
  1403   0005B6  0E01               	movlw	1
  1404   0005B8  6EDF               	movwf	indf2,c
  1405   0005BA                     
  1406                           ;dc_motor.c: 162:     mL->power = 20;
  1407   0005BA  C019  FFD9         	movff	turnLeft135@mL,fsr2l
  1408   0005BE  C01A  FFDA         	movff	turnLeft135@mL+1,fsr2h
  1409   0005C2  0E14               	movlw	20
  1410   0005C4  6EDF               	movwf	indf2,c
  1411   0005C6                     
  1412                           ;dc_motor.c: 163:     mR->power = 20;
  1413   0005C6  C01B  FFD9         	movff	turnLeft135@mR,fsr2l
  1414   0005CA  C01C  FFDA         	movff	turnLeft135@mR+1,fsr2h
  1415   0005CE  0E14               	movlw	20
  1416   0005D0  6EDF               	movwf	indf2,c
  1417                           
  1418                           ;dc_motor.c: 165:     while (mL->power != 50 || mR->power != 50 ) {
  1419   0005D2  EF08  F003         	goto	l1708
  1420   0005D6                     l1698:
  1421                           
  1422                           ;dc_motor.c: 166:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1423   0005D6  0ED0               	movlw	208
  1424   0005D8  6E1D               	movwf	??_turnLeft135^0,c
  1425   0005DA  0ECA               	movlw	202
  1426   0005DC                     u977:
  1427   0005DC  2EE8               	decfsz	wreg,f,c
  1428   0005DE  D7FE               	bra	u977
  1429   0005E0  2E1D               	decfsz	??_turnLeft135^0,f,c
  1430   0005E2  D7FC               	bra	u977
  1431   0005E4                     
  1432                           ;dc_motor.c: 167:         mL->power++;
  1433   0005E4  C019  FFD9         	movff	turnLeft135@mL,fsr2l
  1434   0005E8  C01A  FFDA         	movff	turnLeft135@mL+1,fsr2h
  1435   0005EC  2ADF               	incf	indf2,f,c
  1436   0005EE                     
  1437                           ;dc_motor.c: 168:         mR->power++;
  1438   0005EE  C01B  FFD9         	movff	turnLeft135@mR,fsr2l
  1439   0005F2  C01C  FFDA         	movff	turnLeft135@mR+1,fsr2h
  1440   0005F6  2ADF               	incf	indf2,f,c
  1441   0005F8                     
  1442                           ;dc_motor.c: 169:         setMotorPWM(mL);
  1443   0005F8  C019  F00E         	movff	turnLeft135@mL,setMotorPWM@m
  1444   0005FC  C01A  F00F         	movff	turnLeft135@mL+1,setMotorPWM@m+1
  1445   000600  EC96  F001         	call	_setMotorPWM	;wreg free
  1446   000604                     
  1447                           ;dc_motor.c: 170:         setMotorPWM(mR);
  1448   000604  C01B  F00E         	movff	turnLeft135@mR,setMotorPWM@m
  1449   000608  C01C  F00F         	movff	turnLeft135@mR+1,setMotorPWM@m+1
  1450   00060C  EC96  F001         	call	_setMotorPWM	;wreg free
  1451   000610                     l1708:
  1452                           
  1453                           ;dc_motor.c: 165:     while (mL->power != 50 || mR->power != 50 ) {
  1454   000610  C019  FFD9         	movff	turnLeft135@mL,fsr2l
  1455   000614  C01A  FFDA         	movff	turnLeft135@mL+1,fsr2h
  1456   000618  0E32               	movlw	50
  1457   00061A  18DE               	xorwf	postinc2,w,c
  1458   00061C  A4D8               	btfss	status,2,c
  1459   00061E  EF13  F003         	goto	u601
  1460   000622  EF15  F003         	goto	u600
  1461   000626                     u601:
  1462   000626  EFEB  F002         	goto	l1698
  1463   00062A                     u600:
  1464   00062A  C01B  FFD9         	movff	turnLeft135@mR,fsr2l
  1465   00062E  C01C  FFDA         	movff	turnLeft135@mR+1,fsr2h
  1466   000632  0E32               	movlw	50
  1467   000634  18DE               	xorwf	postinc2,w,c
  1468   000636  A4D8               	btfss	status,2,c
  1469   000638  EF20  F003         	goto	u611
  1470   00063C  EF22  F003         	goto	u610
  1471   000640                     u611:
  1472   000640  EFEB  F002         	goto	l1698
  1473   000644                     u610:
  1474   000644                     
  1475                           ;dc_motor.c: 173:     setMotorPWM(mL);
  1476   000644  C019  F00E         	movff	turnLeft135@mL,setMotorPWM@m
  1477   000648  C01A  F00F         	movff	turnLeft135@mL+1,setMotorPWM@m+1
  1478   00064C  EC96  F001         	call	_setMotorPWM	;wreg free
  1479                           
  1480                           ;dc_motor.c: 174:     setMotorPWM(mR);
  1481   000650  C01B  F00E         	movff	turnLeft135@mR,setMotorPWM@m
  1482   000654  C01C  F00F         	movff	turnLeft135@mR+1,setMotorPWM@m+1
  1483   000658  EC96  F001         	call	_setMotorPWM	;wreg free
  1484                           
  1485                           ;dc_motor.c: 176:     stop(mL, mR);
  1486   00065C  C019  F014         	movff	turnLeft135@mL,stop@mL
  1487   000660  C01A  F015         	movff	turnLeft135@mL+1,stop@mL+1
  1488   000664  C01B  F016         	movff	turnLeft135@mR,stop@mR
  1489   000668  C01C  F017         	movff	turnLeft135@mR+1,stop@mR+1
  1490   00066C  ECBD  F005         	call	_stop	;wreg free
  1491   000670  0012               	return		;funcret
  1492   000672                     __end_of_turnLeft135:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _turn180 *****************
  1496 ;; Defined at:
  1497 ;;		line 201 in file "dc_motor.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1500 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1501 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1502 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;		None
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1514 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1516 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1517 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1518 ;;Total ram usage:        6 bytes
  1519 ;; Hardware stack levels used: 1
  1520 ;; Hardware stack levels required when called: 4
  1521 ;; This function calls:
  1522 ;;		_setMotorPWM
  1523 ;;		_stop
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;;		_returnstep
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text5
  1531   000672                     __ptext5:
  1532                           	callstack 0
  1533   000672                     _turn180:
  1534                           	callstack 26
  1535   000672                     
  1536                           ;dc_motor.c: 201: void turn180(DC_motor *mL, DC_motor *mR);dc_motor.c: 202: {;dc_motor.c
      +                          : 203:     stop(mL, mR);
  1537   000672  C019  F014         	movff	turn180@mL,stop@mL
  1538   000676  C01A  F015         	movff	turn180@mL+1,stop@mL+1
  1539   00067A  C01B  F016         	movff	turn180@mR,stop@mR
  1540   00067E  C01C  F017         	movff	turn180@mR+1,stop@mR+1
  1541   000682  ECBD  F005         	call	_stop	;wreg free
  1542   000686                     
  1543                           ;dc_motor.c: 204:     mL->direction = 1;
  1544   000686  EE20 F001          	lfsr	2,1
  1545   00068A  5019               	movf	turn180@mL^0,w,c
  1546   00068C  26D9               	addwf	fsr2l,f,c
  1547   00068E  501A               	movf	(turn180@mL+1)^0,w,c
  1548   000690  22DA               	addwfc	fsr2h,f,c
  1549   000692  0E01               	movlw	1
  1550   000694  6EDF               	movwf	indf2,c
  1551   000696                     
  1552                           ;dc_motor.c: 205:     mR->direction = 0;
  1553   000696  EE20 F001          	lfsr	2,1
  1554   00069A  501B               	movf	turn180@mR^0,w,c
  1555   00069C  26D9               	addwf	fsr2l,f,c
  1556   00069E  501C               	movf	(turn180@mR+1)^0,w,c
  1557   0006A0  22DA               	addwfc	fsr2h,f,c
  1558   0006A2  0E00               	movlw	0
  1559   0006A4  6EDF               	movwf	indf2,c
  1560   0006A6                     
  1561                           ;dc_motor.c: 207:     mL->power = 20;
  1562   0006A6  C019  FFD9         	movff	turn180@mL,fsr2l
  1563   0006AA  C01A  FFDA         	movff	turn180@mL+1,fsr2h
  1564   0006AE  0E14               	movlw	20
  1565   0006B0  6EDF               	movwf	indf2,c
  1566   0006B2                     
  1567                           ;dc_motor.c: 208:     mR->power = 20;
  1568   0006B2  C01B  FFD9         	movff	turn180@mR,fsr2l
  1569   0006B6  C01C  FFDA         	movff	turn180@mR+1,fsr2h
  1570   0006BA  0E14               	movlw	20
  1571   0006BC  6EDF               	movwf	indf2,c
  1572                           
  1573                           ;dc_motor.c: 210:     while (mL->power != 50 || mR->power != 50 ) {
  1574   0006BE  EF7E  F003         	goto	l1760
  1575   0006C2                     l1750:
  1576                           
  1577                           ;dc_motor.c: 211:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1578   0006C2  0ED0               	movlw	208
  1579   0006C4  6E1D               	movwf	??_turn180^0,c
  1580   0006C6  0ECA               	movlw	202
  1581   0006C8                     u987:
  1582   0006C8  2EE8               	decfsz	wreg,f,c
  1583   0006CA  D7FE               	bra	u987
  1584   0006CC  2E1D               	decfsz	??_turn180^0,f,c
  1585   0006CE  D7FC               	bra	u987
  1586   0006D0                     
  1587                           ;dc_motor.c: 212:         mL->power++;
  1588   0006D0  C019  FFD9         	movff	turn180@mL,fsr2l
  1589   0006D4  C01A  FFDA         	movff	turn180@mL+1,fsr2h
  1590   0006D8  2ADF               	incf	indf2,f,c
  1591   0006DA                     
  1592                           ;dc_motor.c: 213:         mR->power++;
  1593   0006DA  C01B  FFD9         	movff	turn180@mR,fsr2l
  1594   0006DE  C01C  FFDA         	movff	turn180@mR+1,fsr2h
  1595   0006E2  2ADF               	incf	indf2,f,c
  1596   0006E4                     
  1597                           ;dc_motor.c: 214:         setMotorPWM(mL);
  1598   0006E4  C019  F00E         	movff	turn180@mL,setMotorPWM@m
  1599   0006E8  C01A  F00F         	movff	turn180@mL+1,setMotorPWM@m+1
  1600   0006EC  EC96  F001         	call	_setMotorPWM	;wreg free
  1601   0006F0                     
  1602                           ;dc_motor.c: 215:         setMotorPWM(mR);
  1603   0006F0  C01B  F00E         	movff	turn180@mR,setMotorPWM@m
  1604   0006F4  C01C  F00F         	movff	turn180@mR+1,setMotorPWM@m+1
  1605   0006F8  EC96  F001         	call	_setMotorPWM	;wreg free
  1606   0006FC                     l1760:
  1607                           
  1608                           ;dc_motor.c: 210:     while (mL->power != 50 || mR->power != 50 ) {
  1609   0006FC  C019  FFD9         	movff	turn180@mL,fsr2l
  1610   000700  C01A  FFDA         	movff	turn180@mL+1,fsr2h
  1611   000704  0E32               	movlw	50
  1612   000706  18DE               	xorwf	postinc2,w,c
  1613   000708  A4D8               	btfss	status,2,c
  1614   00070A  EF89  F003         	goto	u641
  1615   00070E  EF8B  F003         	goto	u640
  1616   000712                     u641:
  1617   000712  EF61  F003         	goto	l1750
  1618   000716                     u640:
  1619   000716  C01B  FFD9         	movff	turn180@mR,fsr2l
  1620   00071A  C01C  FFDA         	movff	turn180@mR+1,fsr2h
  1621   00071E  0E32               	movlw	50
  1622   000720  18DE               	xorwf	postinc2,w,c
  1623   000722  A4D8               	btfss	status,2,c
  1624   000724  EF96  F003         	goto	u651
  1625   000728  EF98  F003         	goto	u650
  1626   00072C                     u651:
  1627   00072C  EF61  F003         	goto	l1750
  1628   000730                     u650:
  1629   000730                     
  1630                           ;dc_motor.c: 217:     _delay((unsigned long)((600)*(64000000/4000.0)));
  1631   000730  0E31               	movlw	49
  1632   000732  6E1E               	movwf	(??_turn180+1)^0,c
  1633   000734  0EB4               	movlw	180
  1634   000736  6E1D               	movwf	??_turn180^0,c
  1635   000738  0E66               	movlw	102
  1636   00073A                     u997:
  1637   00073A  2EE8               	decfsz	wreg,f,c
  1638   00073C  D7FE               	bra	u997
  1639   00073E  2E1D               	decfsz	??_turn180^0,f,c
  1640   000740  D7FC               	bra	u997
  1641   000742  2E1E               	decfsz	(??_turn180+1)^0,f,c
  1642   000744  D7FA               	bra	u997
  1643   000746                     
  1644                           ;dc_motor.c: 218:     stop(mL, mR);
  1645   000746  C019  F014         	movff	turn180@mL,stop@mL
  1646   00074A  C01A  F015         	movff	turn180@mL+1,stop@mL+1
  1647   00074E  C01B  F016         	movff	turn180@mR,stop@mR
  1648   000752  C01C  F017         	movff	turn180@mR+1,stop@mR+1
  1649   000756  ECBD  F005         	call	_stop	;wreg free
  1650   00075A  0012               	return		;funcret
  1651   00075C                     __end_of_turn180:
  1652                           	callstack 0
  1653                           
  1654 ;; *************** function _square *****************
  1655 ;; Defined at:
  1656 ;;		line 245 in file "dc_motor.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1659 ;;		 -> main@motorL(9), returnhome@motorL(9), 
  1660 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1661 ;;		 -> main@motorR(9), returnhome@motorR(9), 
  1662 ;;  dir             1   28[COMRAM] unsigned char 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      void 
  1667 ;; Registers used:
  1668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1674 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1678 ;;Total ram usage:        6 bytes
  1679 ;; Hardware stack levels used: 1
  1680 ;; Hardware stack levels required when called: 4
  1681 ;; This function calls:
  1682 ;;		_setMotorPWM
  1683 ;;		_stop
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;;		_returnhome
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text6
  1691   000902                     __ptext6:
  1692                           	callstack 0
  1693   000902                     _square:
  1694                           	callstack 26
  1695   000902                     
  1696                           ;dc_motor.c: 245: void square(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 246: {;d
      +                          c_motor.c: 247:     mL->direction = dir;
  1697   000902  EE20 F001          	lfsr	2,1
  1698   000906  5019               	movf	square@mL^0,w,c
  1699   000908  26D9               	addwf	fsr2l,f,c
  1700   00090A  501A               	movf	(square@mL+1)^0,w,c
  1701   00090C  22DA               	addwfc	fsr2h,f,c
  1702   00090E  C01D  FFDF         	movff	square@dir,indf2
  1703                           
  1704                           ;dc_motor.c: 248:     mR->direction = dir;
  1705   000912  EE20 F001          	lfsr	2,1
  1706   000916  501B               	movf	square@mR^0,w,c
  1707   000918  26D9               	addwf	fsr2l,f,c
  1708   00091A  501C               	movf	(square@mR+1)^0,w,c
  1709   00091C  22DA               	addwfc	fsr2h,f,c
  1710   00091E  C01D  FFDF         	movff	square@dir,indf2
  1711                           
  1712                           ;dc_motor.c: 250:     while (mL->power != 50 || mR->power != 50 ) {
  1713   000922  EFBC  F004         	goto	l1802
  1714   000926                     l1788:
  1715                           
  1716                           ;dc_motor.c: 251:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1717   000926  0ED0               	movlw	208
  1718   000928  6E1E               	movwf	??_square^0,c
  1719   00092A  0ECA               	movlw	202
  1720   00092C                     u1007:
  1721   00092C  2EE8               	decfsz	wreg,f,c
  1722   00092E  D7FE               	bra	u1007
  1723   000930  2E1E               	decfsz	??_square^0,f,c
  1724   000932  D7FC               	bra	u1007
  1725   000934                     
  1726                           ;dc_motor.c: 252:         mL->power++;
  1727   000934  C019  FFD9         	movff	square@mL,fsr2l
  1728   000938  C01A  FFDA         	movff	square@mL+1,fsr2h
  1729   00093C  2ADF               	incf	indf2,f,c
  1730   00093E                     
  1731                           ;dc_motor.c: 253:         mR->power++;
  1732   00093E  C01B  FFD9         	movff	square@mR,fsr2l
  1733   000942  C01C  FFDA         	movff	square@mR+1,fsr2h
  1734   000946  2ADF               	incf	indf2,f,c
  1735   000948                     
  1736                           ;dc_motor.c: 254:         setMotorPWM(mL);
  1737   000948  C019  F00E         	movff	square@mL,setMotorPWM@m
  1738   00094C  C01A  F00F         	movff	square@mL+1,setMotorPWM@m+1
  1739   000950  EC96  F001         	call	_setMotorPWM	;wreg free
  1740   000954                     
  1741                           ;dc_motor.c: 255:         setMotorPWM(mR);
  1742   000954  C01B  F00E         	movff	square@mR,setMotorPWM@m
  1743   000958  C01C  F00F         	movff	square@mR+1,setMotorPWM@m+1
  1744   00095C  EC96  F001         	call	_setMotorPWM	;wreg free
  1745   000960                     
  1746                           ;dc_motor.c: 257:     setMotorPWM(mL);
  1747   000960  C019  F00E         	movff	square@mL,setMotorPWM@m
  1748   000964  C01A  F00F         	movff	square@mL+1,setMotorPWM@m+1
  1749   000968  EC96  F001         	call	_setMotorPWM	;wreg free
  1750   00096C                     
  1751                           ;dc_motor.c: 258:     setMotorPWM(mR);
  1752   00096C  C01B  F00E         	movff	square@mR,setMotorPWM@m
  1753   000970  C01C  F00F         	movff	square@mR+1,setMotorPWM@m+1
  1754   000974  EC96  F001         	call	_setMotorPWM	;wreg free
  1755   000978                     l1802:
  1756                           
  1757                           ;dc_motor.c: 250:     while (mL->power != 50 || mR->power != 50 ) {
  1758   000978  C019  FFD9         	movff	square@mL,fsr2l
  1759   00097C  C01A  FFDA         	movff	square@mL+1,fsr2h
  1760   000980  0E32               	movlw	50
  1761   000982  18DE               	xorwf	postinc2,w,c
  1762   000984  A4D8               	btfss	status,2,c
  1763   000986  EFC7  F004         	goto	u681
  1764   00098A  EFC9  F004         	goto	u680
  1765   00098E                     u681:
  1766   00098E  EF93  F004         	goto	l1788
  1767   000992                     u680:
  1768   000992  C01B  FFD9         	movff	square@mR,fsr2l
  1769   000996  C01C  FFDA         	movff	square@mR+1,fsr2h
  1770   00099A  0E32               	movlw	50
  1771   00099C  18DE               	xorwf	postinc2,w,c
  1772   00099E  A4D8               	btfss	status,2,c
  1773   0009A0  EFD4  F004         	goto	u691
  1774   0009A4  EFD6  F004         	goto	u690
  1775   0009A8                     u691:
  1776   0009A8  EF93  F004         	goto	l1788
  1777   0009AC                     u690:
  1778   0009AC                     
  1779                           ;dc_motor.c: 261:     stop(mL, mR);
  1780   0009AC  C019  F014         	movff	square@mL,stop@mL
  1781   0009B0  C01A  F015         	movff	square@mL+1,stop@mL+1
  1782   0009B4  C01B  F016         	movff	square@mR,stop@mR
  1783   0009B8  C01C  F017         	movff	square@mR+1,stop@mR+1
  1784   0009BC  ECBD  F005         	call	_stop	;wreg free
  1785   0009C0  0012               	return		;funcret
  1786   0009C2                     __end_of_square:
  1787                           	callstack 0
  1788                           
  1789 ;; *************** function _stop *****************
  1790 ;; Defined at:
  1791 ;;		line 96 in file "dc_motor.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1794 ;;		 -> main@motorL(9), returnstep@motorL(9), returnhome@motorL(9), 
  1795 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1796 ;;		 -> main@motorR(9), returnstep@motorR(9), returnhome@motorR(9), 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;		None
  1799 ;; Return value:  Size  Location     Type
  1800 ;;                  1    wreg      void 
  1801 ;; Registers used:
  1802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1803 ;; Tracked objects:
  1804 ;;		On entry : 0/0
  1805 ;;		On exit  : 0/0
  1806 ;;		Unchanged: 0/0
  1807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1808 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1810 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1811 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1812 ;;Total ram usage:        5 bytes
  1813 ;; Hardware stack levels used: 1
  1814 ;; Hardware stack levels required when called: 3
  1815 ;; This function calls:
  1816 ;;		_setMotorPWM
  1817 ;; This function is called by:
  1818 ;;		_turnLeft90
  1819 ;;		_turnRight90
  1820 ;;		_turnLeft135
  1821 ;;		_turnRight135
  1822 ;;		_turn180
  1823 ;;		_square
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text7
  1828   000B7A                     __ptext7:
  1829                           	callstack 0
  1830   000B7A                     _stop:
  1831                           	callstack 26
  1832   000B7A                     
  1833                           ;dc_motor.c: 96: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 97: {;dc_motor.c: 99:
      +                               while (mL->power > 0 && mR->power > 0) {
  1834   000B7A  EFDD  F005         	goto	l1600
  1835   000B7E                     l1592:
  1836                           
  1837                           ;dc_motor.c: 100:     mL->power--;
  1838   000B7E  C014  FFD9         	movff	stop@mL,fsr2l
  1839   000B82  C015  FFDA         	movff	stop@mL+1,fsr2h
  1840   000B86  06DF               	decf	indf2,f,c
  1841                           
  1842                           ;dc_motor.c: 101:     mR->power--;
  1843   000B88  C016  FFD9         	movff	stop@mR,fsr2l
  1844   000B8C  C017  FFDA         	movff	stop@mR+1,fsr2h
  1845   000B90  06DF               	decf	indf2,f,c
  1846   000B92                     
  1847                           ;dc_motor.c: 102:     _delay((unsigned long)((1)*(64000000/4000.0)));
  1848   000B92  0E15               	movlw	21
  1849   000B94  6E18               	movwf	??_stop^0,c
  1850   000B96  0EC6               	movlw	198
  1851   000B98                     u1017:
  1852   000B98  2EE8               	decfsz	wreg,f,c
  1853   000B9A  D7FE               	bra	u1017
  1854   000B9C  2E18               	decfsz	??_stop^0,f,c
  1855   000B9E  D7FC               	bra	u1017
  1856   000BA0  D000               	nop2	
  1857   000BA2                     
  1858                           ;dc_motor.c: 103:     setMotorPWM(mL);
  1859   000BA2  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1860   000BA6  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1861   000BAA  EC96  F001         	call	_setMotorPWM	;wreg free
  1862   000BAE                     
  1863                           ;dc_motor.c: 104:     setMotorPWM(mR);
  1864   000BAE  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1865   000BB2  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1866   000BB6  EC96  F001         	call	_setMotorPWM	;wreg free
  1867   000BBA                     l1600:
  1868                           
  1869                           ;dc_motor.c: 99:     while (mL->power > 0 && mR->power > 0) {
  1870   000BBA  C014  FFD9         	movff	stop@mL,fsr2l
  1871   000BBE  C015  FFDA         	movff	stop@mL+1,fsr2h
  1872   000BC2  50DF               	movf	indf2,w,c
  1873   000BC4  B4D8               	btfsc	status,2,c
  1874   000BC6  EFE7  F005         	goto	u541
  1875   000BCA  EFE9  F005         	goto	u540
  1876   000BCE                     u541:
  1877   000BCE  EFF5  F005         	goto	l153
  1878   000BD2                     u540:
  1879   000BD2  C016  FFD9         	movff	stop@mR,fsr2l
  1880   000BD6  C017  FFDA         	movff	stop@mR+1,fsr2h
  1881   000BDA  50DF               	movf	indf2,w,c
  1882   000BDC  A4D8               	btfss	status,2,c
  1883   000BDE  EFF3  F005         	goto	u551
  1884   000BE2  EFF5  F005         	goto	u550
  1885   000BE6                     u551:
  1886   000BE6  EFBF  F005         	goto	l1592
  1887   000BEA                     u550:
  1888   000BEA                     l153:
  1889   000BEA  0012               	return		;funcret
  1890   000BEC                     __end_of_stop:
  1891                           	callstack 0
  1892                           
  1893 ;; *************** function _savetime *****************
  1894 ;; Defined at:
  1895 ;;		line 282 in file "dc_motor.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  timearray       2    0[COMRAM] PTR unsigned char 
  1898 ;;		 -> main@timearray(100), 
  1899 ;;  timercount      2    2[COMRAM] int 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  2    0[COMRAM] int 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1913 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1914 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1915 ;;Total ram usage:        6 bytes
  1916 ;; Hardware stack levels used: 1
  1917 ;; Hardware stack levels required when called: 1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text8
  1926   000C4A                     __ptext8:
  1927                           	callstack 0
  1928   000C4A                     _savetime:
  1929                           	callstack 29
  1930   000C4A                     
  1931                           ;dc_motor.c: 282: int savetime(char timearray[100], int timercount);dc_motor.c: 283: {;d
      +                          c_motor.c: 284:     T0CON0bits.T0EN=0;
  1932   000C4A  9ED5               	bcf	213,7,c	;volatile
  1933   000C4C                     
  1934                           ;dc_motor.c: 285:     timearray[timeposition]=timercount;
  1935   000C4C  C026  F005         	movff	_timeposition,??_savetime
  1936   000C50  6A06               	clrf	(??_savetime+1)^0,c
  1937   000C52  BE05               	btfsc	??_savetime^0,7,c
  1938   000C54  0606               	decf	(??_savetime+1)^0,f,c
  1939   000C56  5005               	movf	??_savetime^0,w,c
  1940   000C58  2401               	addwf	savetime@timearray^0,w,c
  1941   000C5A  6ED9               	movwf	fsr2l,c
  1942   000C5C  5006               	movf	(??_savetime+1)^0,w,c
  1943   000C5E  2002               	addwfc	(savetime@timearray+1)^0,w,c
  1944   000C60  6EDA               	movwf	fsr2h,c
  1945   000C62  C003  FFDF         	movff	savetime@timercount,indf2
  1946   000C66                     
  1947                           ;dc_motor.c: 286:     timeposition++;
  1948   000C66  2A26               	incf	_timeposition^0,f,c
  1949   000C68                     
  1950                           ;dc_motor.c: 288:     return timercount;
  1951   000C68  0E00               	movlw	0
  1952   000C6A  6E02               	movwf	(?_savetime+1)^0,c
  1953   000C6C  0E00               	movlw	0
  1954   000C6E  6E01               	movwf	?_savetime^0,c
  1955   000C70  0012               	return		;funcret
  1956   000C72                     __end_of_savetime:
  1957                           	callstack 0
  1958                           
  1959 ;; *************** function _savepath *****************
  1960 ;; Defined at:
  1961 ;;		line 276 in file "dc_motor.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  path            2    0[COMRAM] PTR unsigned char 
  1964 ;;		 -> main@path(100), 
  1965 ;;  instruction     1    2[COMRAM] unsigned char 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1977 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1979 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;Total ram usage:        5 bytes
  1982 ;; Hardware stack levels used: 1
  1983 ;; Hardware stack levels required when called: 1
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text9
  1992   000CE0                     __ptext9:
  1993                           	callstack 0
  1994   000CE0                     _savepath:
  1995                           	callstack 29
  1996   000CE0                     
  1997                           ;dc_motor.c: 276: void savepath(char path[100], char instruction);dc_motor.c: 277: {;dc_
      +                          motor.c: 278:     path[pathposition] = instruction;
  1998   000CE0  C025  F004         	movff	_pathposition,??_savepath
  1999   000CE4  6A05               	clrf	(??_savepath+1)^0,c
  2000   000CE6  BE04               	btfsc	??_savepath^0,7,c
  2001   000CE8  0605               	decf	(??_savepath+1)^0,f,c
  2002   000CEA  5004               	movf	??_savepath^0,w,c
  2003   000CEC  2401               	addwf	savepath@path^0,w,c
  2004   000CEE  6ED9               	movwf	fsr2l,c
  2005   000CF0  5005               	movf	(??_savepath+1)^0,w,c
  2006   000CF2  2002               	addwfc	(savepath@path+1)^0,w,c
  2007   000CF4  6EDA               	movwf	fsr2h,c
  2008   000CF6  C003  FFDF         	movff	savepath@instruction,indf2
  2009   000CFA                     
  2010                           ;dc_motor.c: 279:     pathposition++;
  2011   000CFA  2A25               	incf	_pathposition^0,f,c
  2012   000CFC  0012               	return		;funcret
  2013   000CFE                     __end_of_savepath:
  2014                           	callstack 0
  2015                           
  2016 ;; *************** function _initDCmotorsPWM *****************
  2017 ;; Defined at:
  2018 ;;		line 6 in file "dc_motor.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2032 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;Total ram usage:        2 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; Hardware stack levels required when called: 1
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text10
  2047   000A76                     __ptext10:
  2048                           	callstack 0
  2049   000A76                     _initDCmotorsPWM:
  2050                           	callstack 29
  2051   000A76                     
  2052                           ;dc_motor.c: 9:     LATEbits.LATE2 = 0;
  2053   000A76  947D               	bcf	125,2,c	;volatile
  2054                           
  2055                           ;dc_motor.c: 10:     LATEbits.LATE4 = 0;
  2056   000A78  987D               	bcf	125,4,c	;volatile
  2057                           
  2058                           ;dc_motor.c: 11:     LATCbits.LATC7 = 0;
  2059   000A7A  9E7B               	bcf	123,7,c	;volatile
  2060                           
  2061                           ;dc_motor.c: 12:     LATGbits.LATG6 = 0;
  2062   000A7C  9C7F               	bcf	127,6,c	;volatile
  2063                           
  2064                           ;dc_motor.c: 14:     TRISEbits.TRISE2 = 0;
  2065   000A7E  9485               	bcf	133,2,c	;volatile
  2066                           
  2067                           ;dc_motor.c: 15:     TRISEbits.TRISE4 = 0;
  2068   000A80  9885               	bcf	133,4,c	;volatile
  2069                           
  2070                           ;dc_motor.c: 16:     TRISCbits.TRISC7 = 0;
  2071   000A82  9E83               	bcf	131,7,c	;volatile
  2072                           
  2073                           ;dc_motor.c: 17:     TRISGbits.TRISG6 = 0;
  2074   000A84  9C87               	bcf	135,6,c	;volatile
  2075   000A86                     
  2076                           ;dc_motor.c: 20:     RE2PPS=0x05;
  2077   000A86  0E05               	movlw	5
  2078   000A88  010E               	movlb	14	; () banked
  2079   000A8A  6F74               	movwf	116,b	;volatile
  2080                           
  2081                           ;dc_motor.c: 21:     RE4PPS=0x06;
  2082   000A8C  0E06               	movlw	6
  2083   000A8E  6F76               	movwf	118,b	;volatile
  2084                           
  2085                           ;dc_motor.c: 22:     RC7PPS=0x07;
  2086   000A90  0E07               	movlw	7
  2087   000A92  6F69               	movwf	105,b	;volatile
  2088                           
  2089                           ;dc_motor.c: 23:     RG6PPS=0x08;
  2090   000A94  0E08               	movlw	8
  2091   000A96  6F88               	movwf	136,b	;volatile
  2092                           
  2093                           ;dc_motor.c: 32:     T2CONbits.CKPS=011;
  2094   000A98  50BD               	movf	189,w,c	;volatile
  2095   000A9A  0B8F               	andlw	-113
  2096   000A9C  0910               	iorlw	16
  2097   000A9E  6EBD               	movwf	189,c	;volatile
  2098                           
  2099                           ;dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  2100   000AA0  0EE0               	movlw	-32
  2101   000AA2  16BE               	andwf	190,f,c	;volatile
  2102                           
  2103                           ;dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  2104   000AA4  50BF               	movf	191,w,c	;volatile
  2105   000AA6  0BF0               	andlw	-16
  2106   000AA8  0901               	iorlw	1
  2107   000AAA  6EBF               	movwf	191,c	;volatile
  2108                           
  2109                           ;dc_motor.c: 38:     T2PR=199;
  2110   000AAC  0EC7               	movlw	199
  2111   000AAE  6EBC               	movwf	188,c	;volatile
  2112   000AB0                     
  2113                           ; BSR set to: 14
  2114                           ;dc_motor.c: 39:     T2CONbits.ON=1;
  2115   000AB0  8EBD               	bsf	189,7,c	;volatile
  2116                           
  2117                           ;dc_motor.c: 43:     CCPR1H=0;
  2118   000AB2  0E00               	movlw	0
  2119   000AB4  6EAA               	movwf	170,c	;volatile
  2120                           
  2121                           ;dc_motor.c: 44:     CCPR2H=0;
  2122   000AB6  0E00               	movlw	0
  2123   000AB8  6EA6               	movwf	166,c	;volatile
  2124                           
  2125                           ;dc_motor.c: 45:     CCPR3H=0;
  2126   000ABA  0E00               	movlw	0
  2127   000ABC  010F               	movlb	15	; () banked
  2128   000ABE  6F25               	movwf	37,b	;volatile
  2129                           
  2130                           ;dc_motor.c: 46:     CCPR4H=0;
  2131   000AC0  0E00               	movlw	0
  2132   000AC2  6F21               	movwf	33,b	;volatile
  2133                           
  2134                           ;dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  2135   000AC4  0EFC               	movlw	-4
  2136   000AC6  16AD               	andwf	173,f,c	;volatile
  2137                           
  2138                           ;dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  2139   000AC8  0EF3               	movlw	-13
  2140   000ACA  16AD               	andwf	173,f,c	;volatile
  2141                           
  2142                           ;dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  2143   000ACC  0ECF               	movlw	-49
  2144   000ACE  16AD               	andwf	173,f,c	;volatile
  2145                           
  2146                           ;dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  2147   000AD0  0E3F               	movlw	-193
  2148   000AD2  16AD               	andwf	173,f,c	;volatile
  2149   000AD4                     
  2150                           ; BSR set to: 15
  2151                           ;dc_motor.c: 55:     CCP1CONbits.FMT=1;
  2152   000AD4  88AB               	bsf	171,4,c	;volatile
  2153                           
  2154                           ;dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  2155   000AD6  50AB               	movf	171,w,c	;volatile
  2156   000AD8  0BF0               	andlw	-16
  2157   000ADA  090C               	iorlw	12
  2158   000ADC  6EAB               	movwf	171,c	;volatile
  2159   000ADE                     
  2160                           ; BSR set to: 15
  2161                           ;dc_motor.c: 57:     CCP1CONbits.EN=1;
  2162   000ADE  8EAB               	bsf	171,7,c	;volatile
  2163   000AE0                     
  2164                           ; BSR set to: 15
  2165                           ;dc_motor.c: 59:     CCP2CONbits.FMT=1;
  2166   000AE0  88A7               	bsf	167,4,c	;volatile
  2167                           
  2168                           ;dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  2169   000AE2  50A7               	movf	167,w,c	;volatile
  2170   000AE4  0BF0               	andlw	-16
  2171   000AE6  090C               	iorlw	12
  2172   000AE8  6EA7               	movwf	167,c	;volatile
  2173   000AEA                     
  2174                           ; BSR set to: 15
  2175                           ;dc_motor.c: 61:     CCP2CONbits.EN=1;
  2176   000AEA  8EA7               	bsf	167,7,c	;volatile
  2177   000AEC                     
  2178                           ; BSR set to: 15
  2179                           ;dc_motor.c: 63:     CCP3CONbits.FMT=1;
  2180   000AEC  8926               	bsf	38,4,b	;volatile
  2181                           
  2182                           ;dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  2183   000AEE  5126               	movf	38,w,b	;volatile
  2184   000AF0  0BF0               	andlw	-16
  2185   000AF2  090C               	iorlw	12
  2186   000AF4  6F26               	movwf	38,b	;volatile
  2187   000AF6                     
  2188                           ; BSR set to: 15
  2189                           ;dc_motor.c: 65:     CCP3CONbits.EN=1;
  2190   000AF6  8F26               	bsf	38,7,b	;volatile
  2191   000AF8                     
  2192                           ; BSR set to: 15
  2193                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  2194   000AF8  8922               	bsf	34,4,b	;volatile
  2195                           
  2196                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  2197   000AFA  5122               	movf	34,w,b	;volatile
  2198   000AFC  0BF0               	andlw	-16
  2199   000AFE  090C               	iorlw	12
  2200   000B00  6F22               	movwf	34,b	;volatile
  2201   000B02                     
  2202                           ; BSR set to: 15
  2203                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  2204   000B02  8F22               	bsf	34,7,b	;volatile
  2205   000B04                     
  2206                           ; BSR set to: 15
  2207   000B04  0012               	return		;funcret
  2208   000B06                     __end_of_initDCmotorsPWM:
  2209                           	callstack 0
  2210                           
  2211 ;; *************** function _fullSpeedAhead *****************
  2212 ;; Defined at:
  2213 ;;		line 223 in file "dc_motor.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2216 ;;		 -> main@motorL(9), returnhome@motorL(9), 
  2217 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2218 ;;		 -> main@motorR(9), returnhome@motorR(9), 
  2219 ;;  dir             1   23[COMRAM] unsigned char 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;		None
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  1    wreg      void 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2231 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2233 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2234 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2235 ;;Total ram usage:        6 bytes
  2236 ;; Hardware stack levels used: 1
  2237 ;; Hardware stack levels required when called: 3
  2238 ;; This function calls:
  2239 ;;		_setMotorPWM
  2240 ;; This function is called by:
  2241 ;;		_main
  2242 ;;		_returnhome
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text11
  2247   0009C2                     __ptext11:
  2248                           	callstack 0
  2249   0009C2                     _fullSpeedAhead:
  2250                           	callstack 27
  2251   0009C2                     
  2252                           ;dc_motor.c: 223: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 
      +                          224: {;dc_motor.c: 225:     mL->brakemode=1;
  2253   0009C2  EE20 F002          	lfsr	2,2
  2254   0009C6  5014               	movf	fullSpeedAhead@mL^0,w,c
  2255   0009C8  26D9               	addwf	fsr2l,f,c
  2256   0009CA  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2257   0009CC  22DA               	addwfc	fsr2h,f,c
  2258   0009CE  0E01               	movlw	1
  2259   0009D0  6EDF               	movwf	indf2,c
  2260                           
  2261                           ;dc_motor.c: 226:     mR->brakemode=1;
  2262   0009D2  EE20 F002          	lfsr	2,2
  2263   0009D6  5016               	movf	fullSpeedAhead@mR^0,w,c
  2264   0009D8  26D9               	addwf	fsr2l,f,c
  2265   0009DA  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2266   0009DC  22DA               	addwfc	fsr2h,f,c
  2267   0009DE  0E01               	movlw	1
  2268   0009E0  6EDF               	movwf	indf2,c
  2269                           
  2270                           ;dc_motor.c: 227:     mL->direction = dir;
  2271   0009E2  EE20 F001          	lfsr	2,1
  2272   0009E6  5014               	movf	fullSpeedAhead@mL^0,w,c
  2273   0009E8  26D9               	addwf	fsr2l,f,c
  2274   0009EA  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2275   0009EC  22DA               	addwfc	fsr2h,f,c
  2276   0009EE  C018  FFDF         	movff	fullSpeedAhead@dir,indf2
  2277                           
  2278                           ;dc_motor.c: 228:     mR->direction = dir;
  2279   0009F2  EE20 F001          	lfsr	2,1
  2280   0009F6  5016               	movf	fullSpeedAhead@mR^0,w,c
  2281   0009F8  26D9               	addwf	fsr2l,f,c
  2282   0009FA  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2283   0009FC  22DA               	addwfc	fsr2h,f,c
  2284   0009FE  C018  FFDF         	movff	fullSpeedAhead@dir,indf2
  2285                           
  2286                           ;dc_motor.c: 232:     while (mL->power <= 50 && mR->power <= 50 ) {
  2287   000A02  EF20  F005         	goto	l1780
  2288   000A06                     l1770:
  2289                           
  2290                           ;dc_motor.c: 233:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2291   000A06  0ED0               	movlw	208
  2292   000A08  6E19               	movwf	??_fullSpeedAhead^0,c
  2293   000A0A  0ECA               	movlw	202
  2294   000A0C                     u1027:
  2295   000A0C  2EE8               	decfsz	wreg,f,c
  2296   000A0E  D7FE               	bra	u1027
  2297   000A10  2E19               	decfsz	??_fullSpeedAhead^0,f,c
  2298   000A12  D7FC               	bra	u1027
  2299   000A14                     
  2300                           ;dc_motor.c: 234:         mL->power++;
  2301   000A14  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2302   000A18  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2303   000A1C  2ADF               	incf	indf2,f,c
  2304   000A1E                     
  2305                           ;dc_motor.c: 235:         mR->power++;
  2306   000A1E  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2307   000A22  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2308   000A26  2ADF               	incf	indf2,f,c
  2309   000A28                     
  2310                           ;dc_motor.c: 236:         setMotorPWM(mL);
  2311   000A28  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2312   000A2C  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2313   000A30  EC96  F001         	call	_setMotorPWM	;wreg free
  2314   000A34                     
  2315                           ;dc_motor.c: 237:         setMotorPWM(mR);
  2316   000A34  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2317   000A38  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2318   000A3C  EC96  F001         	call	_setMotorPWM	;wreg free
  2319   000A40                     l1780:
  2320                           
  2321                           ;dc_motor.c: 232:     while (mL->power <= 50 && mR->power <= 50 ) {
  2322   000A40  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2323   000A44  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2324   000A48  0E33               	movlw	51
  2325   000A4A  60DF               	cpfslt	indf2,c
  2326   000A4C  EF2A  F005         	goto	u661
  2327   000A50  EF2C  F005         	goto	u660
  2328   000A54                     u661:
  2329   000A54  EF3A  F005         	goto	l1784
  2330   000A58                     u660:
  2331   000A58  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2332   000A5C  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2333   000A60  0E32               	movlw	50
  2334   000A62  64DF               	cpfsgt	indf2,c
  2335   000A64  EF36  F005         	goto	u671
  2336   000A68  EF38  F005         	goto	u670
  2337   000A6C                     u671:
  2338   000A6C  EF03  F005         	goto	l1770
  2339   000A70                     u670:
  2340   000A70  EF3A  F005         	goto	l194
  2341   000A74                     l1784:
  2342   000A74                     l194:
  2343   000A74  0012               	return		;funcret
  2344   000A76                     __end_of_fullSpeedAhead:
  2345                           	callstack 0
  2346                           
  2347 ;; *************** function _setMotorPWM *****************
  2348 ;; Defined at:
  2349 ;;		line 73 in file "dc_motor.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  m               2   13[COMRAM] PTR struct DC_motor
  2352 ;;		 -> main@motorL(9), main@motorR(9), returnstep@motorR(9), returnstep@motorL(9), 
  2353 ;;		 -> returnhome@motorR(9), returnhome@motorL(9), 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  negDuty         1   18[COMRAM] unsigned char 
  2356 ;;  posDuty         1   17[COMRAM] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  1    wreg      void 
  2359 ;; Registers used:
  2360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2369 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2370 ;;Total ram usage:        6 bytes
  2371 ;; Hardware stack levels used: 1
  2372 ;; Hardware stack levels required when called: 2
  2373 ;; This function calls:
  2374 ;;		___lwdiv
  2375 ;;		___wmul
  2376 ;; This function is called by:
  2377 ;;		_stop
  2378 ;;		_turnLeft90
  2379 ;;		_turnRight90
  2380 ;;		_turnLeft135
  2381 ;;		_turnRight135
  2382 ;;		_turn180
  2383 ;;		_fullSpeedAhead
  2384 ;;		_square
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text12
  2389   00032C                     __ptext12:
  2390                           	callstack 0
  2391   00032C                     _setMotorPWM:
  2392                           	callstack 26
  2393   00032C                     
  2394                           ;dc_motor.c: 73: void setMotorPWM(DC_motor *m);dc_motor.c: 74: {;dc_motor.c: 75:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 77:     if(m->brakemode) {
  2395   00032C  EE20 F002          	lfsr	2,2
  2396   000330  500E               	movf	setMotorPWM@m^0,w,c
  2397   000332  26D9               	addwf	fsr2l,f,c
  2398   000334  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2399   000336  22DA               	addwfc	fsr2h,f,c
  2400   000338  50DF               	movf	indf2,w,c
  2401   00033A  B4D8               	btfsc	status,2,c
  2402   00033C  EFA2  F001         	goto	u521
  2403   000340  EFA4  F001         	goto	u520
  2404   000344                     u521:
  2405   000344  EFD8  F001         	goto	l1566
  2406   000348                     u520:
  2407   000348                     
  2408                           ;dc_motor.c: 78:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2409   000348  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  2410   00034C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2411   000350  50DF               	movf	indf2,w,c
  2412   000352  6E10               	movwf	??_setMotorPWM^0,c
  2413   000354  5010               	movf	??_setMotorPWM^0,w,c
  2414   000356  6E01               	movwf	___wmul@multiplier^0,c
  2415   000358  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2416   00035A  EE20 F003          	lfsr	2,3
  2417   00035E  500E               	movf	setMotorPWM@m^0,w,c
  2418   000360  26D9               	addwf	fsr2l,f,c
  2419   000362  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2420   000364  22DA               	addwfc	fsr2h,f,c
  2421   000366  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2422   00036A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2423   00036E  EC4D  F006         	call	___wmul	;wreg free
  2424   000372  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2425   000376  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2426   00037A  0E00               	movlw	0
  2427   00037C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2428   00037E  0E64               	movlw	100
  2429   000380  6E09               	movwf	___lwdiv@divisor^0,c
  2430   000382  EC83  F005         	call	___lwdiv	;wreg free
  2431   000386  EE20 F003          	lfsr	2,3
  2432   00038A  500E               	movf	setMotorPWM@m^0,w,c
  2433   00038C  26D9               	addwf	fsr2l,f,c
  2434   00038E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2435   000390  22DA               	addwfc	fsr2h,f,c
  2436   000392  50DF               	movf	indf2,w,c
  2437   000394  6E11               	movwf	(??_setMotorPWM+1)^0,c
  2438   000396  5007               	movf	?___lwdiv^0,w,c
  2439   000398  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  2440   00039A  6E12               	movwf	setMotorPWM@posDuty^0,c
  2441   00039C                     
  2442                           ;dc_motor.c: 79:         negDuty=m->PWMperiod;
  2443   00039C  EE20 F003          	lfsr	2,3
  2444   0003A0  500E               	movf	setMotorPWM@m^0,w,c
  2445   0003A2  26D9               	addwf	fsr2l,f,c
  2446   0003A4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2447   0003A6  22DA               	addwfc	fsr2h,f,c
  2448   0003A8  50DF               	movf	indf2,w,c
  2449   0003AA  6E13               	movwf	setMotorPWM@negDuty^0,c
  2450                           
  2451                           ;dc_motor.c: 80:     }
  2452   0003AC  EFFB  F001         	goto	l1570
  2453   0003B0                     l1566:
  2454                           
  2455                           ;dc_motor.c: 82:         posDuty=0;
  2456   0003B0  0E00               	movlw	0
  2457   0003B2  6E12               	movwf	setMotorPWM@posDuty^0,c
  2458   0003B4                     
  2459                           ;dc_motor.c: 83:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2460   0003B4  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  2461   0003B8  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2462   0003BC  50DF               	movf	indf2,w,c
  2463   0003BE  6E10               	movwf	??_setMotorPWM^0,c
  2464   0003C0  5010               	movf	??_setMotorPWM^0,w,c
  2465   0003C2  6E01               	movwf	___wmul@multiplier^0,c
  2466   0003C4  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2467   0003C6  EE20 F003          	lfsr	2,3
  2468   0003CA  500E               	movf	setMotorPWM@m^0,w,c
  2469   0003CC  26D9               	addwf	fsr2l,f,c
  2470   0003CE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2471   0003D0  22DA               	addwfc	fsr2h,f,c
  2472   0003D2  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2473   0003D6  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2474   0003DA  EC4D  F006         	call	___wmul	;wreg free
  2475   0003DE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2476   0003E2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2477   0003E6  0E00               	movlw	0
  2478   0003E8  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2479   0003EA  0E64               	movlw	100
  2480   0003EC  6E09               	movwf	___lwdiv@divisor^0,c
  2481   0003EE  EC83  F005         	call	___lwdiv	;wreg free
  2482   0003F2  5007               	movf	?___lwdiv^0,w,c
  2483   0003F4  6E13               	movwf	setMotorPWM@negDuty^0,c
  2484   0003F6                     l1570:
  2485                           
  2486                           ;dc_motor.c: 86:     if (m->direction) {
  2487   0003F6  EE20 F001          	lfsr	2,1
  2488   0003FA  500E               	movf	setMotorPWM@m^0,w,c
  2489   0003FC  26D9               	addwf	fsr2l,f,c
  2490   0003FE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2491   000400  22DA               	addwfc	fsr2h,f,c
  2492   000402  50DF               	movf	indf2,w,c
  2493   000404  B4D8               	btfsc	status,2,c
  2494   000406  EF07  F002         	goto	u531
  2495   00040A  EF09  F002         	goto	u530
  2496   00040E                     u531:
  2497   00040E  EF2B  F002         	goto	l1574
  2498   000412                     u530:
  2499   000412                     
  2500                           ;dc_motor.c: 87:         *(m->posDutyHighByte)=posDuty;
  2501   000412  EE20 F005          	lfsr	2,5
  2502   000416  500E               	movf	setMotorPWM@m^0,w,c
  2503   000418  26D9               	addwf	fsr2l,f,c
  2504   00041A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2505   00041C  22DA               	addwfc	fsr2h,f,c
  2506   00041E  CFDE F010          	movff	postinc2,??_setMotorPWM
  2507   000422  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2508   000426  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2509   00042A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2510   00042E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  2511                           
  2512                           ;dc_motor.c: 88:         *(m->negDutyHighByte)=negDuty;
  2513   000432  EE20 F007          	lfsr	2,7
  2514   000436  500E               	movf	setMotorPWM@m^0,w,c
  2515   000438  26D9               	addwf	fsr2l,f,c
  2516   00043A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2517   00043C  22DA               	addwfc	fsr2h,f,c
  2518   00043E  CFDE F010          	movff	postinc2,??_setMotorPWM
  2519   000442  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2520   000446  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2521   00044A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2522   00044E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  2523                           
  2524                           ;dc_motor.c: 89:     } else {
  2525   000452  EF4B  F002         	goto	l145
  2526   000456                     l1574:
  2527                           
  2528                           ;dc_motor.c: 90:         *(m->posDutyHighByte)=negDuty;
  2529   000456  EE20 F005          	lfsr	2,5
  2530   00045A  500E               	movf	setMotorPWM@m^0,w,c
  2531   00045C  26D9               	addwf	fsr2l,f,c
  2532   00045E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2533   000460  22DA               	addwfc	fsr2h,f,c
  2534   000462  CFDE F010          	movff	postinc2,??_setMotorPWM
  2535   000466  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2536   00046A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2537   00046E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2538   000472  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  2539                           
  2540                           ;dc_motor.c: 91:         *(m->negDutyHighByte)=posDuty;
  2541   000476  EE20 F007          	lfsr	2,7
  2542   00047A  500E               	movf	setMotorPWM@m^0,w,c
  2543   00047C  26D9               	addwf	fsr2l,f,c
  2544   00047E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2545   000480  22DA               	addwfc	fsr2h,f,c
  2546   000482  CFDE F010          	movff	postinc2,??_setMotorPWM
  2547   000486  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2548   00048A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2549   00048E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2550   000492  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  2551   000496                     l145:
  2552   000496  0012               	return		;funcret
  2553   000498                     __end_of_setMotorPWM:
  2554                           	callstack 0
  2555                           
  2556 ;; *************** function ___wmul *****************
  2557 ;; Defined at:
  2558 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  multiplier      2    0[COMRAM] unsigned int 
  2561 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  product         2    4[COMRAM] unsigned int 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  2    0[COMRAM] unsigned int 
  2566 ;; Registers used:
  2567 ;;		wreg, status,2, status,0, prodl, prodh
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2577 ;;Total ram usage:        6 bytes
  2578 ;; Hardware stack levels used: 1
  2579 ;; Hardware stack levels required when called: 1
  2580 ;; This function calls:
  2581 ;;		Nothing
  2582 ;; This function is called by:
  2583 ;;		_setMotorPWM
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text13
  2588   000C9A                     __ptext13:
  2589                           	callstack 0
  2590   000C9A                     ___wmul:
  2591                           	callstack 26
  2592   000C9A  5001               	movf	___wmul@multiplier^0,w,c
  2593   000C9C  0203               	mulwf	___wmul@multiplicand^0,c
  2594   000C9E  CFF3 F005          	movff	prodl,___wmul@product
  2595   000CA2  CFF4 F006          	movff	prodh,___wmul@product+1
  2596   000CA6  5001               	movf	___wmul@multiplier^0,w,c
  2597   000CA8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2598   000CAA  50F3               	movf	243,w,c
  2599   000CAC  2606               	addwf	(___wmul@product+1)^0,f,c
  2600   000CAE  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2601   000CB0  0203               	mulwf	___wmul@multiplicand^0,c
  2602   000CB2  50F3               	movf	243,w,c
  2603   000CB4  2606               	addwf	(___wmul@product+1)^0,f,c
  2604   000CB6  C005  F001         	movff	___wmul@product,?___wmul
  2605   000CBA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2606   000CBE  0012               	return		;funcret
  2607   000CC0                     __end_of___wmul:
  2608                           	callstack 0
  2609                           
  2610 ;; *************** function ___lwdiv *****************
  2611 ;; Defined at:
  2612 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  dividend        2    6[COMRAM] unsigned int 
  2615 ;;  divisor         2    8[COMRAM] unsigned int 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  quotient        2   10[COMRAM] unsigned int 
  2618 ;;  counter         1   12[COMRAM] unsigned char 
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  2    6[COMRAM] unsigned int 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2628 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2629 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2631 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2632 ;;Total ram usage:        7 bytes
  2633 ;; Hardware stack levels used: 1
  2634 ;; Hardware stack levels required when called: 1
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_setMotorPWM
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text14
  2643   000B06                     __ptext14:
  2644                           	callstack 0
  2645   000B06                     ___lwdiv:
  2646                           	callstack 26
  2647   000B06  0E00               	movlw	0
  2648   000B08  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2649   000B0A  0E00               	movlw	0
  2650   000B0C  6E0B               	movwf	___lwdiv@quotient^0,c
  2651   000B0E  5009               	movf	___lwdiv@divisor^0,w,c
  2652   000B10  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2653   000B12  B4D8               	btfsc	status,2,c
  2654   000B14  EF8E  F005         	goto	u491
  2655   000B18  EF90  F005         	goto	u490
  2656   000B1C                     u491:
  2657   000B1C  EFB8  F005         	goto	l828
  2658   000B20                     u490:
  2659   000B20  0E01               	movlw	1
  2660   000B22  6E0D               	movwf	___lwdiv@counter^0,c
  2661   000B24  EF98  F005         	goto	l1534
  2662   000B28                     l1532:
  2663   000B28  90D8               	bcf	status,0,c
  2664   000B2A  3609               	rlcf	___lwdiv@divisor^0,f,c
  2665   000B2C  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2666   000B2E  2A0D               	incf	___lwdiv@counter^0,f,c
  2667   000B30                     l1534:
  2668   000B30  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2669   000B32  EF9D  F005         	goto	u501
  2670   000B36  EF9F  F005         	goto	u500
  2671   000B3A                     u501:
  2672   000B3A  EF94  F005         	goto	l1532
  2673   000B3E                     u500:
  2674   000B3E                     l1536:
  2675   000B3E  90D8               	bcf	status,0,c
  2676   000B40  360B               	rlcf	___lwdiv@quotient^0,f,c
  2677   000B42  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2678   000B44  5009               	movf	___lwdiv@divisor^0,w,c
  2679   000B46  5C07               	subwf	___lwdiv@dividend^0,w,c
  2680   000B48  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2681   000B4A  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2682   000B4C  A0D8               	btfss	status,0,c
  2683   000B4E  EFAB  F005         	goto	u511
  2684   000B52  EFAD  F005         	goto	u510
  2685   000B56                     u511:
  2686   000B56  EFB2  F005         	goto	l1544
  2687   000B5A                     u510:
  2688   000B5A  5009               	movf	___lwdiv@divisor^0,w,c
  2689   000B5C  5E07               	subwf	___lwdiv@dividend^0,f,c
  2690   000B5E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2691   000B60  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2692   000B62  800B               	bsf	___lwdiv@quotient^0,0,c
  2693   000B64                     l1544:
  2694   000B64  90D8               	bcf	status,0,c
  2695   000B66  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2696   000B68  3209               	rrcf	___lwdiv@divisor^0,f,c
  2697   000B6A  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2698   000B6C  EF9F  F005         	goto	l1536
  2699   000B70                     l828:
  2700   000B70  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2701   000B74  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2702   000B78  0012               	return		;funcret
  2703   000B7A                     __end_of___lwdiv:
  2704                           	callstack 0
  2705                           
  2706 ;; *************** function _color_click_init *****************
  2707 ;; Defined at:
  2708 ;;		line 5 in file "color.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;		None
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0, cstack
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2726 ;;Total ram usage:        1 bytes
  2727 ;; Hardware stack levels used: 1
  2728 ;; Hardware stack levels required when called: 4
  2729 ;; This function calls:
  2730 ;;		_I2C_2_Master_Init
  2731 ;;		_color_writetoaddr
  2732 ;; This function is called by:
  2733 ;;		_main
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text15
  2738   000BEC                     __ptext15:
  2739                           	callstack 0
  2740   000BEC                     _color_click_init:
  2741                           	callstack 26
  2742   000BEC                     
  2743                           ;color.c: 8:     I2C_2_Master_Init();
  2744   000BEC  EC10  F006         	call	_I2C_2_Master_Init	;wreg free
  2745   000BF0                     
  2746                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  2747   000BF0  0E01               	movlw	1
  2748   000BF2  6E03               	movwf	color_writetoaddr@value^0,c
  2749   000BF4  0E00               	movlw	0
  2750   000BF6  EC60  F006         	call	_color_writetoaddr
  2751   000BFA                     
  2752                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2753   000BFA  0E3F               	movlw	63
  2754   000BFC  6E05               	movwf	??_color_click_init^0,c
  2755   000BFE  0E55               	movlw	85
  2756   000C00                     u1037:
  2757   000C00  2EE8               	decfsz	wreg,f,c
  2758   000C02  D7FE               	bra	u1037
  2759   000C04  2E05               	decfsz	??_color_click_init^0,f,c
  2760   000C06  D7FC               	bra	u1037
  2761   000C08  F000               	nop	
  2762   000C0A                     
  2763                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  2764   000C0A  0E03               	movlw	3
  2765   000C0C  6E03               	movwf	color_writetoaddr@value^0,c
  2766   000C0E  0E00               	movlw	0
  2767   000C10  EC60  F006         	call	_color_writetoaddr
  2768   000C14                     
  2769                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  2770   000C14  0ED5               	movlw	213
  2771   000C16  6E03               	movwf	color_writetoaddr@value^0,c
  2772   000C18  0E01               	movlw	1
  2773   000C1A  EC60  F006         	call	_color_writetoaddr
  2774   000C1E  0012               	return		;funcret
  2775   000C20                     __end_of_color_click_init:
  2776                           	callstack 0
  2777                           
  2778 ;; *************** function _color_writetoaddr *****************
  2779 ;; Defined at:
  2780 ;;		line 21 in file "color.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  address         1    wreg     unsigned char 
  2783 ;;  value           1    2[COMRAM] unsigned char 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;  address         1    3[COMRAM] unsigned char 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2795 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2799 ;;Total ram usage:        2 bytes
  2800 ;; Hardware stack levels used: 1
  2801 ;; Hardware stack levels required when called: 3
  2802 ;; This function calls:
  2803 ;;		_I2C_2_Master_Start
  2804 ;;		_I2C_2_Master_Stop
  2805 ;;		_I2C_2_Master_Write
  2806 ;; This function is called by:
  2807 ;;		_color_click_init
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text16
  2812   000CC0                     __ptext16:
  2813                           	callstack 0
  2814   000CC0                     _color_writetoaddr:
  2815                           	callstack 26
  2816                           
  2817                           ;incstack = 0
  2818                           ;color_writetoaddr@address stored from wreg
  2819   000CC0  6E04               	movwf	color_writetoaddr@address^0,c
  2820   000CC2                     
  2821                           ;color.c: 22:     I2C_2_Master_Start();
  2822   000CC2  ECA7  F006         	call	_I2C_2_Master_Start	;wreg free
  2823                           
  2824                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  2825   000CC6  0E52               	movlw	82
  2826   000CC8  EC96  F006         	call	_I2C_2_Master_Write
  2827                           
  2828                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  2829   000CCC  5004               	movf	color_writetoaddr@address^0,w,c
  2830   000CCE  0980               	iorlw	128
  2831   000CD0  EC96  F006         	call	_I2C_2_Master_Write
  2832                           
  2833                           ;color.c: 25:     I2C_2_Master_Write(value);
  2834   000CD4  5003               	movf	color_writetoaddr@value^0,w,c
  2835   000CD6  EC96  F006         	call	_I2C_2_Master_Write
  2836                           
  2837                           ;color.c: 26:     I2C_2_Master_Stop();
  2838   000CDA  ECA2  F006         	call	_I2C_2_Master_Stop	;wreg free
  2839   000CDE  0012               	return		;funcret
  2840   000CE0                     __end_of_color_writetoaddr:
  2841                           	callstack 0
  2842                           
  2843 ;; *************** function _I2C_2_Master_Write *****************
  2844 ;; Defined at:
  2845 ;;		line 45 in file "i2c.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  data_byte       1    wreg     unsigned char 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  data_byte       1    1[COMRAM] unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2863 ;;Total ram usage:        1 bytes
  2864 ;; Hardware stack levels used: 1
  2865 ;; Hardware stack levels required when called: 2
  2866 ;; This function calls:
  2867 ;;		_I2C_2_Master_Idle
  2868 ;; This function is called by:
  2869 ;;		_color_writetoaddr
  2870 ;;		_color_read_Red
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text17
  2875   000D2C                     __ptext17:
  2876                           	callstack 0
  2877   000D2C                     _I2C_2_Master_Write:
  2878                           	callstack 26
  2879                           
  2880                           ;incstack = 0
  2881                           ;I2C_2_Master_Write@data_byte stored from wreg
  2882   000D2C  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  2883   000D2E                     
  2884                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2885   000D2E  EC39  F006         	call	_I2C_2_Master_Idle	;wreg free
  2886   000D32                     
  2887                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2888   000D32  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2889   000D36  0012               	return		;funcret
  2890   000D38                     __end_of_I2C_2_Master_Write:
  2891                           	callstack 0
  2892                           
  2893 ;; *************** function _I2C_2_Master_Stop *****************
  2894 ;; Defined at:
  2895 ;;		line 39 in file "i2c.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2913 ;;Total ram usage:        0 bytes
  2914 ;; Hardware stack levels used: 1
  2915 ;; Hardware stack levels required when called: 2
  2916 ;; This function calls:
  2917 ;;		_I2C_2_Master_Idle
  2918 ;; This function is called by:
  2919 ;;		_color_writetoaddr
  2920 ;;		_color_read_Red
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text18
  2925   000D44                     __ptext18:
  2926                           	callstack 0
  2927   000D44                     _I2C_2_Master_Stop:
  2928                           	callstack 26
  2929   000D44                     
  2930                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2931   000D44  EC39  F006         	call	_I2C_2_Master_Idle	;wreg free
  2932   000D48                     
  2933                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2934   000D48  010E               	movlb	14	; () banked
  2935   000D4A  85DA               	bsf	218,2,b	;volatile
  2936   000D4C                     
  2937                           ; BSR set to: 14
  2938   000D4C  0012               	return		;funcret
  2939   000D4E                     __end_of_I2C_2_Master_Stop:
  2940                           	callstack 0
  2941                           
  2942 ;; *************** function _I2C_2_Master_Start *****************
  2943 ;; Defined at:
  2944 ;;		line 27 in file "i2c.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;		None
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;		None
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  1    wreg      void 
  2951 ;; Registers used:
  2952 ;;		wreg, status,2, status,0, cstack
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2962 ;;Total ram usage:        0 bytes
  2963 ;; Hardware stack levels used: 1
  2964 ;; Hardware stack levels required when called: 2
  2965 ;; This function calls:
  2966 ;;		_I2C_2_Master_Idle
  2967 ;; This function is called by:
  2968 ;;		_color_writetoaddr
  2969 ;;		_color_read_Red
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text19
  2974   000D4E                     __ptext19:
  2975                           	callstack 0
  2976   000D4E                     _I2C_2_Master_Start:
  2977                           	callstack 26
  2978   000D4E                     
  2979                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2980   000D4E  EC39  F006         	call	_I2C_2_Master_Idle	;wreg free
  2981   000D52                     
  2982                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2983   000D52  010E               	movlb	14	; () banked
  2984   000D54  81DA               	bsf	218,0,b	;volatile
  2985   000D56                     
  2986                           ; BSR set to: 14
  2987   000D56  0012               	return		;funcret
  2988   000D58                     __end_of_I2C_2_Master_Start:
  2989                           	callstack 0
  2990                           
  2991 ;; *************** function _I2C_2_Master_Idle *****************
  2992 ;; Defined at:
  2993 ;;		line 22 in file "i2c.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3010 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3011 ;;Total ram usage:        1 bytes
  3012 ;; Hardware stack levels used: 1
  3013 ;; Hardware stack levels required when called: 1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_I2C_2_Master_Start
  3018 ;;		_I2C_2_Master_Stop
  3019 ;;		_I2C_2_Master_Write
  3020 ;;		_I2C_2_Master_RepStart
  3021 ;;		_I2C_2_Master_Read
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text20
  3026   000C72                     __ptext20:
  3027                           	callstack 0
  3028   000C72                     _I2C_2_Master_Idle:
  3029                           	callstack 26
  3030   000C72                     l55:
  3031   000C72  010E               	movlb	14	; () banked
  3032   000C74  B5D8               	btfsc	216,2,b	;volatile
  3033   000C76  EF3F  F006         	goto	u471
  3034   000C7A  EF41  F006         	goto	u470
  3035   000C7E                     u471:
  3036   000C7E  EF39  F006         	goto	l55
  3037   000C82                     u470:
  3038   000C82                     
  3039                           ; BSR set to: 14
  3040   000C82  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  3041   000C86  0E1F               	movlw	31
  3042   000C88  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  3043   000C8A  A4D8               	btfss	status,2,c
  3044   000C8C  EF4A  F006         	goto	u481
  3045   000C90  EF4C  F006         	goto	u480
  3046   000C94                     u481:
  3047   000C94  EF39  F006         	goto	l55
  3048   000C98                     u480:
  3049   000C98                     
  3050                           ; BSR set to: 14
  3051   000C98  0012               	return		;funcret
  3052   000C9A                     __end_of_I2C_2_Master_Idle:
  3053                           	callstack 0
  3054                           
  3055 ;; *************** function _I2C_2_Master_Init *****************
  3056 ;; Defined at:
  3057 ;;		line 4 in file "i2c.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;		None
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;		None
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3075 ;;Total ram usage:        0 bytes
  3076 ;; Hardware stack levels used: 1
  3077 ;; Hardware stack levels required when called: 1
  3078 ;; This function calls:
  3079 ;;		Nothing
  3080 ;; This function is called by:
  3081 ;;		_color_click_init
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text21
  3086   000C20                     __ptext21:
  3087                           	callstack 0
  3088   000C20                     _I2C_2_Master_Init:
  3089                           	callstack 28
  3090   000C20                     
  3091                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3092   000C20  010E               	movlb	14	; () banked
  3093   000C22  51D9               	movf	217,w,b	;volatile
  3094   000C24  0BF0               	andlw	-16
  3095   000C26  0908               	iorlw	8
  3096   000C28  6FD9               	movwf	217,b	;volatile
  3097   000C2A                     
  3098                           ; BSR set to: 14
  3099                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  3100   000C2A  8BD9               	bsf	217,5,b	;volatile
  3101                           
  3102                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  3103   000C2C  0E9F               	movlw	159
  3104   000C2E  6FD6               	movwf	214,b	;volatile
  3105   000C30                     
  3106                           ; BSR set to: 14
  3107                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  3108   000C30  8A84               	bsf	132,5,c	;volatile
  3109   000C32                     
  3110                           ; BSR set to: 14
  3111                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  3112   000C32  8C84               	bsf	132,6,c	;volatile
  3113   000C34                     
  3114                           ; BSR set to: 14
  3115                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  3116   000C34  9BA7               	bcf	167,5,b	;volatile
  3117   000C36                     
  3118                           ; BSR set to: 14
  3119                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  3120   000C36  9DA7               	bcf	167,6,b	;volatile
  3121                           
  3122                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  3123   000C38  0E1D               	movlw	29
  3124   000C3A  6F1D               	movwf	29,b	;volatile
  3125                           
  3126                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  3127   000C3C  0E1E               	movlw	30
  3128   000C3E  6F1C               	movwf	28,b	;volatile
  3129                           
  3130                           ;i2c.c: 18:   RD5PPS=0x1C;
  3131   000C40  0E1C               	movlw	28
  3132   000C42  6F6F               	movwf	111,b	;volatile
  3133                           
  3134                           ;i2c.c: 19:   RD6PPS=0x1B;
  3135   000C44  0E1B               	movlw	27
  3136   000C46  6F70               	movwf	112,b	;volatile
  3137   000C48                     
  3138                           ; BSR set to: 14
  3139   000C48  0012               	return		;funcret
  3140   000C4A                     __end_of_I2C_2_Master_Init:
  3141                           	callstack 0
  3142                           
  3143 ;; *************** function _Timer0_init *****************
  3144 ;; Defined at:
  3145 ;;		line 20 in file "timer0.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;		None
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;		None
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, status,2
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;Total ram usage:        0 bytes
  3164 ;; Hardware stack levels used: 1
  3165 ;; Hardware stack levels required when called: 1
  3166 ;; This function calls:
  3167 ;;		Nothing
  3168 ;; This function is called by:
  3169 ;;		_main
  3170 ;; This function uses a non-reentrant model
  3171 ;;
  3172                           
  3173                           	psect	text22
  3174   000D1A                     __ptext22:
  3175                           	callstack 0
  3176   000D1A                     _Timer0_init:
  3177                           	callstack 29
  3178   000D1A                     
  3179                           ;timer0.c: 33:     T0CON1bits.T0CS=0b010;
  3180   000D1A  50D6               	movf	214,w,c	;volatile
  3181   000D1C  0B1F               	andlw	-225
  3182   000D1E  0940               	iorlw	64
  3183   000D20  6ED6               	movwf	214,c	;volatile
  3184   000D22                     
  3185                           ;timer0.c: 34:     T0CON1bits.T0ASYNC=1;
  3186   000D22  88D6               	bsf	214,4,c	;volatile
  3187                           
  3188                           ;timer0.c: 35:     T0CON1bits.T0CKPS=0b0000;
  3189   000D24  0EF0               	movlw	-16
  3190   000D26  16D6               	andwf	214,f,c	;volatile
  3191   000D28                     
  3192                           ;timer0.c: 36:     T0CON0bits.T016BIT=1;
  3193   000D28  88D5               	bsf	213,4,c	;volatile
  3194   000D2A  0012               	return		;funcret
  3195   000D2C                     __end_of_Timer0_init:
  3196                           	callstack 0
  3197                           
  3198 ;; *************** function _Interrupts_init *****************
  3199 ;; Defined at:
  3200 ;;		line 8 in file "timer0.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;		None
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		None
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3218 ;;Total ram usage:        0 bytes
  3219 ;; Hardware stack levels used: 1
  3220 ;; Hardware stack levels required when called: 1
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_main
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text23
  3229   000D38                     __ptext23:
  3230                           	callstack 0
  3231   000D38                     _Interrupts_init:
  3232                           	callstack 29
  3233   000D38                     
  3234                           ;timer0.c: 10:     PIE0bits.TMR0IE=1;
  3235   000D38  010E               	movlb	14	; () banked
  3236   000D3A  8B29               	bsf	41,5,b	;volatile
  3237                           
  3238                           ;timer0.c: 11:     INTCONbits.PEIE=1;
  3239   000D3C  8CF2               	bsf	242,6,c	;volatile
  3240                           
  3241                           ;timer0.c: 12:     INTCONbits.IPEN=0;
  3242   000D3E  9AF2               	bcf	242,5,c	;volatile
  3243                           
  3244                           ;timer0.c: 13:     INTCONbits.GIE=1;
  3245   000D40  8EF2               	bsf	242,7,c	;volatile
  3246   000D42                     
  3247                           ; BSR set to: 14
  3248   000D42  0012               	return		;funcret
  3249   000D44                     __end_of_Interrupts_init:
  3250                           	callstack 0
  3251                           
  3252 ;; *************** function _HighISR *****************
  3253 ;; Defined at:
  3254 ;;		line 142 in file "mainfinal.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;		None
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;		None
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		status,2, status,0
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;Total ram usage:        0 bytes
  3273 ;; Hardware stack levels used: 1
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		Interrupt level 2
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	intcode
  3282   000008                     __pintcode:
  3283                           	callstack 0
  3284   000008                     _HighISR:
  3285                           	callstack 26
  3286                           
  3287                           ; BSR set to: 14
  3288                           ;incstack = 0
  3289   000008  8227               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3290   00000A                     
  3291                           ;mainfinal.c: 144:     if (PIR0bits.TMR0IF)
  3292   00000A  010E               	movlb	14	; () banked
  3293   00000C  AB33               	btfss	51,5,b	;volatile
  3294   00000E  EF0B  F000         	goto	i2u92_41
  3295   000012  EF0D  F000         	goto	i2u92_40
  3296   000016                     i2u92_41:
  3297   000016  EF10  F000         	goto	i2l2002
  3298   00001A                     i2u92_40:
  3299   00001A                     
  3300                           ; BSR set to: 14
  3301                           ;mainfinal.c: 145:     {;mainfinal.c: 146:         timercount++;
  3302   00001A  0101               	movlb	1	; () banked
  3303   00001C  4BDC               	infsnz	_timercount& (0+255),f,b
  3304   00001E  2BDD               	incf	(_timercount+1)& (0+255),f,b
  3305   000020                     i2l2002:
  3306                           
  3307                           ;mainfinal.c: 149:     PIR0bits.TMR0IF=0;
  3308   000020  010E               	movlb	14	; () banked
  3309   000022  9B33               	bcf	51,5,b	;volatile
  3310   000024                     
  3311                           ; BSR set to: 14
  3312   000024  9227               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3313   000026  0011               	retfie		f
  3314   000028                     __end_of_HighISR:
  3315                           	callstack 0
  3316   000000                     
  3317                           	psect	rparam
  3318   000000                     
  3319                           	psect	temp
  3320   000027                     btemp:
  3321                           	callstack 0
  3322   000027                     	ds	1
  3323   000000                     int$flags	set	btemp
  3324   000000                     wtemp8	set	btemp+1
  3325   000000                     ttemp5	set	btemp+1
  3326   000000                     ttemp6	set	btemp+4
  3327   000000                     ttemp7	set	btemp+8
  3328                           
  3329                           	psect	idloc
  3330                           
  3331                           ;Config register IDLOC0 @ 0x200000
  3332                           ;	unspecified, using default values
  3333   200000                     	org	2097152
  3334   200000  0FFF               	dw	4095
  3335                           
  3336                           ;Config register IDLOC1 @ 0x200002
  3337                           ;	unspecified, using default values
  3338   200002                     	org	2097154
  3339   200002  0FFF               	dw	4095
  3340                           
  3341                           ;Config register IDLOC2 @ 0x200004
  3342                           ;	unspecified, using default values
  3343   200004                     	org	2097156
  3344   200004  0FFF               	dw	4095
  3345                           
  3346                           ;Config register IDLOC3 @ 0x200006
  3347                           ;	unspecified, using default values
  3348   200006                     	org	2097158
  3349   200006  0FFF               	dw	4095
  3350                           
  3351                           ;Config register IDLOC4 @ 0x200008
  3352                           ;	unspecified, using default values
  3353   200008                     	org	2097160
  3354   200008  0FFF               	dw	4095
  3355                           
  3356                           ;Config register IDLOC5 @ 0x20000A
  3357                           ;	unspecified, using default values
  3358   20000A                     	org	2097162
  3359   20000A  0FFF               	dw	4095
  3360                           
  3361                           ;Config register IDLOC6 @ 0x20000C
  3362                           ;	unspecified, using default values
  3363   20000C                     	org	2097164
  3364   20000C  0FFF               	dw	4095
  3365                           
  3366                           ;Config register IDLOC7 @ 0x20000E
  3367                           ;	unspecified, using default values
  3368   20000E                     	org	2097166
  3369   20000E  0FFF               	dw	4095
  3370                           
  3371                           	psect	config
  3372                           
  3373                           ;Config register CONFIG1L @ 0x300000
  3374                           ;	External Oscillator mode Selection bits
  3375                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3376                           ;	Power-up default value for COSC bits
  3377                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3378   300000                     	org	3145728
  3379   300000  AA                 	db	170
  3380                           
  3381                           ;Config register CONFIG1H @ 0x300001
  3382                           ;	unspecified, using default values
  3383                           ;	Clock Out Enable bit
  3384                           ;	CLKOUTEN = 0x1, unprogrammed default
  3385                           ;	Clock Switch Enable bit
  3386                           ;	CSWEN = 0x1, unprogrammed default
  3387                           ;	Fail-Safe Clock Monitor Enable bit
  3388                           ;	FCMEN = 0x1, unprogrammed default
  3389   300001                     	org	3145729
  3390   300001  FF                 	db	255
  3391                           
  3392                           ;Config register CONFIG2L @ 0x300002
  3393                           ;	unspecified, using default values
  3394                           ;	Master Clear Enable bit
  3395                           ;	MCLRE = 0x1, unprogrammed default
  3396                           ;	Power-up Timer Enable bit
  3397                           ;	PWRTE = 0x1, unprogrammed default
  3398                           ;	Low-power BOR enable bit
  3399                           ;	LPBOREN = 0x1, unprogrammed default
  3400                           ;	Brown-out Reset Enable bits
  3401                           ;	BOREN = 0x3, unprogrammed default
  3402   300002                     	org	3145730
  3403   300002  FF                 	db	255
  3404                           
  3405                           ;Config register CONFIG2H @ 0x300003
  3406                           ;	unspecified, using default values
  3407                           ;	Brown Out Reset Voltage selection bits
  3408                           ;	BORV = 0x3, unprogrammed default
  3409                           ;	ZCD Disable bit
  3410                           ;	ZCD = 0x1, unprogrammed default
  3411                           ;	PPSLOCK bit One-Way Set Enable bit
  3412                           ;	PPS1WAY = 0x1, unprogrammed default
  3413                           ;	Stack Full/Underflow Reset Enable bit
  3414                           ;	STVREN = 0x1, unprogrammed default
  3415                           ;	Debugger Enable bit
  3416                           ;	DEBUG = 0x1, unprogrammed default
  3417                           ;	Extended Instruction Set Enable bit
  3418                           ;	XINST = 0x1, unprogrammed default
  3419   300003                     	org	3145731
  3420   300003  FF                 	db	255
  3421                           
  3422                           ;Config register CONFIG3L @ 0x300004
  3423                           ;	WDT Period Select bits
  3424                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3425                           ;	WDT operating mode
  3426                           ;	WDTE = OFF, WDT Disabled
  3427   300004                     	org	3145732
  3428   300004  9F                 	db	159
  3429                           
  3430                           ;Config register CONFIG3H @ 0x300005
  3431                           ;	unspecified, using default values
  3432                           ;	WDT Window Select bits
  3433                           ;	WDTCWS = 0x7, unprogrammed default
  3434                           ;	WDT input clock selector
  3435                           ;	WDTCCS = 0x7, unprogrammed default
  3436   300005                     	org	3145733
  3437   300005  FF                 	db	255
  3438                           
  3439                           ;Config register CONFIG4L @ 0x300006
  3440                           ;	unspecified, using default values
  3441                           ;	Write Protection Block 0
  3442                           ;	WRT0 = 0x1, unprogrammed default
  3443                           ;	Write Protection Block 1
  3444                           ;	WRT1 = 0x1, unprogrammed default
  3445                           ;	Write Protection Block 2
  3446                           ;	WRT2 = 0x1, unprogrammed default
  3447                           ;	Write Protection Block 3
  3448                           ;	WRT3 = 0x1, unprogrammed default
  3449                           ;	Write Protection Block 3
  3450                           ;	WRT4 = 0x1, unprogrammed default
  3451                           ;	Write Protection Block 3
  3452                           ;	WRT5 = 0x1, unprogrammed default
  3453                           ;	Write Protection Block 3
  3454                           ;	WRT6 = 0x1, unprogrammed default
  3455                           ;	Write Protection Block 3
  3456                           ;	WRT7 = 0x1, unprogrammed default
  3457   300006                     	org	3145734
  3458   300006  FF                 	db	255
  3459                           
  3460                           ;Config register CONFIG4H @ 0x300007
  3461                           ;	unspecified, using default values
  3462                           ;	Configuration Register Write Protection bit
  3463                           ;	WRTC = 0x1, unprogrammed default
  3464                           ;	Boot Block Write Protection bit
  3465                           ;	WRTB = 0x1, unprogrammed default
  3466                           ;	Data EEPROM Write Protection bit
  3467                           ;	WRTD = 0x1, unprogrammed default
  3468                           ;	Scanner Enable bit
  3469                           ;	SCANE = 0x1, unprogrammed default
  3470                           ;	Low Voltage Programming Enable bit
  3471                           ;	LVP = 0x1, unprogrammed default
  3472   300007                     	org	3145735
  3473   300007  FF                 	db	255
  3474                           
  3475                           ;Config register CONFIG5L @ 0x300008
  3476                           ;	unspecified, using default values
  3477                           ;	UserNVM Program Memory Code Protection bit
  3478                           ;	CP = 0x1, unprogrammed default
  3479                           ;	DataNVM Memory Code Protection bit
  3480                           ;	CPD = 0x1, unprogrammed default
  3481   300008                     	org	3145736
  3482   300008  FF                 	db	255
  3483                           
  3484                           ;Config register CONFIG5H @ 0x300009
  3485                           ;	unspecified, using default values
  3486   300009                     	org	3145737
  3487   300009  FF                 	db	255
  3488                           
  3489                           ;Config register CONFIG6L @ 0x30000A
  3490                           ;	unspecified, using default values
  3491                           ;	Table Read Protection Block 0
  3492                           ;	EBTR0 = 0x1, unprogrammed default
  3493                           ;	Table Read Protection Block 1
  3494                           ;	EBTR1 = 0x1, unprogrammed default
  3495                           ;	Table Read Protection Block 2
  3496                           ;	EBTR2 = 0x1, unprogrammed default
  3497                           ;	Table Read Protection Block 3
  3498                           ;	EBTR3 = 0x1, unprogrammed default
  3499                           ;	Table Read Protection Block 4
  3500                           ;	EBTR4 = 0x1, unprogrammed default
  3501                           ;	Table Read Protection Block 5
  3502                           ;	EBTR5 = 0x1, unprogrammed default
  3503                           ;	Table Read Protection Block 6
  3504                           ;	EBTR6 = 0x1, unprogrammed default
  3505                           ;	Table Read Protection Block 7
  3506                           ;	EBTR7 = 0x1, unprogrammed default
  3507   30000A                     	org	3145738
  3508   30000A  FF                 	db	255
  3509                           
  3510                           ;Config register CONFIG6H @ 0x30000B
  3511                           ;	unspecified, using default values
  3512                           ;	Boot Block Table Read Protection bit
  3513                           ;	EBTRB = 0x1, unprogrammed default
  3514   30000B                     	org	3145739
  3515   30000B  FF                 	db	255
  3516                           tosu	equ	0xFFF
  3517                           tosh	equ	0xFFE
  3518                           tosl	equ	0xFFD
  3519                           stkptr	equ	0xFFC
  3520                           pclatu	equ	0xFFB
  3521                           pclath	equ	0xFFA
  3522                           pcl	equ	0xFF9
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           prodh	equ	0xFF4
  3528                           prodl	equ	0xFF3
  3529                           indf0	equ	0xFEF
  3530                           postinc0	equ	0xFEE
  3531                           postdec0	equ	0xFED
  3532                           preinc0	equ	0xFEC
  3533                           plusw0	equ	0xFEB
  3534                           fsr0h	equ	0xFEA
  3535                           fsr0l	equ	0xFE9
  3536                           wreg	equ	0xFE8
  3537                           indf1	equ	0xFE7
  3538                           postinc1	equ	0xFE6
  3539                           postdec1	equ	0xFE5
  3540                           preinc1	equ	0xFE4
  3541                           plusw1	equ	0xFE3
  3542                           fsr1h	equ	0xFE2
  3543                           fsr1l	equ	0xFE1
  3544                           bsr	equ	0xFE0
  3545                           indf2	equ	0xFDF
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           preinc2	equ	0xFDC
  3549                           plusw2	equ	0xFDB
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      38
    BANK0           160      0       0
    BANK1           256    220     222
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    savetime@timearray	PTR unsigned char  size(2) Largest target is 100
		 -> main@timearray(BANK1[100]), 

    savepath@path	PTR unsigned char  size(2) Largest target is 100
		 -> main@path(BANK1[100]), 

    square@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    square@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    square@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnhome@motorR(COMRAM[9]), 

    square@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    square@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    square@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnhome@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnhome@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnhome@motorL(COMRAM[9]), 

    turn180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turn180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turn180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turn180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turn180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turn180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnhome@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), returnhome@motorL(COMRAM[9]), 

    S845DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S845DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnstep@motorL(COMRAM[9]), 
		 -> returnhome@motorR(COMRAM[9]), returnhome@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_square
    _main->_turn180
    _turnRight90->_stop
    _turnRight135->_stop
    _turnLeft90->_stop
    _turnLeft135->_stop
    _turn180->_stop
    _square->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               224   224      0   61658
                                             30 COMRAM     2     2      0
                                              0 BANK1    220   220      0
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
                     _fullSpeedAhead
                    _initDCmotorsPWM
                           _savepath
                           _savetime
                             _square
                            _turn180
                        _turnLeft135
                         _turnLeft90
                       _turnRight135
                        _turnRight90
 ---------------------------------------------------------------------------------
 (1) _turnRight90                                          5     1      4    9034
                                             24 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnRight135                                         5     1      4    8882
                                             24 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft90                                           5     1      4    9078
                                             24 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft135                                          5     1      4    8926
                                             24 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turn180                                              6     2      4    8882
                                             24 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _square                                               6     1      5    9718
                                             24 COMRAM     6     1      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    5037
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _savetime                                             6     2      4     371
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _savepath                                             5     2      3    1108
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       6     1      5    3975
                                             19 COMRAM     6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    3233
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     847
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _savepath
   _savetime
   _square
     _setMotorPWM
     _stop
       _setMotorPWM
   _turn180
     _setMotorPWM
     _stop
   _turnLeft135
     _setMotorPWM
     _stop
   _turnLeft90
     _setMotorPWM
     _stop
   _turnRight135
     _setMotorPWM
     _stop
   _turnRight90
     _setMotorPWM
     _stop

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      57        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DC      DE       7       86.7%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      26       1       40.4%
BITBIGSFRhlllh      54      0       0      42        0.0%
BITBIGSFRhlllll     46      0       0      44        0.0%
BITBIGSFRlllhll     35      0       0      52        0.0%
BITBIGSFRllh        2D      0       0      46        0.0%
BITBIGSFRllll       2D      0       0      55        0.0%
BITBIGSFRlllhhh     1E      0       0      47        0.0%
BITBIGSFRhhhlll     1D      0       0      38        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      48        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlllhll      B      0       0      54        0.0%
BITBIGSFRlllhll      9      0       0      53        0.0%
BITBIGSFRlllhlh      5      0       0      51        0.0%
BITBIGSFRlllhhl      3      0       0      50        0.0%
BITBIGSFRhllllh      2      0       0      43        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhlhh        2      0       0      40        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      49        0.0%
BITBIGSFRhlhl        1      0       0      41        0.0%
BITBIGSFRhhl         1      0       0      39        0.0%
BITBIGSFRlh          1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     104      56        0.0%
DATA                 0      0     104       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 06 13:50:10 2022

                         l22 0CDE                           l19 0C1E                           l52 0C48  
                         l61 0D56                           l70 0D36                           l55 0C72  
                         l58 0C98                           l67 0D4C            fullSpeedAhead@dir 0018  
        ___wmul@multiplicand 0003            ??_Interrupts_init 0001                          l200 09C0  
                        l203 0CFC                          l206 0C70                          l145 0496  
                        l153 0BEA                          l138 0B04                          l325 0D42  
                        l173 0670                          l159 0584                          l167 0900  
                        l328 0D2A                          l337 0CBE                          l185 075A  
                        l194 0A74                          l179 082E                          l835 0B78  
                        l828 0B70                          u500 0B3E                          u501 0B3A  
                        u510 0B5A                          u511 0B56                          u520 0348  
                        u600 062A                          u521 0344                          u601 0626  
                        u530 0412                          u610 0644                          u531 040E  
                        u611 0640                          u540 0BD2                          u620 0800  
                        u541 0BCE                          u621 07FC                          u470 0C82  
                        u550 0BEA                          u630 081A                          u471 0C7E  
                        u551 0BE6                          u631 0816                          u480 0C98  
                        u640 0716                          u560 053E                          u481 0C94  
                        u641 0712                          u561 053A                          u490 0B20  
                        u650 0730                          u570 0558                          u491 0B1C  
                        u651 072C                          u571 0554                          u660 0A58  
                        u580 08D4                          u900 02CE                          u661 0A54  
                        u581 08D0                          u901 02CA                          u670 0A70  
                        u590 08EC                          u910 0308                          u830 00E0  
                        u671 0A6C                          u591 08E8                          u911 0304  
                        u831 00DC                          u680 0992                          u840 0142  
                        u681 098E                          u841 013E                          u690 09AC  
                        u850 017C                          u691 09A8                          u851 0178  
                        u860 01B6                          u861 01B2                          u870 01F0  
                        u871 01EC                          u880 0242                          u881 023E  
                        u937 00BE                          u890 0294                          u947 0886  
                        u891 0290                          u957 07B2                          u967 04EE  
                        u977 05DC                          u987 06C8                          u997 073A  
                        wreg 000FE8                         l1520 0C9A                         l1600 0BBA  
                       l1610 0C0A                         l1530 0B20                         l1522 0CB6  
                       l1602 0BD2                         l1516 0C72                         l1612 0C14  
                       l1604 0BEC                         l1540 0B5A                         l1532 0B28  
                       l1620 0AD4                         l1700 05E4                         l1518 0C82  
                       l1550 0D52                         l1606 0BF0                         l1542 0B62  
                       l1534 0B30                         l1526 0B06                         l1630 0AF6  
                       l1622 0ADE                         l1614 0A76                         l1710 062A  
                       l1702 05EE                         l1552 0D2E                         l1608 0BFA  
                       l1544 0B64                         l1536 0B3E                         l1528 0B0E  
                       l1560 032C                         l1632 0AF8                         l1624 0AE0  
                       l1616 0A86                         l1800 096C                         l1712 0644  
                       l1704 05F8                         l1640 04BC                         l1720 0790  
                       l1554 0D32                         l1546 0B6A                         l1538 0B44  
                       l1570 03F6                         l1562 0348                         l1634 0B02  
                       l1626 0AEA                         l1618 0AB0                         l1810 0CFA  
                       l1802 0978                         l1706 0604                         l1650 0502  
                       l1642 04CC                         l1730 07CE                         l1722 079C  
                       l1714 075C                         l1580 0C30                         l1548 0D4E  
                       l1556 0D44                         l1572 0412                         l1564 039C  
                       l1628 0AEC                         l1820 0C68                         l1812 0C4A  
                       l1804 0992                         l1740 0672                         l1708 0610  
                       l1660 0558                         l1652 050C                         l1644 04D8  
                       l1636 0498                         l1732 07DA                         l1724 07AC  
                       l1716 0770                         l1900 003E                         l1830 0D38  
                       l1582 0C32                         l1558 0D48                         l1574 0456  
                       l1566 03B0                         l1814 0C4C                         l1590 0B7A  
                       l1806 09AC                         l1750 06C2                         l1742 0686  
                       l1654 0518                         l1646 04E8                         l1638 04AC  
                       l1726 07BA                         l1734 07E6                         l1718 0780  
                       l1670 0870                         l1662 0830                         l1910 0052  
                       l1902 004A                         l1824 0D1A                         l1584 0C34  
                       l1576 0C20                         l1568 03B4                         l1808 0CE0  
                       l1816 0C66                         l1592 0B7E                         l1752 06D0  
                       l1760 06FC                         l1744 0696                         l1648 04F8  
                       l1656 0524                         l1736 0800                         l1728 07C4  
                       l1680 08B0                         l1672 0880                         l1664 0844  
                       l1920 0060                         l1912 0054                         l1904 004E  
                       l1826 0D22                         l1586 0C36                         l1578 0C2A  
                       l1770 0A06                         l1818 0C68                         l1594 0B92  
                       l1762 0716                         l1754 06DA                         l1746 06A6  
                       l1690 059A                         l1658 053E                         l1738 081A  
                       l1674 0890                         l1682 08BC                         l1666 0854  
                       l1930 0080                         l1922 0064                         l1914 0056  
                       l1906 004E                         l1828 0D28                         l1588 0CC2  
                       l1772 0A14                         l1780 0A40                         l1596 0BA2  
                       l1764 0730                         l1756 06E4                         l1748 06B2  
                       l1692 05AA                         l1684 08D4                         l1676 089A  
                       l1668 0864                         l1940 00B4                         l1932 0084  
                       l1924 006C                         l1916 0058                         l1908 0050  
                       l1782 0A58                         l1774 0A1E                         l1598 0BAE  
                       l1790 0934                         l1766 0746                         l1758 06F0  
                       l1694 05BA                         l1686 08EC                         l1678 08A4  
                       l1950 012C                         l1942 00CC                         l1934 008C  
                       l1926 0074                         l1918 005A                         l1784 0A74  
                       l1776 0A28                         l1768 09C2                         l1792 093E  
                       l1696 05C6                         l1688 0586                         l1960 0190  
                       l1952 0142                         l1944 00E0                         l1936 0094  
                       l1928 007C                         l1778 0A34                         l1794 0948  
                       l1786 0902                         l1698 05D6                         l1970 01F0  
                       l1962 01A0                         l1954 0156                         l1946 00FC  
                       l1938 009C                         l1796 0954                         l1788 0926  
                       l1980 027E                         l1972 021C                         l1964 01B6  
                       l1956 0166                         l1948 0114                         l1798 0960  
                       l1990 02E2                         l1982 0294                         l1974 022C  
                       l1966 01CA                         l1958 017C                         l1984 02A8  
                       l1976 0242                         l1968 01DA                         l1896 002C  
                       l1994 02F2                         l1986 02B8                         l1978 026E  
                       l1898 0036                         l1996 0308                         l1988 02CE  
                       u1007 092C                         u1017 0B98                         u1027 0A0C  
                       u1037 0C00                         _T2PR 000FBC                         _main 002C  
                       fsr2h 000FDA                         indf2 000FDF                         fsr2l 000FD9  
                       btemp 0027                         _stop 0B7A                         prodh 000FF4  
                       prodl 000FF3                         start 0028              __end_of_HighISR 0028  
               ___param_bank 000000                  _turnLeft135 0586                  _turnRight90 0830  
                      ?_main 0001                        ?_stop 0014              __end_of___lwdiv 0B7A  
                      i2l306 0024                        _TMR0H 000FD4                        _TMR0L 000FD3  
 __end_of_I2C_2_Master_Start 0D58   __end_of_I2C_2_Master_Write 0D38                        main@a 01C8  
            __end_of_turn180 075C                        ttemp5 0028                        ttemp6 002B  
                      ttemp7 002F                        status 000FD8                        wtemp8 0028  
            __initialization 0CFE                 __end_of_main 032C                 __end_of_stop 0BEC  
                     ??_main 001F                       ??_stop 0018                __activetblptr 000000  
               _turnRight135 075C                 ?_setMotorPWM 000E                       _CCPR1H 000FAA  
                     _CCPR2H 000FA6                       _CCPR3H 000F25                       _CCPR4H 000F21  
                     _RE2PPS 000E74                       _RD5PPS 000E6F                       _RC7PPS 000E69  
                     i2l2000 001A                       i2l2002 0020                       _RE4PPS 000E76  
                     _RD6PPS 000E70                       _RG6PPS 000E88                       i2l1998 000A  
                  ??_HighISR 0001     __end_of_color_click_init 0C20                ??_Timer0_init 0001  
               _CCPTMRS0bits 000FAD                       ___wmul 0C9A                    ??___lwdiv 000B  
                     isa$std 000001                       _square 0902                main@timearray 0100  
           __end_of_savepath 0CFE             __end_of_savetime 0C72            savetime@timearray 0001  
                  ??_turn180 001D                       stop@mL 0014                       stop@mR 0016  
          ??_initDCmotorsPWM 0003                   __accesstop 0060      __end_of__initialization 0D10  
              ___rparam_used 000001              _Interrupts_init 0D38               __pcstackCOMRAM 0001  
        __end_of_Timer0_init 0D2C                   __pbssBANK1 01DC            _color_writetoaddr 0CC0  
               _T2CLKCONbits 000FBF                 ?_turnLeft135 0019           ?_color_writetoaddr 0003  
                    ?___wmul 0001                 ?_turnRight90 0019                      ?_square 0019  
        ??_color_writetoaddr 0004                      i2u92_40 001A                      i2u92_41 0016  
                    _SSP2ADD 000ED6                      _SSP2BUF 000ED5      __end_of_Interrupts_init 0D44  
     color_writetoaddr@value 0003                      _HighISR 0008    __end_of_color_writetoaddr 0CE0  
         _I2C_2_Master_Start 0D4E           _I2C_2_Master_Write 0D2C                      __Hparam 0000  
                    __Lparam 0000                    ?_savepath 0001                    ?_savetime 0001  
                _Timer0_init 0D1A          ?_I2C_2_Master_Start 0001                      ___lwdiv 0B06  
        ?_I2C_2_Master_Write 0001                   _off_period 0021                 turnLeft90@mL 0019  
               turnLeft90@mR 001B                      __pcinit 0CFE                      __ramtop 0E00  
                    __ptext0 002C                      __ptext1 0830                      __ptext2 075C  
                    __ptext3 0498                      __ptext4 0586                      __ptext5 0672  
                    __ptext6 0902                      __ptext7 0B7A                      __ptext8 0C4A  
                    __ptext9 0CE0                    _T2CONbits 000FBD                    _T2HLTbits 000FBE  
                    _turn180 0672         ??_I2C_2_Master_Start 0002         ??_I2C_2_Master_Write 0002  
       end_of_initialization 0D10            ?_color_click_init 0001           ??_color_click_init 0005  
                 ??_savepath 0004                   ??_savetime 0005           savetime@timercount 0003  
                    postdec2 000FDD                      postinc2 000FDE              _initDCmotorsPWM 0A76  
                 _timercount 01DC           setMotorPWM@negDuty 0013           setMotorPWM@posDuty 0012  
                  _TRISCbits 000F83                    _TRISDbits 000F84                    _TRISEbits 000F85  
                  _TRISGbits 000F87                    _TRISHbits 000F88             fullSpeedAhead@mL 0014  
           fullSpeedAhead@mR 0016     color_writetoaddr@address 0004             ?_Interrupts_init 0001  
                _CCP1CONbits 000FAB                  _CCP2CONbits 000FA7                  _CCP3CONbits 000F26  
                _CCP4CONbits 000F22                   main@motorL 01CA                   main@motorR 01D3  
                 _turnLeft90 0498               _fullSpeedAhead 09C2               __end_of___wmul 0CC0  
             __end_of_square 09C2          start_initialization 0CFE      __end_of_initDCmotorsPWM 0B06  
     __end_of_fullSpeedAhead 0A76                     ??___wmul 0005                     ??_square 001E  
                __pbssCOMRAM 0021                __pcstackBANK1 0100                     ?_HighISR 0001  
           ___lwdiv@dividend 0007                 ?_Timer0_init 0001                  ?_turnLeft90 0019  
            ?_fullSpeedAhead 0014                    __pintcode 0008          savepath@instruction 0003  
                   ?___lwdiv 0007                ?_turnRight135 0019            _I2C_2_Master_Idle 0C72  
          _I2C_2_Master_Init 0C20            _I2C_2_Master_Stop 0D44           ?_I2C_2_Master_Idle 0001  
         ?_I2C_2_Master_Init 0001                ??_setMotorPWM 0010                     ?_turn180 0019  
         ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000B     initDCmotorsPWM@PWMperiod 0001  
        ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001               ___wmul@product 0005  
        ??_I2C_2_Master_Stop 0002                     _LATCbits 000F7B                     _LATDbits 000F7C  
                   _LATEbits 000F7D                    _on_period 0023                     _LATGbits 000F7F  
                   _LATHbits 000F80                     _PIE0bits 000E29                     _PIR0bits 000E33  
           ?_initDCmotorsPWM 0001                     _SSP2CON2 000EDA                     _SSP2STAT 000ED8  
  __end_of_I2C_2_Master_Idle 0C9A    __end_of_I2C_2_Master_Init 0C4A            ___wmul@multiplier 0001  
             ??_turnRight135 001D    __end_of_I2C_2_Master_Stop 0D4E                 setMotorPWM@m 000E  
I2C_2_Master_Write@data_byte 0002                 _pathposition 0025          __end_of_setMotorPWM 0498  
                   __Hrparam 0000                     __Lrparam 0000               turnRight135@mL 0019  
             turnRight135@mR 001B                turnLeft135@mL 0019                turnLeft135@mR 001B  
                 _ANSELDbits 000EA7                 savepath@path 0001                   _T0CON0bits 000FD5  
                 _T0CON1bits 000FD6              ___lwdiv@divisor 0009              ___lwdiv@counter 000D  
                   __ptext10 0A76                     __ptext11 09C2                     __ptext20 0C72  
                   __ptext12 032C                     __ptext21 0C20                     __ptext13 0C9A  
                   __ptext22 0D1A                     __ptext14 0B06                     __ptext23 0D38  
                   __ptext15 0BEC                     __ptext16 0CC0                     __ptext17 0D2C  
                   __ptext18 0D44                     __ptext19 0D4E                 _SSP2CON1bits 000ED9  
               _SSP2CON2bits 000EDA                     _savepath 0CE0                ??_turnLeft135 001D  
                   _savetime 0C4A                     isa$xinst 000000                     int$flags 0027  
              ??_turnRight90 001D                     main@path 0164                    turn180@mL 0019  
                  turn180@mR 001B                   _INTCONbits 000FF2                  _setMotorPWM 032C  
                  square@dir 001D                     intlevel2 0000                turnRight90@mL 0019  
              turnRight90@mR 001B             ??_fullSpeedAhead 0019         __end_of_turnRight135 0830  
               ??_turnLeft90 001D             _color_click_init 0BEC          __end_of_turnLeft135 0672  
                   square@mL 0019                     square@mR 001B                   _SSP2DATPPS 000E1D  
               _timeposition 0026                   _SSP2CLKPPS 000E1C          __end_of_turnRight90 0902  
         __end_of_turnLeft90 0586  
