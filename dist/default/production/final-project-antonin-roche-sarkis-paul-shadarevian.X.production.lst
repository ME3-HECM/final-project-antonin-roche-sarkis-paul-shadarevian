

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 15:37:38 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    48                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    49   000000                     
    50                           ; Version 2.35
    51                           ; Generated 05/05/2021 GMT
    52                           ; 
    53                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution. Publication is not required when
    67                           ;        this file is used in an embedded application.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F67K40 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85   000000                     _TRISFbits	set	3974
    86   000000                     _LATDbits	set	3964
    87   000000                     _LATFbits	set	3966
    88   000000                     _TRISGbits	set	3975
    89   000000                     _TRISEbits	set	3973
    90   000000                     _LATGbits	set	3967
    91   000000                     _SSP2CON2bits	set	3802
    92   000000                     _SSP2CLKPPS	set	3612
    93   000000                     _SSP2DATPPS	set	3613
    94   000000                     _ANSELDbits	set	3751
    95   000000                     _SSP2ADD	set	3798
    96   000000                     _SSP2CON1bits	set	3801
    97   000000                     _LATCbits	set	3963
    98   000000                     _LATEbits	set	3965
    99   000000                     _SSP2CON2	set	3802
   100   000000                     _TRISDbits	set	3972
   101   000000                     _CCPR4H	set	3873
   102   000000                     _CCPR3H	set	3877
   103   000000                     _SSP2STAT	set	3800
   104   000000                     _ANSELFbits	set	3764
   105   000000                     _SSP2BUF	set	3797
   106   000000                     _PIE0bits	set	3625
   107   000000                     _PIR0bits	set	3635
   108   000000                     _RC7PPS	set	3689
   109   000000                     _RD5PPS	set	3695
   110   000000                     _RE2PPS	set	3700
   111   000000                     _RD6PPS	set	3696
   112   000000                     _TRISAbits	set	3969
   113   000000                     _LATHbits	set	3968
   114   000000                     _TRISCbits	set	3971
   115   000000                     _PORTFbits	set	3982
   116   000000                     _TRISHbits	set	3976
   117   000000                     _T2PR	set	4028
   118   000000                     _T2CONbits	set	4029
   119   000000                     _CCPR2H	set	4006
   120   000000                     _CCPR1H	set	4010
   121   000000                     _RE4PPS	set	3702
   122   000000                     _RG6PPS	set	3720
   123   000000                     _TMR0L	set	4051
   124   000000                     _TMR0H	set	4052
   125   000000                     _T0CON0bits	set	4053
   126   000000                     _T2CLKCONbits	set	4031
   127   000000                     _T2HLTbits	set	4030
   128   000000                     _CCP1CONbits	set	4011
   129   000000                     _CCPTMRS0bits	set	4013
   130   000000                     _CCP2CONbits	set	4007
   131   000000                     _LATAbits	set	3961
   132   000000                     _CCP3CONbits	set	3878
   133   000000                     _CCP4CONbits	set	3874
   134   000000                     _T0CON1bits	set	4054
   135   000000                     _INTCONbits	set	4082
   136                           
   137                           ; #config settings
   138                           
   139                           	psect	cinit
   140   000FEA                     __pcinit:
   141                           	callstack 0
   142   000FEA                     start_initialization:
   143                           	callstack 0
   144   000FEA                     __initialization:
   145                           	callstack 0
   146                           
   147                           ; Clear objects allocated to COMRAM (8 bytes)
   148   000FEA  EE00  F052         	lfsr	0,__pbssCOMRAM
   149   000FEE  0E08               	movlw	8
   150   000FF0                     clear_0:
   151   000FF0  6AEE               	clrf	postinc0,c
   152   000FF2  06E8               	decf	wreg,f,c
   153   000FF4  E1FD               	bnz	clear_0
   154   000FF6                     end_of_initialization:
   155                           	callstack 0
   156   000FF6                     __end_of__initialization:
   157                           	callstack 0
   158   000FF6  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   159   000FF8  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   160   000FFA  0100               	movlb	0
   161   000FFC  EF14  F000         	goto	_main	;jump to C main() function
   162                           
   163                           	psect	bssCOMRAM
   164   000052                     __pbssCOMRAM:
   165                           	callstack 0
   166   000052                     _off_period:
   167                           	callstack 0
   168   000052                     	ds	2
   169   000054                     _on_period:
   170                           	callstack 0
   171   000054                     	ds	2
   172   000056                     _timercount:
   173                           	callstack 0
   174   000056                     	ds	2
   175   000058                     _pathposition:
   176                           	callstack 0
   177   000058                     	ds	1
   178   000059                     _timeposition:
   179                           	callstack 0
   180   000059                     	ds	1
   181                           
   182                           	psect	cstackBANK1
   183   000100                     __pcstackBANK1:
   184                           	callstack 0
   185   000100                     main@timearray:
   186                           	callstack 0
   187                           
   188                           ; 100 bytes @ 0x0
   189   000100                     	ds	100
   190   000164                     main@path:
   191                           	callstack 0
   192                           
   193                           ; 100 bytes @ 0x64
   194   000164                     	ds	100
   195   0001C8                     _main$2600:
   196                           	callstack 0
   197                           
   198                           ; 2 bytes @ 0xC8
   199   0001C8                     	ds	2
   200   0001CA                     main@max:
   201                           	callstack 0
   202                           
   203                           ; 8 bytes @ 0xCA
   204   0001CA                     	ds	8
   205   0001D2                     main@ambient:
   206                           	callstack 0
   207                           
   208                           ; 8 bytes @ 0xD2
   209   0001D2                     	ds	8
   210   0001DA                     main@reading:
   211                           	callstack 0
   212                           
   213                           ; 8 bytes @ 0xDA
   214   0001DA                     	ds	8
   215   0001E2                     main@motorL:
   216                           	callstack 0
   217                           
   218                           ; 9 bytes @ 0xE2
   219   0001E2                     	ds	9
   220   0001EB                     main@motorR:
   221                           	callstack 0
   222                           
   223                           ; 9 bytes @ 0xEB
   224   0001EB                     	ds	9
   225                           
   226                           	psect	cstackCOMRAM
   227   000001                     __pcstackCOMRAM:
   228                           	callstack 0
   229   000001                     ??_I2C_2_Master_Idle:
   230   000001                     ?_savetime:
   231                           	callstack 0
   232   000001                     ?___wmul:
   233                           	callstack 0
   234   000001                     initDCmotorsPWM@PWMperiod:
   235                           	callstack 0
   236   000001                     savepath@path:
   237                           	callstack 0
   238   000001                     savetime@timearray:
   239                           	callstack 0
   240   000001                     decide_color@mx:
   241                           	callstack 0
   242   000001                     ___wmul@multiplier:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x0
   246   000001                     	ds	1
   247   000002                     ??_I2C_2_Master_Read:
   248   000002                     I2C_2_Master_Write@data_byte:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x1
   252   000002                     	ds	1
   253   000003                     I2C_2_Master_Read@ack:
   254                           	callstack 0
   255   000003                     savepath@instruction:
   256                           	callstack 0
   257   000003                     color_writetoaddr@value:
   258                           	callstack 0
   259   000003                     savetime@timercount:
   260                           	callstack 0
   261   000003                     ___wmul@multiplicand:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x2
   265   000003                     	ds	1
   266   000004                     ??_savepath:
   267   000004                     I2C_2_Master_Read@tmp:
   268                           	callstack 0
   269   000004                     color_writetoaddr@address:
   270                           	callstack 0
   271                           
   272                           ; 1 bytes @ 0x3
   273   000004                     	ds	1
   274   000005                     ??_color_click_init:
   275   000005                     ??_savetime:
   276   000005                     ?_color_read_Red:
   277                           	callstack 0
   278   000005                     ?_color_read_Blue:
   279                           	callstack 0
   280   000005                     ?_color_read_Green:
   281                           	callstack 0
   282   000005                     ?_color_read_Clear:
   283                           	callstack 0
   284   000005                     ___wmul@product:
   285                           	callstack 0
   286                           
   287                           ; 2 bytes @ 0x4
   288   000005                     	ds	2
   289   000007                     ??_color_read_Red:
   290   000007                     ??_color_read_Blue:
   291   000007                     ??_color_read_Green:
   292   000007                     ??_color_read_Clear:
   293                           
   294                           ; 1 bytes @ 0x6
   295   000007                     	ds	3
   296   00000A                     color_read_Red@tmp:
   297                           	callstack 0
   298   00000A                     color_read_Green@tmp:
   299                           	callstack 0
   300   00000A                     color_read_Blue@tmp:
   301                           	callstack 0
   302   00000A                     color_read_Clear@tmp:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0x9
   306   00000A                     	ds	2
   307   00000C                     ?___lwdiv:
   308                           	callstack 0
   309   00000C                     ___lwdiv@dividend:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0xB
   313   00000C                     	ds	2
   314   00000E                     ___lwdiv@divisor:
   315                           	callstack 0
   316                           
   317                           ; 2 bytes @ 0xD
   318   00000E                     	ds	2
   319   000010                     ___lwdiv@quotient:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0xF
   323   000010                     	ds	2
   324   000012                     ___lwdiv@counter:
   325                           	callstack 0
   326                           
   327                           ; 1 bytes @ 0x11
   328   000012                     	ds	1
   329   000013                     setMotorPWM@m:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x12
   333   000013                     	ds	2
   334   000015                     ??_setMotorPWM:
   335                           
   336                           ; 1 bytes @ 0x14
   337   000015                     	ds	2
   338   000017                     setMotorPWM@posDuty:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x16
   342   000017                     	ds	1
   343   000018                     setMotorPWM@negDuty:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0x17
   347   000018                     	ds	1
   348   000019                     stop@mL:
   349                           	callstack 0
   350   000019                     fullSpeedAhead@mL:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x18
   354   000019                     	ds	2
   355   00001B                     stop@mR:
   356                           	callstack 0
   357   00001B                     fullSpeedAhead@mR:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x1A
   361   00001B                     	ds	2
   362   00001D                     ??_stop:
   363   00001D                     fullSpeedAhead@dir:
   364                           	callstack 0
   365                           
   366                           ; 1 bytes @ 0x1C
   367   00001D                     	ds	1
   368   00001E                     ??_fullSpeedAhead:
   369   00001E                     turnLeft90@mL:
   370                           	callstack 0
   371   00001E                     turnRight90@mL:
   372                           	callstack 0
   373   00001E                     turnLeft135@mL:
   374                           	callstack 0
   375   00001E                     turnRight135@mL:
   376                           	callstack 0
   377   00001E                     turn180@mL:
   378                           	callstack 0
   379   00001E                     square@mL:
   380                           	callstack 0
   381   00001E                     smallmovement@mL:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x1D
   385   00001E                     	ds	2
   386   000020                     turnLeft90@mR:
   387                           	callstack 0
   388   000020                     turnRight90@mR:
   389                           	callstack 0
   390   000020                     turnLeft135@mR:
   391                           	callstack 0
   392   000020                     turnRight135@mR:
   393                           	callstack 0
   394   000020                     turn180@mR:
   395                           	callstack 0
   396   000020                     square@mR:
   397                           	callstack 0
   398   000020                     smallmovement@mR:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x1F
   402   000020                     	ds	2
   403   000022                     ??_turnLeft90:
   404   000022                     ??_turnRight90:
   405   000022                     ??_turnLeft135:
   406   000022                     ??_turnRight135:
   407   000022                     ??_turn180:
   408   000022                     square@dir:
   409                           	callstack 0
   410   000022                     smallmovement@dir:
   411                           	callstack 0
   412                           
   413                           ; 1 bytes @ 0x21
   414   000022                     	ds	1
   415   000023                     ??_square:
   416   000023                     ??_smallmovement:
   417                           
   418                           ; 1 bytes @ 0x22
   419   000023                     	ds	1
   420   000024                     returnstep@motorL:
   421                           	callstack 0
   422                           
   423                           ; 9 bytes @ 0x23
   424   000024                     	ds	9
   425   00002D                     returnstep@motorR:
   426                           	callstack 0
   427                           
   428                           ; 9 bytes @ 0x2C
   429   00002D                     	ds	9
   430   000036                     returnstep@instruction:
   431                           	callstack 0
   432                           
   433                           ; 1 bytes @ 0x35
   434   000036                     	ds	1
   435   000037                     returnhome@path:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x36
   439   000037                     	ds	2
   440   000039                     returnhome@motorL:
   441                           	callstack 0
   442                           
   443                           ; 9 bytes @ 0x38
   444   000039                     	ds	9
   445   000042                     returnhome@motorR:
   446                           	callstack 0
   447                           
   448                           ; 9 bytes @ 0x41
   449   000042                     	ds	9
   450   00004B                     returnhome@timearray:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x4A
   454   00004B                     	ds	2
   455   00004D                     ??_returnhome:
   456                           
   457                           ; 1 bytes @ 0x4C
   458   00004D                     	ds	5
   459   000052                     
   460                           ; 1 bytes @ 0x51
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 20 in file "mainfinal.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  path          100  100[BANK1 ] unsigned char [100]
   471 ;;  timearray     100    0[BANK1 ] unsigned char [100]
   472 ;;  motorR          9  235[BANK1 ] struct DC_motor
   473 ;;  motorL          9  226[BANK1 ] struct DC_motor
   474 ;;  reading         8  218[BANK1 ] struct colors
   475 ;;  ambient         8  210[BANK1 ] struct colors
   476 ;;  max             8  202[BANK1 ] struct colors
   477 ;;  PWMcycle        2    0        unsigned int 
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   488 ;;      Locals:         0       0     244       0       0       0       0       0       0       0       0       0       
      +0       0       0
   489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   490 ;;      Totals:         0       0     244       0       0       0       0       0       0       0       0       0       
      +0       0       0
   491 ;;Total ram usage:      244 bytes
   492 ;; Hardware stack levels required when called: 7
   493 ;; This function calls:
   494 ;;		_I2C_2_Master_Init
   495 ;;		_Interrupts_init
   496 ;;		_Timer0_init
   497 ;;		___lwdiv
   498 ;;		_color_click_init
   499 ;;		_color_read_Blue
   500 ;;		_color_read_Clear
   501 ;;		_color_read_Green
   502 ;;		_color_read_Red
   503 ;;		_decide_color
   504 ;;		_fullSpeedAhead
   505 ;;		_initDCmotorsPWM
   506 ;;		_returnhome
   507 ;;		_savepath
   508 ;;		_savetime
   509 ;;		_smallmovement
   510 ;;		_square
   511 ;;		_turn180
   512 ;;		_turnLeft135
   513 ;;		_turnLeft90
   514 ;;		_turnRight135
   515 ;;		_turnRight90
   516 ;; This function is called by:
   517 ;;		Startup code after reset
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text0
   522   000028                     __ptext0:
   523                           	callstack 0
   524   000028                     _main:
   525                           	callstack 24
   526   000028                     
   527                           ;mainfinal.c: 22:     Timer0_init();
   528   000028  EC00  F008         	call	_Timer0_init	;wreg free
   529   00002C                     
   530                           ;mainfinal.c: 23:     Interrupts_init();
   531   00002C  EC0F  F008         	call	_Interrupts_init	;wreg free
   532   000030                     
   533                           ;mainfinal.c: 24:     initDCmotorsPWM(199);
   534   000030  0E00               	movlw	0
   535   000032  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   536   000034  0EC7               	movlw	199
   537   000036  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   538   000038  ECEA  F005         	call	_initDCmotorsPWM	;wreg free
   539   00003C                     
   540                           ;mainfinal.c: 25:     color_click_init();
   541   00003C  EC66  F007         	call	_color_click_init	;wreg free
   542   000040                     
   543                           ;mainfinal.c: 30:     color_click_init();
   544   000040  EC66  F007         	call	_color_click_init	;wreg free
   545                           
   546                           ;mainfinal.c: 31:     I2C_2_Master_Init();
   547   000044  EC86  F007         	call	_I2C_2_Master_Init	;wreg free
   548   000048                     
   549                           ;mainfinal.c: 34:     struct colors reading, max, ambient;;mainfinal.c: 37:     reading.
      +                          red = 0;
   550   000048  0E00               	movlw	0
   551   00004A  0101               	movlb	1	; () banked
   552   00004C  6FDB               	movwf	(main@reading+1)& (0+255),b
   553   00004E  0E00               	movlw	0
   554   000050  6FDA               	movwf	main@reading& (0+255),b
   555   000052                     
   556                           ; BSR set to: 1
   557                           ;mainfinal.c: 38:     reading.blue = 0;
   558   000052  0E00               	movlw	0
   559   000054  6FDD               	movwf	(main@reading+3)& (0+255),b
   560   000056  0E00               	movlw	0
   561   000058  6FDC               	movwf	(main@reading+2)& (0+255),b
   562   00005A                     
   563                           ; BSR set to: 1
   564                           ;mainfinal.c: 39:     reading.green = 0;
   565   00005A  0E00               	movlw	0
   566   00005C  6FDF               	movwf	(main@reading+5)& (0+255),b
   567   00005E  0E00               	movlw	0
   568   000060  6FDE               	movwf	(main@reading+4)& (0+255),b
   569   000062                     
   570                           ; BSR set to: 1
   571                           ;mainfinal.c: 40:     reading.clear = 0;
   572   000062  0E00               	movlw	0
   573   000064  6FE1               	movwf	(main@reading+7)& (0+255),b
   574   000066  0E00               	movlw	0
   575   000068  6FE0               	movwf	(main@reading+6)& (0+255),b
   576   00006A                     
   577                           ; BSR set to: 1
   578                           ;mainfinal.c: 42:     max.red = 0;
   579   00006A  0E00               	movlw	0
   580   00006C  6FCB               	movwf	(main@max+1)& (0+255),b
   581   00006E  0E00               	movlw	0
   582   000070  6FCA               	movwf	main@max& (0+255),b
   583   000072                     
   584                           ; BSR set to: 1
   585                           ;mainfinal.c: 43:     max.blue = 0;
   586   000072  0E00               	movlw	0
   587   000074  6FCD               	movwf	(main@max+3)& (0+255),b
   588   000076  0E00               	movlw	0
   589   000078  6FCC               	movwf	(main@max+2)& (0+255),b
   590   00007A                     
   591                           ; BSR set to: 1
   592                           ;mainfinal.c: 44:     max.green = 0;
   593   00007A  0E00               	movlw	0
   594   00007C  6FCF               	movwf	(main@max+5)& (0+255),b
   595   00007E  0E00               	movlw	0
   596   000080  6FCE               	movwf	(main@max+4)& (0+255),b
   597   000082                     
   598                           ; BSR set to: 1
   599                           ;mainfinal.c: 45:     max.clear = 0;
   600   000082  0E00               	movlw	0
   601   000084  6FD1               	movwf	(main@max+7)& (0+255),b
   602   000086  0E00               	movlw	0
   603   000088  6FD0               	movwf	(main@max+6)& (0+255),b
   604   00008A                     
   605                           ; BSR set to: 1
   606                           ;mainfinal.c: 47:     LATFbits.LATF7 = 1;
   607   00008A  8E7E               	bsf	126,7,c	;volatile
   608   00008C                     
   609                           ; BSR set to: 1
   610                           ;mainfinal.c: 48:     LATGbits.LATG1 = 1;
   611   00008C  827F               	bsf	127,1,c	;volatile
   612   00008E                     
   613                           ; BSR set to: 1
   614                           ;mainfinal.c: 49:     LATAbits.LATA4 = 1;
   615   00008E  8879               	bsf	121,4,c	;volatile
   616   000090                     
   617                           ; BSR set to: 1
   618                           ;mainfinal.c: 51:     TRISDbits.TRISD3 = 0;
   619   000090  9684               	bcf	132,3,c	;volatile
   620   000092                     
   621                           ; BSR set to: 1
   622                           ;mainfinal.c: 52:     LATDbits.LATD3 = 0;
   623   000092  967C               	bcf	124,3,c	;volatile
   624   000094                     
   625                           ; BSR set to: 1
   626                           ;mainfinal.c: 54:     TRISFbits.TRISF2 = 1;
   627   000094  8486               	bsf	134,2,c	;volatile
   628   000096                     
   629                           ; BSR set to: 1
   630                           ;mainfinal.c: 55:     ANSELFbits.ANSELF2=0;
   631   000096  010E               	movlb	14	; () banked
   632   000098  95B4               	bcf	180,2,b	;volatile
   633   00009A                     
   634                           ; BSR set to: 14
   635                           ;mainfinal.c: 57:     TRISDbits.TRISD7 = 0;
   636   00009A  9E84               	bcf	132,7,c	;volatile
   637   00009C                     
   638                           ; BSR set to: 14
   639                           ;mainfinal.c: 64:     LATHbits.LATH1=0;
   640   00009C  9280               	bcf	128,1,c	;volatile
   641   00009E                     
   642                           ; BSR set to: 14
   643                           ;mainfinal.c: 65:     TRISHbits.TRISH1 = 0;
   644   00009E  9288               	bcf	136,1,c	;volatile
   645   0000A0                     
   646                           ; BSR set to: 14
   647                           ;mainfinal.c: 68:     LATDbits.LATD3=0;
   648   0000A0  967C               	bcf	124,3,c	;volatile
   649   0000A2                     
   650                           ; BSR set to: 14
   651                           ;mainfinal.c: 69:     TRISDbits.TRISD3 = 0;
   652   0000A2  9684               	bcf	132,3,c	;volatile
   653   0000A4                     
   654                           ; BSR set to: 14
   655                           ;mainfinal.c: 72:     LATDbits.LATD4=0;
   656   0000A4  987C               	bcf	124,4,c	;volatile
   657   0000A6                     
   658                           ; BSR set to: 14
   659                           ;mainfinal.c: 73:     TRISDbits.TRISD4 = 0;
   660   0000A6  9884               	bcf	132,4,c	;volatile
   661   0000A8                     
   662                           ; BSR set to: 14
   663                           ;mainfinal.c: 76:     struct DC_motor motorL, motorR;;mainfinal.c: 78:     motorR.power 
      +                          = 0;
   664   0000A8  0E00               	movlw	0
   665   0000AA  0101               	movlb	1	; () banked
   666   0000AC  6FEB               	movwf	main@motorR& (0+255),b
   667   0000AE                     
   668                           ; BSR set to: 1
   669                           ;mainfinal.c: 79:     motorL.direction = 1;
   670   0000AE  0E01               	movlw	1
   671   0000B0  6FE3               	movwf	(main@motorL+1)& (0+255),b
   672   0000B2                     
   673                           ; BSR set to: 1
   674                           ;mainfinal.c: 80:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   675   0000B2  0EAA               	movlw	170
   676   0000B4  6FE7               	movwf	(main@motorL+5)& (0+255),b
   677   0000B6  0E0F               	movlw	15
   678   0000B8  6FE8               	movwf	(main@motorL+6)& (0+255),b
   679   0000BA                     
   680                           ; BSR set to: 1
   681                           ;mainfinal.c: 81:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   682   0000BA  0EA6               	movlw	166
   683   0000BC  6FE9               	movwf	(main@motorL+7)& (0+255),b
   684   0000BE  0E0F               	movlw	15
   685   0000C0  6FEA               	movwf	(main@motorL+8)& (0+255),b
   686   0000C2                     
   687                           ; BSR set to: 1
   688                           ;mainfinal.c: 82:     motorL.PWMperiod=PWMcycle;
   689   0000C2  0E00               	movlw	0
   690   0000C4  6FE6               	movwf	(main@motorL+4)& (0+255),b
   691   0000C6  0EC7               	movlw	199
   692   0000C8  6FE5               	movwf	(main@motorL+3)& (0+255),b
   693   0000CA                     
   694                           ; BSR set to: 1
   695                           ;mainfinal.c: 84:     motorL.power = 0;
   696   0000CA  0E00               	movlw	0
   697   0000CC  6FE2               	movwf	main@motorL& (0+255),b
   698   0000CE                     
   699                           ; BSR set to: 1
   700                           ;mainfinal.c: 85:     motorR.direction = 1;
   701   0000CE  0E01               	movlw	1
   702   0000D0  6FEC               	movwf	(main@motorR+1)& (0+255),b
   703   0000D2                     
   704                           ; BSR set to: 1
   705                           ;mainfinal.c: 86:     motorR.PWMperiod=PWMcycle;
   706   0000D2  0E00               	movlw	0
   707   0000D4  6FEF               	movwf	(main@motorR+4)& (0+255),b
   708   0000D6  0EC7               	movlw	199
   709   0000D8  6FEE               	movwf	(main@motorR+3)& (0+255),b
   710   0000DA                     
   711                           ; BSR set to: 1
   712                           ;mainfinal.c: 87:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   713   0000DA  0E25               	movlw	37
   714   0000DC  6FF0               	movwf	(main@motorR+5)& (0+255),b
   715   0000DE  0E0F               	movlw	15
   716   0000E0  6FF1               	movwf	(main@motorR+6)& (0+255),b
   717   0000E2                     
   718                           ; BSR set to: 1
   719                           ;mainfinal.c: 88:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   720   0000E2  0E21               	movlw	33
   721   0000E4  6FF2               	movwf	(main@motorR+7)& (0+255),b
   722   0000E6  0E0F               	movlw	15
   723   0000E8  6FF3               	movwf	(main@motorR+8)& (0+255),b
   724   0000EA                     l298:
   725   0000EA  B68E               	btfsc	142,3,c	;volatile
   726   0000EC  EF7A  F000         	goto	u811
   727   0000F0  EF7C  F000         	goto	u810
   728   0000F4                     u811:
   729   0000F4  EF75  F000         	goto	l298
   730   0000F8                     u810:
   731   0000F8                     
   732                           ;mainfinal.c: 99:     ambient.red = color_read_Red();
   733   0000F8  ECA5  F006         	call	_color_read_Red	;wreg free
   734   0000FC  C005  F1D2         	movff	?_color_read_Red,main@ambient
   735   000100  C006  F1D3         	movff	?_color_read_Red+1,main@ambient+1
   736                           
   737                           ;mainfinal.c: 100:     ambient.blue = color_read_Blue();
   738   000104  EC1D  F007         	call	_color_read_Blue	;wreg free
   739   000108  C005  F1D4         	movff	?_color_read_Blue,main@ambient+2
   740   00010C  C006  F1D5         	movff	?_color_read_Blue+1,main@ambient+3
   741                           
   742                           ;mainfinal.c: 101:     ambient.green = color_read_Green();
   743   000110  ECCD  F006         	call	_color_read_Green	;wreg free
   744   000114  C005  F1D6         	movff	?_color_read_Green,main@ambient+4
   745   000118  C006  F1D7         	movff	?_color_read_Green+1,main@ambient+5
   746                           
   747                           ;mainfinal.c: 102:     ambient.clear = color_read_Clear();
   748   00011C  ECF5  F006         	call	_color_read_Clear	;wreg free
   749   000120  C005  F1D8         	movff	?_color_read_Clear,main@ambient+6
   750   000124  C006  F1D9         	movff	?_color_read_Clear+1,main@ambient+7
   751   000128                     l2209:
   752                           
   753                           ;mainfinal.c: 112:     fullSpeedAhead(&motorL,&motorR, 1);
   754   000128  0EE2               	movlw	low main@motorL
   755   00012A  6E19               	movwf	fullSpeedAhead@mL^0,c
   756   00012C  0E01               	movlw	high main@motorL
   757   00012E  6E1A               	movwf	(fullSpeedAhead@mL+1)^0,c
   758   000130  0EEB               	movlw	low main@motorR
   759   000132  6E1B               	movwf	fullSpeedAhead@mR^0,c
   760   000134  0E01               	movlw	high main@motorR
   761   000136  6E1C               	movwf	(fullSpeedAhead@mR+1)^0,c
   762   000138  0E01               	movlw	1
   763   00013A  6E1D               	movwf	fullSpeedAhead@dir^0,c
   764   00013C  EC2B  F005         	call	_fullSpeedAhead	;wreg free
   765   000140                     
   766                           ;mainfinal.c: 113:     savepath(path, 1);
   767   000140  0E64               	movlw	low main@path
   768   000142  6E01               	movwf	savepath@path^0,c
   769   000144  0E01               	movlw	high main@path
   770   000146  6E02               	movwf	(savepath@path+1)^0,c
   771   000148  0E01               	movlw	1
   772   00014A  6E03               	movwf	savepath@instruction^0,c
   773   00014C  ECE6  F007         	call	_savepath	;wreg free
   774   000150                     
   775                           ;mainfinal.c: 126:     reading.clear = (color_read_Clear()-ambient.clear)/(max.clear/100
      +                          0);
   776   000150  0E03               	movlw	3
   777   000152  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
   778   000154  0EE8               	movlw	232
   779   000156  6E0E               	movwf	___lwdiv@divisor^0,c
   780   000158  C1D0  F00C         	movff	main@max+6,___lwdiv@dividend
   781   00015C  C1D1  F00D         	movff	main@max+7,___lwdiv@dividend+1
   782   000160  EC32  F006         	call	___lwdiv	;wreg free
   783   000164  C00C  F1C8         	movff	?___lwdiv,_main$2600
   784   000168  C00D  F1C9         	movff	?___lwdiv+1,_main$2600+1
   785   00016C                     
   786                           ;mainfinal.c: 126:     reading.clear = (color_read_Clear()-ambient.clear)/(max.clear/100
      +                          0);
   787   00016C  ECF5  F006         	call	_color_read_Clear	;wreg free
   788   000170  0101               	movlb	1	; () banked
   789   000172  51D8               	movf	(main@ambient+6)& (0+255),w,b
   790   000174  5C05               	subwf	?_color_read_Clear^0,w,c
   791   000176  6E0C               	movwf	___lwdiv@dividend^0,c
   792   000178  51D9               	movf	(main@ambient+7)& (0+255),w,b
   793   00017A  5806               	subwfb	(?_color_read_Clear+1)^0,w,c
   794   00017C  6E0D               	movwf	(___lwdiv@dividend+1)^0,c
   795   00017E  C1C8  F00E         	movff	_main$2600,___lwdiv@divisor
   796   000182  C1C9  F00F         	movff	_main$2600+1,___lwdiv@divisor+1
   797   000186  EC32  F006         	call	___lwdiv	;wreg free
   798   00018A  C00C  F1E0         	movff	?___lwdiv,main@reading+6
   799   00018E  C00D  F1E1         	movff	?___lwdiv+1,main@reading+7
   800                           
   801                           ;mainfinal.c: 128:     if (1200 > reading.clear > 30) {
   802   000192  EF94  F000         	goto	l2209
   803   000196  EF12  F000         	goto	start
   804   00019A                     __end_of_main:
   805                           	callstack 0
   806                           
   807 ;; *************** function _smallmovement *****************
   808 ;; Defined at:
   809 ;;		line 267 in file "dc_motor.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  mL              2   29[COMRAM] PTR struct DC_motor
   812 ;;		 -> main@motorL(9), 
   813 ;;  mR              2   31[COMRAM] PTR struct DC_motor
   814 ;;		 -> main@motorR(9), 
   815 ;;  dir             1   33[COMRAM] unsigned char 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   827 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   831 ;;Total ram usage:        6 bytes
   832 ;; Hardware stack levels used: 1
   833 ;; Hardware stack levels required when called: 4
   834 ;; This function calls:
   835 ;;		_setMotorPWM
   836 ;;		_stop
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text1
   843   000B18                     __ptext1:
   844                           	callstack 0
   845   000B18                     _smallmovement:
   846                           	callstack 26
   847   000B18                     
   848                           ;dc_motor.c: 267: void smallmovement(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 2
      +                          68: {;dc_motor.c: 269:     mL->direction = dir;
   849   000B18  EE20 F001          	lfsr	2,1
   850   000B1C  501E               	movf	smallmovement@mL^0,w,c
   851   000B1E  26D9               	addwf	fsr2l,f,c
   852   000B20  501F               	movf	(smallmovement@mL+1)^0,w,c
   853   000B22  22DA               	addwfc	fsr2h,f,c
   854   000B24  C022  FFDF         	movff	smallmovement@dir,indf2
   855                           
   856                           ;dc_motor.c: 270:     mR->direction = dir;
   857   000B28  EE20 F001          	lfsr	2,1
   858   000B2C  5020               	movf	smallmovement@mR^0,w,c
   859   000B2E  26D9               	addwf	fsr2l,f,c
   860   000B30  5021               	movf	(smallmovement@mR+1)^0,w,c
   861   000B32  22DA               	addwfc	fsr2h,f,c
   862   000B34  C022  FFDF         	movff	smallmovement@dir,indf2
   863                           
   864                           ;dc_motor.c: 272:     while (mL->power <= 50 || mR->power <= 50 ) {
   865   000B38  EFC7  F005         	goto	l2037
   866   000B3C                     l2023:
   867                           
   868                           ;dc_motor.c: 273:         _delay((unsigned long)((10)*(64000000/4000.0)));
   869   000B3C  0ED0               	movlw	208
   870   000B3E  6E23               	movwf	??_smallmovement^0,c
   871   000B40  0ECA               	movlw	202
   872   000B42                     u837:
   873   000B42  2EE8               	decfsz	wreg,f,c
   874   000B44  D7FE               	bra	u837
   875   000B46  2E23               	decfsz	??_smallmovement^0,f,c
   876   000B48  D7FC               	bra	u837
   877   000B4A                     
   878                           ;dc_motor.c: 274:         mL->power++;
   879   000B4A  C01E  FFD9         	movff	smallmovement@mL,fsr2l
   880   000B4E  C01F  FFDA         	movff	smallmovement@mL+1,fsr2h
   881   000B52  2ADF               	incf	indf2,f,c
   882   000B54                     
   883                           ;dc_motor.c: 275:         mR->power++;
   884   000B54  C020  FFD9         	movff	smallmovement@mR,fsr2l
   885   000B58  C021  FFDA         	movff	smallmovement@mR+1,fsr2h
   886   000B5C  2ADF               	incf	indf2,f,c
   887   000B5E                     
   888                           ;dc_motor.c: 276:         setMotorPWM(mL);
   889   000B5E  C01E  F013         	movff	smallmovement@mL,setMotorPWM@m
   890   000B62  C01F  F014         	movff	smallmovement@mL+1,setMotorPWM@m+1
   891   000B66  ECCD  F000         	call	_setMotorPWM	;wreg free
   892   000B6A                     
   893                           ;dc_motor.c: 277:         setMotorPWM(mR);
   894   000B6A  C020  F013         	movff	smallmovement@mR,setMotorPWM@m
   895   000B6E  C021  F014         	movff	smallmovement@mR+1,setMotorPWM@m+1
   896   000B72  ECCD  F000         	call	_setMotorPWM	;wreg free
   897   000B76                     
   898                           ;dc_motor.c: 279:     setMotorPWM(mL);
   899   000B76  C01E  F013         	movff	smallmovement@mL,setMotorPWM@m
   900   000B7A  C01F  F014         	movff	smallmovement@mL+1,setMotorPWM@m+1
   901   000B7E  ECCD  F000         	call	_setMotorPWM	;wreg free
   902   000B82                     
   903                           ;dc_motor.c: 280:     setMotorPWM(mR);
   904   000B82  C020  F013         	movff	smallmovement@mR,setMotorPWM@m
   905   000B86  C021  F014         	movff	smallmovement@mR+1,setMotorPWM@m+1
   906   000B8A  ECCD  F000         	call	_setMotorPWM	;wreg free
   907   000B8E                     l2037:
   908                           
   909                           ;dc_motor.c: 272:     while (mL->power <= 50 || mR->power <= 50 ) {
   910   000B8E  C01E  FFD9         	movff	smallmovement@mL,fsr2l
   911   000B92  C01F  FFDA         	movff	smallmovement@mL+1,fsr2h
   912   000B96  0E32               	movlw	50
   913   000B98  64DF               	cpfsgt	indf2,c
   914   000B9A  EFD1  F005         	goto	u731
   915   000B9E  EFD3  F005         	goto	u730
   916   000BA2                     u731:
   917   000BA2  EF9E  F005         	goto	l2023
   918   000BA6                     u730:
   919   000BA6  C020  FFD9         	movff	smallmovement@mR,fsr2l
   920   000BAA  C021  FFDA         	movff	smallmovement@mR+1,fsr2h
   921   000BAE  0E32               	movlw	50
   922   000BB0  64DF               	cpfsgt	indf2,c
   923   000BB2  EFDD  F005         	goto	u741
   924   000BB6  EFDF  F005         	goto	u740
   925   000BBA                     u741:
   926   000BBA  EF9E  F005         	goto	l2023
   927   000BBE                     u740:
   928   000BBE                     
   929                           ;dc_motor.c: 283:     stop(mL, mR);
   930   000BBE  C01E  F019         	movff	smallmovement@mL,stop@mL
   931   000BC2  C01F  F01A         	movff	smallmovement@mL+1,stop@mL+1
   932   000BC6  C020  F01B         	movff	smallmovement@mR,stop@mR
   933   000BCA  C021  F01C         	movff	smallmovement@mR+1,stop@mR+1
   934   000BCE  EC6C  F006         	call	_stop	;wreg free
   935   000BD2  0012               	return		;funcret
   936   000BD4                     __end_of_smallmovement:
   937                           	callstack 0
   938                           
   939 ;; *************** function _savetime *****************
   940 ;; Defined at:
   941 ;;		line 305 in file "dc_motor.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;  timearray       2    0[COMRAM] PTR unsigned char 
   944 ;;		 -> main@timearray(100), 
   945 ;;  timercount      2    2[COMRAM] int 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;                  2    0[COMRAM] int 
   950 ;; Registers used:
   951 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   959 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   960 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   961 ;;Total ram usage:        6 bytes
   962 ;; Hardware stack levels used: 1
   963 ;; Hardware stack levels required when called: 1
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text2
   972   000F36                     __ptext2:
   973                           	callstack 0
   974   000F36                     _savetime:
   975                           	callstack 29
   976   000F36                     
   977                           ;dc_motor.c: 305: int savetime(char timearray[100], int timercount);dc_motor.c: 306: {;d
      +                          c_motor.c: 307:     T0CON0bits.T0EN=0;
   978   000F36  9ED5               	bcf	213,7,c	;volatile
   979   000F38                     
   980                           ;dc_motor.c: 308:     timearray[timeposition]=timercount;
   981   000F38  C059  F005         	movff	_timeposition,??_savetime
   982   000F3C  6A06               	clrf	(??_savetime+1)^0,c
   983   000F3E  BE05               	btfsc	??_savetime^0,7,c
   984   000F40  0606               	decf	(??_savetime+1)^0,f,c
   985   000F42  5005               	movf	??_savetime^0,w,c
   986   000F44  2401               	addwf	savetime@timearray^0,w,c
   987   000F46  6ED9               	movwf	fsr2l,c
   988   000F48  5006               	movf	(??_savetime+1)^0,w,c
   989   000F4A  2002               	addwfc	(savetime@timearray+1)^0,w,c
   990   000F4C  6EDA               	movwf	fsr2h,c
   991   000F4E  C003  FFDF         	movff	savetime@timercount,indf2
   992   000F52                     
   993                           ;dc_motor.c: 309:     timeposition++;
   994   000F52  2A59               	incf	_timeposition^0,f,c
   995   000F54                     
   996                           ;dc_motor.c: 311:     return timercount;
   997   000F54  0E00               	movlw	0
   998   000F56  6E02               	movwf	(?_savetime+1)^0,c
   999   000F58  0E00               	movlw	0
  1000   000F5A  6E01               	movwf	?_savetime^0,c
  1001   000F5C  0012               	return		;funcret
  1002   000F5E                     __end_of_savetime:
  1003                           	callstack 0
  1004                           
  1005 ;; *************** function _savepath *****************
  1006 ;; Defined at:
  1007 ;;		line 299 in file "dc_motor.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  path            2    0[COMRAM] PTR unsigned char 
  1010 ;;		 -> main@path(100), 
  1011 ;;  instruction     1    2[COMRAM] unsigned char 
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;		None
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1023 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1026 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1027 ;;Total ram usage:        5 bytes
  1028 ;; Hardware stack levels used: 1
  1029 ;; Hardware stack levels required when called: 1
  1030 ;; This function calls:
  1031 ;;		Nothing
  1032 ;; This function is called by:
  1033 ;;		_main
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           	psect	text3
  1038   000FCC                     __ptext3:
  1039                           	callstack 0
  1040   000FCC                     _savepath:
  1041                           	callstack 29
  1042   000FCC                     
  1043                           ;dc_motor.c: 299: void savepath(char path[100], char instruction);dc_motor.c: 300: {;dc_
      +                          motor.c: 301:     path[pathposition] = instruction;
  1044   000FCC  C058  F004         	movff	_pathposition,??_savepath
  1045   000FD0  6A05               	clrf	(??_savepath+1)^0,c
  1046   000FD2  BE04               	btfsc	??_savepath^0,7,c
  1047   000FD4  0605               	decf	(??_savepath+1)^0,f,c
  1048   000FD6  5004               	movf	??_savepath^0,w,c
  1049   000FD8  2401               	addwf	savepath@path^0,w,c
  1050   000FDA  6ED9               	movwf	fsr2l,c
  1051   000FDC  5005               	movf	(??_savepath+1)^0,w,c
  1052   000FDE  2002               	addwfc	(savepath@path+1)^0,w,c
  1053   000FE0  6EDA               	movwf	fsr2h,c
  1054   000FE2  C003  FFDF         	movff	savepath@instruction,indf2
  1055   000FE6                     
  1056                           ;dc_motor.c: 302:     pathposition++;
  1057   000FE6  2A58               	incf	_pathposition^0,f,c
  1058   000FE8  0012               	return		;funcret
  1059   000FEA                     __end_of_savepath:
  1060                           	callstack 0
  1061                           
  1062 ;; *************** function _returnhome *****************
  1063 ;; Defined at:
  1064 ;;		line 314 in file "dc_motor.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;  path            2   54[COMRAM] PTR unsigned char 
  1067 ;;		 -> main@path(100), 
  1068 ;;  motorL          9   56[COMRAM] struct DC_motor
  1069 ;;  motorR          9   65[COMRAM] struct DC_motor
  1070 ;;  timearray       2   74[COMRAM] PTR unsigned char 
  1071 ;;		 -> main@timearray(100), 
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;		None
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1083 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1085 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1086 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1087 ;;Total ram usage:       27 bytes
  1088 ;; Hardware stack levels used: 1
  1089 ;; Hardware stack levels required when called: 6
  1090 ;; This function calls:
  1091 ;;		_fullSpeedAhead
  1092 ;;		_returnstep
  1093 ;;		_square
  1094 ;;		_stop
  1095 ;; This function is called by:
  1096 ;;		_main
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text4
  1101   000306                     __ptext4:
  1102                           	callstack 0
  1103   000306                     _returnhome:
  1104                           	callstack 24
  1105   000306                     l2059:
  1106                           
  1107                           ;dc_motor.c: 314: void returnhome(char path[100], DC_motor motorL, DC_motor motorR, char
      +                           timearray[100]);dc_motor.c: 315: {;dc_motor.c: 316:     while (pathposition >= 0) {
  1108   000306  EF11  F002         	goto	l2075
  1109   00030A                     l2061:
  1110                           
  1111                           ;dc_motor.c: 319:     if (path[pathposition--] == 1) {
  1112   00030A  0658               	decf	_pathposition^0,f,c
  1113   00030C  2858               	incf	_pathposition^0,w,c
  1114   00030E  6E4D               	movwf	??_returnhome^0,c
  1115   000310  6A4E               	clrf	(??_returnhome+1)^0,c
  1116   000312  BE4D               	btfsc	??_returnhome^0,7,c
  1117   000314  064E               	decf	(??_returnhome+1)^0,f,c
  1118   000316  504D               	movf	??_returnhome^0,w,c
  1119   000318  2437               	addwf	returnhome@path^0,w,c
  1120   00031A  6ED9               	movwf	fsr2l,c
  1121   00031C  504E               	movf	(??_returnhome+1)^0,w,c
  1122   00031E  2038               	addwfc	(returnhome@path+1)^0,w,c
  1123   000320  6EDA               	movwf	fsr2h,c
  1124   000322  04DE               	decf	postinc2,w,c
  1125   000324  A4D8               	btfss	status,2,c
  1126   000326  EF97  F001         	goto	u751
  1127   00032A  EF99  F001         	goto	u750
  1128   00032E                     u751:
  1129   00032E  EFD0  F001         	goto	l2069
  1130   000332                     u750:
  1131   000332                     
  1132                           ;dc_motor.c: 321:     fullSpeedAhead(&motorL, &motorR, 0);
  1133   000332  0E39               	movlw	low returnhome@motorL
  1134   000334  6E19               	movwf	fullSpeedAhead@mL^0,c
  1135   000336  0E00               	movlw	high returnhome@motorL
  1136   000338  6E1A               	movwf	(fullSpeedAhead@mL+1)^0,c
  1137   00033A  0E42               	movlw	low returnhome@motorR
  1138   00033C  6E1B               	movwf	fullSpeedAhead@mR^0,c
  1139   00033E  0E00               	movlw	high returnhome@motorR
  1140   000340  6E1C               	movwf	(fullSpeedAhead@mR+1)^0,c
  1141   000342  0E00               	movlw	0
  1142   000344  6E1D               	movwf	fullSpeedAhead@dir^0,c
  1143   000346  EC2B  F005         	call	_fullSpeedAhead	;wreg free
  1144   00034A                     l2065:
  1145   00034A  0659               	decf	_timeposition^0,f,c
  1146   00034C  2859               	incf	_timeposition^0,w,c
  1147   00034E  6E4D               	movwf	??_returnhome^0,c
  1148   000350  6A4E               	clrf	(??_returnhome+1)^0,c
  1149   000352  BE4D               	btfsc	??_returnhome^0,7,c
  1150   000354  064E               	decf	(??_returnhome+1)^0,f,c
  1151   000356  504D               	movf	??_returnhome^0,w,c
  1152   000358  244B               	addwf	returnhome@timearray^0,w,c
  1153   00035A  6ED9               	movwf	fsr2l,c
  1154   00035C  504E               	movf	(??_returnhome+1)^0,w,c
  1155   00035E  204C               	addwfc	(returnhome@timearray+1)^0,w,c
  1156   000360  6EDA               	movwf	fsr2h,c
  1157   000362  50DF               	movf	indf2,w,c
  1158   000364  6E4F               	movwf	(??_returnhome+2)^0,c
  1159   000366  6A50               	clrf	(??_returnhome+3)^0,c
  1160   000368  504F               	movf	(??_returnhome+2)^0,w,c
  1161   00036A  5C56               	subwf	_timercount^0,w,c
  1162   00036C  5057               	movf	(_timercount+1)^0,w,c
  1163   00036E  0A80               	xorlw	128
  1164   000370  6E51               	movwf	(??_returnhome+4)^0,c
  1165   000372  5050               	movf	(??_returnhome+3)^0,w,c
  1166   000374  0A80               	xorlw	128
  1167   000376  5851               	subwfb	(??_returnhome+4)^0,w,c
  1168   000378  A0D8               	btfss	status,0,c
  1169   00037A  EFC1  F001         	goto	u761
  1170   00037E  EFC3  F001         	goto	u760
  1171   000382                     u761:
  1172   000382  EFA5  F001         	goto	l2065
  1173   000386                     u760:
  1174   000386                     
  1175                           ;dc_motor.c: 330:     T0CON0bits.T0EN=0;
  1176   000386  9ED5               	bcf	213,7,c	;volatile
  1177   000388                     
  1178                           ;dc_motor.c: 331:     stop(&motorL, &motorR);
  1179   000388  0E39               	movlw	low returnhome@motorL
  1180   00038A  6E19               	movwf	stop@mL^0,c
  1181   00038C  0E00               	movlw	high returnhome@motorL
  1182   00038E  6E1A               	movwf	(stop@mL+1)^0,c
  1183   000390  0E42               	movlw	low returnhome@motorR
  1184   000392  6E1B               	movwf	stop@mR^0,c
  1185   000394  0E00               	movlw	high returnhome@motorR
  1186   000396  6E1C               	movwf	(stop@mR+1)^0,c
  1187   000398  EC6C  F006         	call	_stop	;wreg free
  1188                           
  1189                           ;dc_motor.c: 332:     }
  1190   00039C  EF11  F002         	goto	l2075
  1191   0003A0                     l2069:
  1192   0003A0  C058  F04D         	movff	_pathposition,??_returnhome
  1193   0003A4  6A4E               	clrf	(??_returnhome+1)^0,c
  1194   0003A6  BE4D               	btfsc	??_returnhome^0,7,c
  1195   0003A8  064E               	decf	(??_returnhome+1)^0,f,c
  1196   0003AA  504D               	movf	??_returnhome^0,w,c
  1197   0003AC  2437               	addwf	returnhome@path^0,w,c
  1198   0003AE  6ED9               	movwf	fsr2l,c
  1199   0003B0  504E               	movf	(??_returnhome+1)^0,w,c
  1200   0003B2  2038               	addwfc	(returnhome@path+1)^0,w,c
  1201   0003B4  6EDA               	movwf	fsr2h,c
  1202   0003B6  04DE               	decf	postinc2,w,c
  1203   0003B8  B4D8               	btfsc	status,2,c
  1204   0003BA  EFE1  F001         	goto	u771
  1205   0003BE  EFE3  F001         	goto	u770
  1206   0003C2                     u771:
  1207   0003C2  EF11  F002         	goto	l2075
  1208   0003C6                     u770:
  1209   0003C6                     
  1210                           ;dc_motor.c: 336:     returnstep(path[pathposition], motorL, motorR);
  1211   0003C6  EE20  F039         	lfsr	2,returnhome@motorL
  1212   0003CA  EE00  F024         	lfsr	0,returnstep@motorL
  1213   0003CE  0E08               	movlw	8
  1214   0003D0                     u781:
  1215   0003D0  CFDB FFEB          	movff	plusw2,plusw0
  1216   0003D4  06E8               	decf	wreg,f,c
  1217   0003D6  E2FC               	bc	u781
  1218   0003D8  EE20  F042         	lfsr	2,returnhome@motorR
  1219   0003DC  EE00  F02D         	lfsr	0,returnstep@motorR
  1220   0003E0  0E08               	movlw	8
  1221   0003E2                     u791:
  1222   0003E2  CFDB FFEB          	movff	plusw2,plusw0
  1223   0003E6  06E8               	decf	wreg,f,c
  1224   0003E8  E2FC               	bc	u791
  1225   0003EA  C058  F04D         	movff	_pathposition,??_returnhome
  1226   0003EE  6A4E               	clrf	(??_returnhome+1)^0,c
  1227   0003F0  BE4D               	btfsc	??_returnhome^0,7,c
  1228   0003F2  064E               	decf	(??_returnhome+1)^0,f,c
  1229   0003F4  504D               	movf	??_returnhome^0,w,c
  1230   0003F6  2437               	addwf	returnhome@path^0,w,c
  1231   0003F8  6ED9               	movwf	fsr2l,c
  1232   0003FA  504E               	movf	(??_returnhome+1)^0,w,c
  1233   0003FC  2038               	addwfc	(returnhome@path+1)^0,w,c
  1234   0003FE  6EDA               	movwf	fsr2h,c
  1235   000400  50DF               	movf	indf2,w,c
  1236   000402  ECCA  F004         	call	_returnstep
  1237   000406                     
  1238                           ;dc_motor.c: 337:     square(&motorL, &motorR, 1);}
  1239   000406  0E39               	movlw	low returnhome@motorL
  1240   000408  6E1E               	movwf	square@mL^0,c
  1241   00040A  0E00               	movlw	high returnhome@motorL
  1242   00040C  6E1F               	movwf	(square@mL+1)^0,c
  1243   00040E  0E42               	movlw	low returnhome@motorR
  1244   000410  6E20               	movwf	square@mR^0,c
  1245   000412  0E00               	movlw	high returnhome@motorR
  1246   000414  6E21               	movwf	(square@mR+1)^0,c
  1247   000416  0E01               	movlw	1
  1248   000418  6E22               	movwf	square@dir^0,c
  1249   00041A  EC60  F004         	call	_square	;wreg free
  1250   00041E  EF83  F001         	goto	l2059
  1251   000422                     l2075:
  1252                           
  1253                           ;dc_motor.c: 316:     while (pathposition >= 0) {
  1254   000422  BE58               	btfsc	_pathposition^0,7,c
  1255   000424  EF18  F002         	goto	u800
  1256   000428  EF16  F002         	goto	u801
  1257   00042C                     u801:
  1258   00042C  EF85  F001         	goto	l2061
  1259   000430                     u800:
  1260   000430  0012               	return		;funcret
  1261   000432                     __end_of_returnhome:
  1262                           	callstack 0
  1263                           
  1264 ;; *************** function _square *****************
  1265 ;; Defined at:
  1266 ;;		line 247 in file "dc_motor.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  1269 ;;		 -> main@motorL(9), returnhome@motorL(9), 
  1270 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  1271 ;;		 -> main@motorR(9), returnhome@motorR(9), 
  1272 ;;  dir             1   33[COMRAM] unsigned char 
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1284 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;Total ram usage:        7 bytes
  1289 ;; Hardware stack levels used: 1
  1290 ;; Hardware stack levels required when called: 4
  1291 ;; This function calls:
  1292 ;;		_setMotorPWM
  1293 ;;		_stop
  1294 ;; This function is called by:
  1295 ;;		_returnhome
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text5
  1301   0008C0                     __ptext5:
  1302                           	callstack 0
  1303   0008C0                     _square:
  1304                           	callstack 26
  1305   0008C0                     
  1306                           ;dc_motor.c: 247: void square(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 248: {;d
      +                          c_motor.c: 249:     mL->direction = dir;
  1307   0008C0  EE20 F001          	lfsr	2,1
  1308   0008C4  501E               	movf	square@mL^0,w,c
  1309   0008C6  26D9               	addwf	fsr2l,f,c
  1310   0008C8  501F               	movf	(square@mL+1)^0,w,c
  1311   0008CA  22DA               	addwfc	fsr2h,f,c
  1312   0008CC  C022  FFDF         	movff	square@dir,indf2
  1313                           
  1314                           ;dc_motor.c: 250:     mR->direction = dir;
  1315   0008D0  EE20 F001          	lfsr	2,1
  1316   0008D4  5020               	movf	square@mR^0,w,c
  1317   0008D6  26D9               	addwf	fsr2l,f,c
  1318   0008D8  5021               	movf	(square@mR+1)^0,w,c
  1319   0008DA  22DA               	addwfc	fsr2h,f,c
  1320   0008DC  C022  FFDF         	movff	square@dir,indf2
  1321                           
  1322                           ;dc_motor.c: 252:     while (mL->power <= 50 || mR->power <= 50 ) {
  1323   0008E0  EF9B  F004         	goto	l1969
  1324   0008E4                     l1955:
  1325                           
  1326                           ;dc_motor.c: 253:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1327   0008E4  0ED0               	movlw	208
  1328   0008E6  6E23               	movwf	??_square^0,c
  1329   0008E8  0ECA               	movlw	202
  1330   0008EA                     u847:
  1331   0008EA  2EE8               	decfsz	wreg,f,c
  1332   0008EC  D7FE               	bra	u847
  1333   0008EE  2E23               	decfsz	??_square^0,f,c
  1334   0008F0  D7FC               	bra	u847
  1335   0008F2                     
  1336                           ;dc_motor.c: 254:         mL->power++;
  1337   0008F2  C01E  FFD9         	movff	square@mL,fsr2l
  1338   0008F6  C01F  FFDA         	movff	square@mL+1,fsr2h
  1339   0008FA  2ADF               	incf	indf2,f,c
  1340   0008FC                     
  1341                           ;dc_motor.c: 255:         mR->power++;
  1342   0008FC  C020  FFD9         	movff	square@mR,fsr2l
  1343   000900  C021  FFDA         	movff	square@mR+1,fsr2h
  1344   000904  2ADF               	incf	indf2,f,c
  1345   000906                     
  1346                           ;dc_motor.c: 256:         setMotorPWM(mL);
  1347   000906  C01E  F013         	movff	square@mL,setMotorPWM@m
  1348   00090A  C01F  F014         	movff	square@mL+1,setMotorPWM@m+1
  1349   00090E  ECCD  F000         	call	_setMotorPWM	;wreg free
  1350   000912                     
  1351                           ;dc_motor.c: 257:         setMotorPWM(mR);
  1352   000912  C020  F013         	movff	square@mR,setMotorPWM@m
  1353   000916  C021  F014         	movff	square@mR+1,setMotorPWM@m+1
  1354   00091A  ECCD  F000         	call	_setMotorPWM	;wreg free
  1355   00091E                     
  1356                           ;dc_motor.c: 259:     setMotorPWM(mL);
  1357   00091E  C01E  F013         	movff	square@mL,setMotorPWM@m
  1358   000922  C01F  F014         	movff	square@mL+1,setMotorPWM@m+1
  1359   000926  ECCD  F000         	call	_setMotorPWM	;wreg free
  1360   00092A                     
  1361                           ;dc_motor.c: 260:     setMotorPWM(mR);
  1362   00092A  C020  F013         	movff	square@mR,setMotorPWM@m
  1363   00092E  C021  F014         	movff	square@mR+1,setMotorPWM@m+1
  1364   000932  ECCD  F000         	call	_setMotorPWM	;wreg free
  1365   000936                     l1969:
  1366                           
  1367                           ;dc_motor.c: 252:     while (mL->power <= 50 || mR->power <= 50 ) {
  1368   000936  C01E  FFD9         	movff	square@mL,fsr2l
  1369   00093A  C01F  FFDA         	movff	square@mL+1,fsr2h
  1370   00093E  0E32               	movlw	50
  1371   000940  64DF               	cpfsgt	indf2,c
  1372   000942  EFA5  F004         	goto	u661
  1373   000946  EFA7  F004         	goto	u660
  1374   00094A                     u661:
  1375   00094A  EF72  F004         	goto	l1955
  1376   00094E                     u660:
  1377   00094E  C020  FFD9         	movff	square@mR,fsr2l
  1378   000952  C021  FFDA         	movff	square@mR+1,fsr2h
  1379   000956  0E32               	movlw	50
  1380   000958  64DF               	cpfsgt	indf2,c
  1381   00095A  EFB1  F004         	goto	u671
  1382   00095E  EFB3  F004         	goto	u670
  1383   000962                     u671:
  1384   000962  EF72  F004         	goto	l1955
  1385   000966                     u670:
  1386   000966                     
  1387                           ;dc_motor.c: 263:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1388   000966  0E11               	movlw	17
  1389   000968  6E24               	movwf	(??_square+1)^0,c
  1390   00096A  0E3C               	movlw	60
  1391   00096C  6E23               	movwf	??_square^0,c
  1392   00096E  0ECB               	movlw	203
  1393   000970                     u857:
  1394   000970  2EE8               	decfsz	wreg,f,c
  1395   000972  D7FE               	bra	u857
  1396   000974  2E23               	decfsz	??_square^0,f,c
  1397   000976  D7FC               	bra	u857
  1398   000978  2E24               	decfsz	(??_square+1)^0,f,c
  1399   00097A  D7FA               	bra	u857
  1400   00097C  F000               	nop	
  1401   00097E                     
  1402                           ;dc_motor.c: 264:     stop(mL, mR);
  1403   00097E  C01E  F019         	movff	square@mL,stop@mL
  1404   000982  C01F  F01A         	movff	square@mL+1,stop@mL+1
  1405   000986  C020  F01B         	movff	square@mR,stop@mR
  1406   00098A  C021  F01C         	movff	square@mR+1,stop@mR+1
  1407   00098E  EC6C  F006         	call	_stop	;wreg free
  1408   000992  0012               	return		;funcret
  1409   000994                     __end_of_square:
  1410                           	callstack 0
  1411                           
  1412 ;; *************** function _returnstep *****************
  1413 ;; Defined at:
  1414 ;;		line 341 in file "dc_motor.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  instruction     1    wreg     unsigned char 
  1417 ;;  motorL          9   35[COMRAM] struct DC_motor
  1418 ;;  motorR          9   44[COMRAM] struct DC_motor
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  instruction     1   53[COMRAM] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1430 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1433 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1434 ;;Total ram usage:       19 bytes
  1435 ;; Hardware stack levels used: 1
  1436 ;; Hardware stack levels required when called: 5
  1437 ;; This function calls:
  1438 ;;		_turn180
  1439 ;;		_turnLeft135
  1440 ;;		_turnLeft90
  1441 ;;		_turnRight135
  1442 ;;		_turnRight90
  1443 ;; This function is called by:
  1444 ;;		_returnhome
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text6
  1449   000994                     __ptext6:
  1450                           	callstack 0
  1451   000994                     _returnstep:
  1452                           	callstack 24
  1453                           
  1454                           ;incstack = 0
  1455                           ;returnstep@instruction stored from wreg
  1456   000994  6E36               	movwf	returnstep@instruction^0,c
  1457   000996                     
  1458                           ;dc_motor.c: 342:     if (instruction == 2) {turnLeft90(&motorL,&motorR);}
  1459   000996  0E02               	movlw	2
  1460   000998  1836               	xorwf	returnstep@instruction^0,w,c
  1461   00099A  A4D8               	btfss	status,2,c
  1462   00099C  EFD2  F004         	goto	u681
  1463   0009A0  EFD4  F004         	goto	u680
  1464   0009A4                     u681:
  1465   0009A4  EFDE  F004         	goto	l1981
  1466   0009A8                     u680:
  1467   0009A8  0E24               	movlw	low returnstep@motorL
  1468   0009AA  6E1E               	movwf	turnLeft90@mL^0,c
  1469   0009AC  0E00               	movlw	high returnstep@motorL
  1470   0009AE  6E1F               	movwf	(turnLeft90@mL+1)^0,c
  1471   0009B0  0E2D               	movlw	low returnstep@motorR
  1472   0009B2  6E20               	movwf	turnLeft90@mR^0,c
  1473   0009B4  0E00               	movlw	high returnstep@motorR
  1474   0009B6  6E21               	movwf	(turnLeft90@mR+1)^0,c
  1475   0009B8  EC19  F002         	call	_turnLeft90	;wreg free
  1476   0009BC                     l1981:
  1477                           
  1478                           ;dc_motor.c: 343:     if (instruction == 3) {turnRight90(&motorL,&motorR);}
  1479   0009BC  0E03               	movlw	3
  1480   0009BE  1836               	xorwf	returnstep@instruction^0,w,c
  1481   0009C0  A4D8               	btfss	status,2,c
  1482   0009C2  EFE5  F004         	goto	u691
  1483   0009C6  EFE7  F004         	goto	u690
  1484   0009CA                     u691:
  1485   0009CA  EFF1  F004         	goto	l1985
  1486   0009CE                     u690:
  1487   0009CE  0E24               	movlw	low returnstep@motorL
  1488   0009D0  6E1E               	movwf	turnRight90@mL^0,c
  1489   0009D2  0E00               	movlw	high returnstep@motorL
  1490   0009D4  6E1F               	movwf	(turnRight90@mL+1)^0,c
  1491   0009D6  0E2D               	movlw	low returnstep@motorR
  1492   0009D8  6E20               	movwf	turnRight90@mR^0,c
  1493   0009DA  0E00               	movlw	high returnstep@motorR
  1494   0009DC  6E21               	movwf	(turnRight90@mR+1)^0,c
  1495   0009DE  EC90  F002         	call	_turnRight90	;wreg free
  1496   0009E2                     l1985:
  1497                           
  1498                           ;dc_motor.c: 344:     if (instruction == 4) {turn180(&motorL,&motorR);}
  1499   0009E2  0E04               	movlw	4
  1500   0009E4  1836               	xorwf	returnstep@instruction^0,w,c
  1501   0009E6  A4D8               	btfss	status,2,c
  1502   0009E8  EFF8  F004         	goto	u701
  1503   0009EC  EFFA  F004         	goto	u700
  1504   0009F0                     u701:
  1505   0009F0  EF04  F005         	goto	l1989
  1506   0009F4                     u700:
  1507   0009F4  0E24               	movlw	low returnstep@motorL
  1508   0009F6  6E1E               	movwf	turn180@mL^0,c
  1509   0009F8  0E00               	movlw	high returnstep@motorL
  1510   0009FA  6E1F               	movwf	(turn180@mL+1)^0,c
  1511   0009FC  0E2D               	movlw	low returnstep@motorR
  1512   0009FE  6E20               	movwf	turn180@mR^0,c
  1513   000A00  0E00               	movlw	high returnstep@motorR
  1514   000A02  6E21               	movwf	(turn180@mR+1)^0,c
  1515   000A04  ECED  F003         	call	_turn180	;wreg free
  1516   000A08                     l1989:
  1517                           
  1518                           ;dc_motor.c: 345:     if (instruction == 5) {turnLeft135(&motorL,&motorR);}
  1519   000A08  0E05               	movlw	5
  1520   000A0A  1836               	xorwf	returnstep@instruction^0,w,c
  1521   000A0C  A4D8               	btfss	status,2,c
  1522   000A0E  EF0B  F005         	goto	u711
  1523   000A12  EF0D  F005         	goto	u710
  1524   000A16                     u711:
  1525   000A16  EF17  F005         	goto	l1993
  1526   000A1A                     u710:
  1527   000A1A  0E24               	movlw	low returnstep@motorL
  1528   000A1C  6E1E               	movwf	turnLeft135@mL^0,c
  1529   000A1E  0E00               	movlw	high returnstep@motorL
  1530   000A20  6E1F               	movwf	(turnLeft135@mL+1)^0,c
  1531   000A22  0E2D               	movlw	low returnstep@motorR
  1532   000A24  6E20               	movwf	turnLeft135@mR^0,c
  1533   000A26  0E00               	movlw	high returnstep@motorR
  1534   000A28  6E21               	movwf	(turnLeft135@mR+1)^0,c
  1535   000A2A  EC79  F003         	call	_turnLeft135	;wreg free
  1536   000A2E                     l1993:
  1537                           
  1538                           ;dc_motor.c: 346:     if (instruction == 6) {turnRight135(&motorL,&motorR);}
  1539   000A2E  0E06               	movlw	6
  1540   000A30  1836               	xorwf	returnstep@instruction^0,w,c
  1541   000A32  A4D8               	btfss	status,2,c
  1542   000A34  EF1E  F005         	goto	u721
  1543   000A38  EF20  F005         	goto	u720
  1544   000A3C                     u721:
  1545   000A3C  EF2A  F005         	goto	l209
  1546   000A40                     u720:
  1547   000A40  0E24               	movlw	low returnstep@motorL
  1548   000A42  6E1E               	movwf	turnRight135@mL^0,c
  1549   000A44  0E00               	movlw	high returnstep@motorL
  1550   000A46  6E1F               	movwf	(turnRight135@mL+1)^0,c
  1551   000A48  0E2D               	movlw	low returnstep@motorR
  1552   000A4A  6E20               	movwf	turnRight135@mR^0,c
  1553   000A4C  0E00               	movlw	high returnstep@motorR
  1554   000A4E  6E21               	movwf	(turnRight135@mR+1)^0,c
  1555   000A50  EC05  F003         	call	_turnRight135	;wreg free
  1556   000A54                     l209:
  1557   000A54  0012               	return		;funcret
  1558   000A56                     __end_of_returnstep:
  1559                           	callstack 0
  1560                           
  1561 ;; *************** function _turnRight90 *****************
  1562 ;; Defined at:
  1563 ;;		line 133 in file "dc_motor.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  1566 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1567 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  1568 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;		None
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  1    wreg      void 
  1573 ;; Registers used:
  1574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1580 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1583 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1584 ;;Total ram usage:        6 bytes
  1585 ;; Hardware stack levels used: 1
  1586 ;; Hardware stack levels required when called: 4
  1587 ;; This function calls:
  1588 ;;		_setMotorPWM
  1589 ;;		_stop
  1590 ;; This function is called by:
  1591 ;;		_returnstep
  1592 ;;		_main
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           	psect	text7
  1597   000520                     __ptext7:
  1598                           	callstack 0
  1599   000520                     _turnRight90:
  1600                           	callstack 26
  1601   000520                     
  1602                           ;dc_motor.c: 133: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 134: { stop(m
      +                          L, mR);
  1603   000520  C01E  F019         	movff	turnRight90@mL,stop@mL
  1604   000524  C01F  F01A         	movff	turnRight90@mL+1,stop@mL+1
  1605   000528  C020  F01B         	movff	turnRight90@mR,stop@mR
  1606   00052C  C021  F01C         	movff	turnRight90@mR+1,stop@mR+1
  1607   000530  EC6C  F006         	call	_stop	;wreg free
  1608   000534                     
  1609                           ;dc_motor.c: 136:     mL->direction = 1;
  1610   000534  EE20 F001          	lfsr	2,1
  1611   000538  501E               	movf	turnRight90@mL^0,w,c
  1612   00053A  26D9               	addwf	fsr2l,f,c
  1613   00053C  501F               	movf	(turnRight90@mL+1)^0,w,c
  1614   00053E  22DA               	addwfc	fsr2h,f,c
  1615   000540  0E01               	movlw	1
  1616   000542  6EDF               	movwf	indf2,c
  1617   000544                     
  1618                           ;dc_motor.c: 137:     mR->direction = 0;
  1619   000544  EE20 F001          	lfsr	2,1
  1620   000548  5020               	movf	turnRight90@mR^0,w,c
  1621   00054A  26D9               	addwf	fsr2l,f,c
  1622   00054C  5021               	movf	(turnRight90@mR+1)^0,w,c
  1623   00054E  22DA               	addwfc	fsr2h,f,c
  1624   000550  0E00               	movlw	0
  1625   000552  6EDF               	movwf	indf2,c
  1626   000554                     
  1627                           ;dc_motor.c: 139:     mL->power = 20;
  1628   000554  C01E  FFD9         	movff	turnRight90@mL,fsr2l
  1629   000558  C01F  FFDA         	movff	turnRight90@mL+1,fsr2h
  1630   00055C  0E14               	movlw	20
  1631   00055E  6EDF               	movwf	indf2,c
  1632   000560                     
  1633                           ;dc_motor.c: 140:     mR->power = 20;
  1634   000560  C020  FFD9         	movff	turnRight90@mR,fsr2l
  1635   000564  C021  FFDA         	movff	turnRight90@mR+1,fsr2h
  1636   000568  0E14               	movlw	20
  1637   00056A  6EDF               	movwf	indf2,c
  1638                           
  1639                           ;dc_motor.c: 142:     while (mL->power <= 50 && mR->power <= 50 ) {
  1640   00056C  EFD6  F002         	goto	l1811
  1641   000570                     l1801:
  1642                           
  1643                           ;dc_motor.c: 143:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1644   000570  0E68               	movlw	104
  1645   000572  6E22               	movwf	??_turnRight90^0,c
  1646   000574  0EE4               	movlw	228
  1647   000576                     u867:
  1648   000576  2EE8               	decfsz	wreg,f,c
  1649   000578  D7FE               	bra	u867
  1650   00057A  2E22               	decfsz	??_turnRight90^0,f,c
  1651   00057C  D7FC               	bra	u867
  1652   00057E  D000               	nop2	
  1653   000580                     
  1654                           ;dc_motor.c: 144:         mL->power++;
  1655   000580  C01E  FFD9         	movff	turnRight90@mL,fsr2l
  1656   000584  C01F  FFDA         	movff	turnRight90@mL+1,fsr2h
  1657   000588  2ADF               	incf	indf2,f,c
  1658   00058A                     
  1659                           ;dc_motor.c: 145:         mR->power++;
  1660   00058A  C020  FFD9         	movff	turnRight90@mR,fsr2l
  1661   00058E  C021  FFDA         	movff	turnRight90@mR+1,fsr2h
  1662   000592  2ADF               	incf	indf2,f,c
  1663   000594                     
  1664                           ;dc_motor.c: 146:         setMotorPWM(mL);
  1665   000594  C01E  F013         	movff	turnRight90@mL,setMotorPWM@m
  1666   000598  C01F  F014         	movff	turnRight90@mL+1,setMotorPWM@m+1
  1667   00059C  ECCD  F000         	call	_setMotorPWM	;wreg free
  1668   0005A0                     
  1669                           ;dc_motor.c: 147:         setMotorPWM(mR);
  1670   0005A0  C020  F013         	movff	turnRight90@mR,setMotorPWM@m
  1671   0005A4  C021  F014         	movff	turnRight90@mR+1,setMotorPWM@m+1
  1672   0005A8  ECCD  F000         	call	_setMotorPWM	;wreg free
  1673   0005AC                     l1811:
  1674                           
  1675                           ;dc_motor.c: 142:     while (mL->power <= 50 && mR->power <= 50 ) {
  1676   0005AC  C01E  FFD9         	movff	turnRight90@mL,fsr2l
  1677   0005B0  C01F  FFDA         	movff	turnRight90@mL+1,fsr2h
  1678   0005B4  0E33               	movlw	51
  1679   0005B6  60DF               	cpfslt	indf2,c
  1680   0005B8  EFE0  F002         	goto	u531
  1681   0005BC  EFE2  F002         	goto	u530
  1682   0005C0                     u531:
  1683   0005C0  EFEE  F002         	goto	l1815
  1684   0005C4                     u530:
  1685   0005C4  C020  FFD9         	movff	turnRight90@mR,fsr2l
  1686   0005C8  C021  FFDA         	movff	turnRight90@mR+1,fsr2h
  1687   0005CC  0E32               	movlw	50
  1688   0005CE  64DF               	cpfsgt	indf2,c
  1689   0005D0  EFEC  F002         	goto	u541
  1690   0005D4  EFEE  F002         	goto	u540
  1691   0005D8                     u541:
  1692   0005D8  EFB8  F002         	goto	l1801
  1693   0005DC                     u540:
  1694   0005DC                     l1815:
  1695                           
  1696                           ;dc_motor.c: 150:     _delay((unsigned long)((160)*(64000000/4000.0)));
  1697   0005DC  0E0D               	movlw	13
  1698   0005DE  6E23               	movwf	(??_turnRight90+1)^0,c
  1699   0005E0  0EFD               	movlw	253
  1700   0005E2  6E22               	movwf	??_turnRight90^0,c
  1701   0005E4  0EA2               	movlw	162
  1702   0005E6                     u877:
  1703   0005E6  2EE8               	decfsz	wreg,f,c
  1704   0005E8  D7FE               	bra	u877
  1705   0005EA  2E22               	decfsz	??_turnRight90^0,f,c
  1706   0005EC  D7FC               	bra	u877
  1707   0005EE  2E23               	decfsz	(??_turnRight90+1)^0,f,c
  1708   0005F0  D7FA               	bra	u877
  1709   0005F2  D000               	nop2	
  1710   0005F4                     
  1711                           ;dc_motor.c: 152:     stop(mL, mR);
  1712   0005F4  C01E  F019         	movff	turnRight90@mL,stop@mL
  1713   0005F8  C01F  F01A         	movff	turnRight90@mL+1,stop@mL+1
  1714   0005FC  C020  F01B         	movff	turnRight90@mR,stop@mR
  1715   000600  C021  F01C         	movff	turnRight90@mR+1,stop@mR+1
  1716   000604  EC6C  F006         	call	_stop	;wreg free
  1717   000608  0012               	return		;funcret
  1718   00060A                     __end_of_turnRight90:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _turnRight135 *****************
  1722 ;; Defined at:
  1723 ;;		line 181 in file "dc_motor.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  1726 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1727 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  1728 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;Total ram usage:        6 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; Hardware stack levels required when called: 4
  1747 ;; This function calls:
  1748 ;;		_setMotorPWM
  1749 ;;		_stop
  1750 ;; This function is called by:
  1751 ;;		_returnstep
  1752 ;;		_main
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text8
  1757   00060A                     __ptext8:
  1758                           	callstack 0
  1759   00060A                     _turnRight135:
  1760                           	callstack 26
  1761   00060A                     
  1762                           ;dc_motor.c: 181: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 182: {;dc_mo
      +                          tor.c: 183:     stop(mL, mR);
  1763   00060A  C01E  F019         	movff	turnRight135@mL,stop@mL
  1764   00060E  C01F  F01A         	movff	turnRight135@mL+1,stop@mL+1
  1765   000612  C020  F01B         	movff	turnRight135@mR,stop@mR
  1766   000616  C021  F01C         	movff	turnRight135@mR+1,stop@mR+1
  1767   00061A  EC6C  F006         	call	_stop	;wreg free
  1768   00061E                     
  1769                           ;dc_motor.c: 185:     mL->direction = 1;
  1770   00061E  EE20 F001          	lfsr	2,1
  1771   000622  501E               	movf	turnRight135@mL^0,w,c
  1772   000624  26D9               	addwf	fsr2l,f,c
  1773   000626  501F               	movf	(turnRight135@mL+1)^0,w,c
  1774   000628  22DA               	addwfc	fsr2h,f,c
  1775   00062A  0E01               	movlw	1
  1776   00062C  6EDF               	movwf	indf2,c
  1777   00062E                     
  1778                           ;dc_motor.c: 186:     mR->direction = 0;
  1779   00062E  EE20 F001          	lfsr	2,1
  1780   000632  5020               	movf	turnRight135@mR^0,w,c
  1781   000634  26D9               	addwf	fsr2l,f,c
  1782   000636  5021               	movf	(turnRight135@mR+1)^0,w,c
  1783   000638  22DA               	addwfc	fsr2h,f,c
  1784   00063A  0E00               	movlw	0
  1785   00063C  6EDF               	movwf	indf2,c
  1786   00063E                     
  1787                           ;dc_motor.c: 188:     mL->power = 20;
  1788   00063E  C01E  FFD9         	movff	turnRight135@mL,fsr2l
  1789   000642  C01F  FFDA         	movff	turnRight135@mL+1,fsr2h
  1790   000646  0E14               	movlw	20
  1791   000648  6EDF               	movwf	indf2,c
  1792   00064A                     
  1793                           ;dc_motor.c: 189:     mR->power = 20;
  1794   00064A  C020  FFD9         	movff	turnRight135@mR,fsr2l
  1795   00064E  C021  FFDA         	movff	turnRight135@mR+1,fsr2h
  1796   000652  0E14               	movlw	20
  1797   000654  6EDF               	movwf	indf2,c
  1798                           
  1799                           ;dc_motor.c: 191:     while (mL->power <= 50 || mR->power <= 50) {
  1800   000656  EF4A  F003         	goto	l1867
  1801   00065A                     l1857:
  1802                           
  1803                           ;dc_motor.c: 192:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1804   00065A  0ED0               	movlw	208
  1805   00065C  6E22               	movwf	??_turnRight135^0,c
  1806   00065E  0ECA               	movlw	202
  1807   000660                     u887:
  1808   000660  2EE8               	decfsz	wreg,f,c
  1809   000662  D7FE               	bra	u887
  1810   000664  2E22               	decfsz	??_turnRight135^0,f,c
  1811   000666  D7FC               	bra	u887
  1812   000668                     
  1813                           ;dc_motor.c: 193:         mL->power++;
  1814   000668  C01E  FFD9         	movff	turnRight135@mL,fsr2l
  1815   00066C  C01F  FFDA         	movff	turnRight135@mL+1,fsr2h
  1816   000670  2ADF               	incf	indf2,f,c
  1817   000672                     
  1818                           ;dc_motor.c: 194:         mR->power++;
  1819   000672  C020  FFD9         	movff	turnRight135@mR,fsr2l
  1820   000676  C021  FFDA         	movff	turnRight135@mR+1,fsr2h
  1821   00067A  2ADF               	incf	indf2,f,c
  1822   00067C                     
  1823                           ;dc_motor.c: 195:         setMotorPWM(mL);
  1824   00067C  C01E  F013         	movff	turnRight135@mL,setMotorPWM@m
  1825   000680  C01F  F014         	movff	turnRight135@mL+1,setMotorPWM@m+1
  1826   000684  ECCD  F000         	call	_setMotorPWM	;wreg free
  1827   000688                     
  1828                           ;dc_motor.c: 196:         setMotorPWM(mR);
  1829   000688  C020  F013         	movff	turnRight135@mR,setMotorPWM@m
  1830   00068C  C021  F014         	movff	turnRight135@mR+1,setMotorPWM@m+1
  1831   000690  ECCD  F000         	call	_setMotorPWM	;wreg free
  1832   000694                     l1867:
  1833                           
  1834                           ;dc_motor.c: 191:     while (mL->power <= 50 || mR->power <= 50) {
  1835   000694  C01E  FFD9         	movff	turnRight135@mL,fsr2l
  1836   000698  C01F  FFDA         	movff	turnRight135@mL+1,fsr2h
  1837   00069C  0E32               	movlw	50
  1838   00069E  64DF               	cpfsgt	indf2,c
  1839   0006A0  EF54  F003         	goto	u571
  1840   0006A4  EF56  F003         	goto	u570
  1841   0006A8                     u571:
  1842   0006A8  EF2D  F003         	goto	l1857
  1843   0006AC                     u570:
  1844   0006AC  C020  FFD9         	movff	turnRight135@mR,fsr2l
  1845   0006B0  C021  FFDA         	movff	turnRight135@mR+1,fsr2h
  1846   0006B4  0E32               	movlw	50
  1847   0006B6  64DF               	cpfsgt	indf2,c
  1848   0006B8  EF60  F003         	goto	u581
  1849   0006BC  EF62  F003         	goto	u580
  1850   0006C0                     u581:
  1851   0006C0  EF2D  F003         	goto	l1857
  1852   0006C4                     u580:
  1853   0006C4                     
  1854                           ;dc_motor.c: 199:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1855   0006C4  0E29               	movlw	41
  1856   0006C6  6E23               	movwf	(??_turnRight135+1)^0,c
  1857   0006C8  0E96               	movlw	150
  1858   0006CA  6E22               	movwf	??_turnRight135^0,c
  1859   0006CC  0E7F               	movlw	127
  1860   0006CE                     u897:
  1861   0006CE  2EE8               	decfsz	wreg,f,c
  1862   0006D0  D7FE               	bra	u897
  1863   0006D2  2E22               	decfsz	??_turnRight135^0,f,c
  1864   0006D4  D7FC               	bra	u897
  1865   0006D6  2E23               	decfsz	(??_turnRight135+1)^0,f,c
  1866   0006D8  D7FA               	bra	u897
  1867   0006DA  F000               	nop	
  1868   0006DC                     
  1869                           ;dc_motor.c: 200:     stop(mL, mR);
  1870   0006DC  C01E  F019         	movff	turnRight135@mL,stop@mL
  1871   0006E0  C01F  F01A         	movff	turnRight135@mL+1,stop@mL+1
  1872   0006E4  C020  F01B         	movff	turnRight135@mR,stop@mR
  1873   0006E8  C021  F01C         	movff	turnRight135@mR+1,stop@mR+1
  1874   0006EC  EC6C  F006         	call	_stop	;wreg free
  1875   0006F0  0012               	return		;funcret
  1876   0006F2                     __end_of_turnRight135:
  1877                           	callstack 0
  1878                           
  1879 ;; *************** function _turnLeft90 *****************
  1880 ;; Defined at:
  1881 ;;		line 110 in file "dc_motor.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  1884 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1885 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  1886 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1898 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;Total ram usage:        6 bytes
  1903 ;; Hardware stack levels used: 1
  1904 ;; Hardware stack levels required when called: 4
  1905 ;; This function calls:
  1906 ;;		_setMotorPWM
  1907 ;;		_stop
  1908 ;; This function is called by:
  1909 ;;		_returnstep
  1910 ;;		_main
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text9
  1915   000432                     __ptext9:
  1916                           	callstack 0
  1917   000432                     _turnLeft90:
  1918                           	callstack 26
  1919   000432                     
  1920                           ;dc_motor.c: 110: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 111: { stop(mL
      +                          , mR);
  1921   000432  C01E  F019         	movff	turnLeft90@mL,stop@mL
  1922   000436  C01F  F01A         	movff	turnLeft90@mL+1,stop@mL+1
  1923   00043A  C020  F01B         	movff	turnLeft90@mR,stop@mR
  1924   00043E  C021  F01C         	movff	turnLeft90@mR+1,stop@mR+1
  1925   000442  EC6C  F006         	call	_stop	;wreg free
  1926   000446                     
  1927                           ;dc_motor.c: 113:     mL->direction = 0;
  1928   000446  EE20 F001          	lfsr	2,1
  1929   00044A  501E               	movf	turnLeft90@mL^0,w,c
  1930   00044C  26D9               	addwf	fsr2l,f,c
  1931   00044E  501F               	movf	(turnLeft90@mL+1)^0,w,c
  1932   000450  22DA               	addwfc	fsr2h,f,c
  1933   000452  0E00               	movlw	0
  1934   000454  6EDF               	movwf	indf2,c
  1935   000456                     
  1936                           ;dc_motor.c: 114:     mR->direction = 1;
  1937   000456  EE20 F001          	lfsr	2,1
  1938   00045A  5020               	movf	turnLeft90@mR^0,w,c
  1939   00045C  26D9               	addwf	fsr2l,f,c
  1940   00045E  5021               	movf	(turnLeft90@mR+1)^0,w,c
  1941   000460  22DA               	addwfc	fsr2h,f,c
  1942   000462  0E01               	movlw	1
  1943   000464  6EDF               	movwf	indf2,c
  1944   000466                     
  1945                           ;dc_motor.c: 116:     mL->power = 20;
  1946   000466  C01E  FFD9         	movff	turnLeft90@mL,fsr2l
  1947   00046A  C01F  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1948   00046E  0E14               	movlw	20
  1949   000470  6EDF               	movwf	indf2,c
  1950   000472                     
  1951                           ;dc_motor.c: 117:     mR->power = 20;
  1952   000472  C020  FFD9         	movff	turnLeft90@mR,fsr2l
  1953   000476  C021  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1954   00047A  0E14               	movlw	20
  1955   00047C  6EDF               	movwf	indf2,c
  1956                           
  1957                           ;dc_motor.c: 119:     while (mL->power != 50 || mR->power != 50 ) {
  1958   00047E  EF5F  F002         	goto	l1783
  1959   000482                     l1773:
  1960                           
  1961                           ;dc_motor.c: 120:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1962   000482  0E68               	movlw	104
  1963   000484  6E22               	movwf	??_turnLeft90^0,c
  1964   000486  0EE4               	movlw	228
  1965   000488                     u907:
  1966   000488  2EE8               	decfsz	wreg,f,c
  1967   00048A  D7FE               	bra	u907
  1968   00048C  2E22               	decfsz	??_turnLeft90^0,f,c
  1969   00048E  D7FC               	bra	u907
  1970   000490  D000               	nop2	
  1971   000492                     
  1972                           ;dc_motor.c: 121:         mL->power++;
  1973   000492  C01E  FFD9         	movff	turnLeft90@mL,fsr2l
  1974   000496  C01F  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1975   00049A  2ADF               	incf	indf2,f,c
  1976   00049C                     
  1977                           ;dc_motor.c: 122:         mR->power++;
  1978   00049C  C020  FFD9         	movff	turnLeft90@mR,fsr2l
  1979   0004A0  C021  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1980   0004A4  2ADF               	incf	indf2,f,c
  1981   0004A6                     
  1982                           ;dc_motor.c: 123:         setMotorPWM(mL);
  1983   0004A6  C01E  F013         	movff	turnLeft90@mL,setMotorPWM@m
  1984   0004AA  C01F  F014         	movff	turnLeft90@mL+1,setMotorPWM@m+1
  1985   0004AE  ECCD  F000         	call	_setMotorPWM	;wreg free
  1986   0004B2                     
  1987                           ;dc_motor.c: 124:         setMotorPWM(mR);
  1988   0004B2  C020  F013         	movff	turnLeft90@mR,setMotorPWM@m
  1989   0004B6  C021  F014         	movff	turnLeft90@mR+1,setMotorPWM@m+1
  1990   0004BA  ECCD  F000         	call	_setMotorPWM	;wreg free
  1991   0004BE                     l1783:
  1992                           
  1993                           ;dc_motor.c: 119:     while (mL->power != 50 || mR->power != 50 ) {
  1994   0004BE  C01E  FFD9         	movff	turnLeft90@mL,fsr2l
  1995   0004C2  C01F  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1996   0004C6  0E32               	movlw	50
  1997   0004C8  18DE               	xorwf	postinc2,w,c
  1998   0004CA  A4D8               	btfss	status,2,c
  1999   0004CC  EF6A  F002         	goto	u511
  2000   0004D0  EF6C  F002         	goto	u510
  2001   0004D4                     u511:
  2002   0004D4  EF41  F002         	goto	l1773
  2003   0004D8                     u510:
  2004   0004D8  C020  FFD9         	movff	turnLeft90@mR,fsr2l
  2005   0004DC  C021  FFDA         	movff	turnLeft90@mR+1,fsr2h
  2006   0004E0  0E32               	movlw	50
  2007   0004E2  18DE               	xorwf	postinc2,w,c
  2008   0004E4  A4D8               	btfss	status,2,c
  2009   0004E6  EF77  F002         	goto	u521
  2010   0004EA  EF79  F002         	goto	u520
  2011   0004EE                     u521:
  2012   0004EE  EF41  F002         	goto	l1773
  2013   0004F2                     u520:
  2014   0004F2                     
  2015                           ;dc_motor.c: 127:     _delay((unsigned long)((160)*(64000000/4000.0)));
  2016   0004F2  0E0D               	movlw	13
  2017   0004F4  6E23               	movwf	(??_turnLeft90+1)^0,c
  2018   0004F6  0EFD               	movlw	253
  2019   0004F8  6E22               	movwf	??_turnLeft90^0,c
  2020   0004FA  0EA2               	movlw	162
  2021   0004FC                     u917:
  2022   0004FC  2EE8               	decfsz	wreg,f,c
  2023   0004FE  D7FE               	bra	u917
  2024   000500  2E22               	decfsz	??_turnLeft90^0,f,c
  2025   000502  D7FC               	bra	u917
  2026   000504  2E23               	decfsz	(??_turnLeft90+1)^0,f,c
  2027   000506  D7FA               	bra	u917
  2028   000508  D000               	nop2	
  2029   00050A                     
  2030                           ;dc_motor.c: 129:     stop(mL, mR);
  2031   00050A  C01E  F019         	movff	turnLeft90@mL,stop@mL
  2032   00050E  C01F  F01A         	movff	turnLeft90@mL+1,stop@mL+1
  2033   000512  C020  F01B         	movff	turnLeft90@mR,stop@mR
  2034   000516  C021  F01C         	movff	turnLeft90@mR+1,stop@mR+1
  2035   00051A  EC6C  F006         	call	_stop	;wreg free
  2036   00051E  0012               	return		;funcret
  2037   000520                     __end_of_turnLeft90:
  2038                           	callstack 0
  2039                           
  2040 ;; *************** function _turnLeft135 *****************
  2041 ;; Defined at:
  2042 ;;		line 156 in file "dc_motor.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2045 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  2046 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2047 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2062 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2063 ;;Total ram usage:        6 bytes
  2064 ;; Hardware stack levels used: 1
  2065 ;; Hardware stack levels required when called: 4
  2066 ;; This function calls:
  2067 ;;		_setMotorPWM
  2068 ;;		_stop
  2069 ;; This function is called by:
  2070 ;;		_returnstep
  2071 ;;		_main
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           	psect	text10
  2076   0006F2                     __ptext10:
  2077                           	callstack 0
  2078   0006F2                     _turnLeft135:
  2079                           	callstack 26
  2080   0006F2                     
  2081                           ;dc_motor.c: 156: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 157: {;dc_mot
      +                          or.c: 158:     stop(mL, mR);
  2082   0006F2  C01E  F019         	movff	turnLeft135@mL,stop@mL
  2083   0006F6  C01F  F01A         	movff	turnLeft135@mL+1,stop@mL+1
  2084   0006FA  C020  F01B         	movff	turnLeft135@mR,stop@mR
  2085   0006FE  C021  F01C         	movff	turnLeft135@mR+1,stop@mR+1
  2086   000702  EC6C  F006         	call	_stop	;wreg free
  2087   000706                     
  2088                           ;dc_motor.c: 161:     mL->direction = 0;
  2089   000706  EE20 F001          	lfsr	2,1
  2090   00070A  501E               	movf	turnLeft135@mL^0,w,c
  2091   00070C  26D9               	addwf	fsr2l,f,c
  2092   00070E  501F               	movf	(turnLeft135@mL+1)^0,w,c
  2093   000710  22DA               	addwfc	fsr2h,f,c
  2094   000712  0E00               	movlw	0
  2095   000714  6EDF               	movwf	indf2,c
  2096   000716                     
  2097                           ;dc_motor.c: 162:     mR->direction = 1;
  2098   000716  EE20 F001          	lfsr	2,1
  2099   00071A  5020               	movf	turnLeft135@mR^0,w,c
  2100   00071C  26D9               	addwf	fsr2l,f,c
  2101   00071E  5021               	movf	(turnLeft135@mR+1)^0,w,c
  2102   000720  22DA               	addwfc	fsr2h,f,c
  2103   000722  0E01               	movlw	1
  2104   000724  6EDF               	movwf	indf2,c
  2105   000726                     
  2106                           ;dc_motor.c: 164:     mL->power = 20;
  2107   000726  C01E  FFD9         	movff	turnLeft135@mL,fsr2l
  2108   00072A  C01F  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2109   00072E  0E14               	movlw	20
  2110   000730  6EDF               	movwf	indf2,c
  2111   000732                     
  2112                           ;dc_motor.c: 165:     mR->power = 20;
  2113   000732  C020  FFD9         	movff	turnLeft135@mR,fsr2l
  2114   000736  C021  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2115   00073A  0E14               	movlw	20
  2116   00073C  6EDF               	movwf	indf2,c
  2117                           
  2118                           ;dc_motor.c: 167:     while (mL->power <= 50 || mR->power <= 50 ) {
  2119   00073E  EFBE  F003         	goto	l1839
  2120   000742                     l1829:
  2121                           
  2122                           ;dc_motor.c: 168:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2123   000742  0ED0               	movlw	208
  2124   000744  6E22               	movwf	??_turnLeft135^0,c
  2125   000746  0ECA               	movlw	202
  2126   000748                     u927:
  2127   000748  2EE8               	decfsz	wreg,f,c
  2128   00074A  D7FE               	bra	u927
  2129   00074C  2E22               	decfsz	??_turnLeft135^0,f,c
  2130   00074E  D7FC               	bra	u927
  2131   000750                     
  2132                           ;dc_motor.c: 169:         mL->power++;
  2133   000750  C01E  FFD9         	movff	turnLeft135@mL,fsr2l
  2134   000754  C01F  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2135   000758  2ADF               	incf	indf2,f,c
  2136   00075A                     
  2137                           ;dc_motor.c: 170:         mR->power++;
  2138   00075A  C020  FFD9         	movff	turnLeft135@mR,fsr2l
  2139   00075E  C021  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2140   000762  2ADF               	incf	indf2,f,c
  2141   000764                     
  2142                           ;dc_motor.c: 171:         setMotorPWM(mL);
  2143   000764  C01E  F013         	movff	turnLeft135@mL,setMotorPWM@m
  2144   000768  C01F  F014         	movff	turnLeft135@mL+1,setMotorPWM@m+1
  2145   00076C  ECCD  F000         	call	_setMotorPWM	;wreg free
  2146   000770                     
  2147                           ;dc_motor.c: 172:         setMotorPWM(mR);
  2148   000770  C020  F013         	movff	turnLeft135@mR,setMotorPWM@m
  2149   000774  C021  F014         	movff	turnLeft135@mR+1,setMotorPWM@m+1
  2150   000778  ECCD  F000         	call	_setMotorPWM	;wreg free
  2151   00077C                     l1839:
  2152                           
  2153                           ;dc_motor.c: 167:     while (mL->power <= 50 || mR->power <= 50 ) {
  2154   00077C  C01E  FFD9         	movff	turnLeft135@mL,fsr2l
  2155   000780  C01F  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2156   000784  0E32               	movlw	50
  2157   000786  64DF               	cpfsgt	indf2,c
  2158   000788  EFC8  F003         	goto	u551
  2159   00078C  EFCA  F003         	goto	u550
  2160   000790                     u551:
  2161   000790  EFA1  F003         	goto	l1829
  2162   000794                     u550:
  2163   000794  C020  FFD9         	movff	turnLeft135@mR,fsr2l
  2164   000798  C021  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2165   00079C  0E32               	movlw	50
  2166   00079E  64DF               	cpfsgt	indf2,c
  2167   0007A0  EFD4  F003         	goto	u561
  2168   0007A4  EFD6  F003         	goto	u560
  2169   0007A8                     u561:
  2170   0007A8  EFA1  F003         	goto	l1829
  2171   0007AC                     u560:
  2172   0007AC                     
  2173                           ;dc_motor.c: 175:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2174   0007AC  0E29               	movlw	41
  2175   0007AE  6E23               	movwf	(??_turnLeft135+1)^0,c
  2176   0007B0  0E96               	movlw	150
  2177   0007B2  6E22               	movwf	??_turnLeft135^0,c
  2178   0007B4  0E7F               	movlw	127
  2179   0007B6                     u937:
  2180   0007B6  2EE8               	decfsz	wreg,f,c
  2181   0007B8  D7FE               	bra	u937
  2182   0007BA  2E22               	decfsz	??_turnLeft135^0,f,c
  2183   0007BC  D7FC               	bra	u937
  2184   0007BE  2E23               	decfsz	(??_turnLeft135+1)^0,f,c
  2185   0007C0  D7FA               	bra	u937
  2186   0007C2  F000               	nop	
  2187   0007C4                     
  2188                           ;dc_motor.c: 176:     stop(mL, mR);
  2189   0007C4  C01E  F019         	movff	turnLeft135@mL,stop@mL
  2190   0007C8  C01F  F01A         	movff	turnLeft135@mL+1,stop@mL+1
  2191   0007CC  C020  F01B         	movff	turnLeft135@mR,stop@mR
  2192   0007D0  C021  F01C         	movff	turnLeft135@mR+1,stop@mR+1
  2193   0007D4  EC6C  F006         	call	_stop	;wreg free
  2194   0007D8  0012               	return		;funcret
  2195   0007DA                     __end_of_turnLeft135:
  2196                           	callstack 0
  2197                           
  2198 ;; *************** function _turn180 *****************
  2199 ;; Defined at:
  2200 ;;		line 203 in file "dc_motor.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2203 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  2204 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2205 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2220 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2221 ;;Total ram usage:        6 bytes
  2222 ;; Hardware stack levels used: 1
  2223 ;; Hardware stack levels required when called: 4
  2224 ;; This function calls:
  2225 ;;		_setMotorPWM
  2226 ;;		_stop
  2227 ;; This function is called by:
  2228 ;;		_returnstep
  2229 ;;		_main
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text11
  2234   0007DA                     __ptext11:
  2235                           	callstack 0
  2236   0007DA                     _turn180:
  2237                           	callstack 26
  2238   0007DA                     
  2239                           ;dc_motor.c: 203: void turn180(DC_motor *mL, DC_motor *mR);dc_motor.c: 204: {;dc_motor.c
      +                          : 205:     stop(mL, mR);
  2240   0007DA  C01E  F019         	movff	turn180@mL,stop@mL
  2241   0007DE  C01F  F01A         	movff	turn180@mL+1,stop@mL+1
  2242   0007E2  C020  F01B         	movff	turn180@mR,stop@mR
  2243   0007E6  C021  F01C         	movff	turn180@mR+1,stop@mR+1
  2244   0007EA  EC6C  F006         	call	_stop	;wreg free
  2245   0007EE                     
  2246                           ;dc_motor.c: 206:     mL->direction = 1;
  2247   0007EE  EE20 F001          	lfsr	2,1
  2248   0007F2  501E               	movf	turn180@mL^0,w,c
  2249   0007F4  26D9               	addwf	fsr2l,f,c
  2250   0007F6  501F               	movf	(turn180@mL+1)^0,w,c
  2251   0007F8  22DA               	addwfc	fsr2h,f,c
  2252   0007FA  0E01               	movlw	1
  2253   0007FC  6EDF               	movwf	indf2,c
  2254   0007FE                     
  2255                           ;dc_motor.c: 207:     mR->direction = 0;
  2256   0007FE  EE20 F001          	lfsr	2,1
  2257   000802  5020               	movf	turn180@mR^0,w,c
  2258   000804  26D9               	addwf	fsr2l,f,c
  2259   000806  5021               	movf	(turn180@mR+1)^0,w,c
  2260   000808  22DA               	addwfc	fsr2h,f,c
  2261   00080A  0E00               	movlw	0
  2262   00080C  6EDF               	movwf	indf2,c
  2263   00080E                     
  2264                           ;dc_motor.c: 209:     mL->power = 20;
  2265   00080E  C01E  FFD9         	movff	turn180@mL,fsr2l
  2266   000812  C01F  FFDA         	movff	turn180@mL+1,fsr2h
  2267   000816  0E14               	movlw	20
  2268   000818  6EDF               	movwf	indf2,c
  2269   00081A                     
  2270                           ;dc_motor.c: 210:     mR->power = 20;
  2271   00081A  C020  FFD9         	movff	turn180@mR,fsr2l
  2272   00081E  C021  FFDA         	movff	turn180@mR+1,fsr2h
  2273   000822  0E14               	movlw	20
  2274   000824  6EDF               	movwf	indf2,c
  2275                           
  2276                           ;dc_motor.c: 212:     while (mL->power <= 50 || mR->power <= 50 ) {
  2277   000826  EF32  F004         	goto	l1895
  2278   00082A                     l1885:
  2279                           
  2280                           ;dc_motor.c: 213:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2281   00082A  0ED0               	movlw	208
  2282   00082C  6E22               	movwf	??_turn180^0,c
  2283   00082E  0ECA               	movlw	202
  2284   000830                     u947:
  2285   000830  2EE8               	decfsz	wreg,f,c
  2286   000832  D7FE               	bra	u947
  2287   000834  2E22               	decfsz	??_turn180^0,f,c
  2288   000836  D7FC               	bra	u947
  2289   000838                     
  2290                           ;dc_motor.c: 214:         mL->power++;
  2291   000838  C01E  FFD9         	movff	turn180@mL,fsr2l
  2292   00083C  C01F  FFDA         	movff	turn180@mL+1,fsr2h
  2293   000840  2ADF               	incf	indf2,f,c
  2294   000842                     
  2295                           ;dc_motor.c: 215:         mR->power++;
  2296   000842  C020  FFD9         	movff	turn180@mR,fsr2l
  2297   000846  C021  FFDA         	movff	turn180@mR+1,fsr2h
  2298   00084A  2ADF               	incf	indf2,f,c
  2299   00084C                     
  2300                           ;dc_motor.c: 216:         setMotorPWM(mL);
  2301   00084C  C01E  F013         	movff	turn180@mL,setMotorPWM@m
  2302   000850  C01F  F014         	movff	turn180@mL+1,setMotorPWM@m+1
  2303   000854  ECCD  F000         	call	_setMotorPWM	;wreg free
  2304   000858                     
  2305                           ;dc_motor.c: 217:         setMotorPWM(mR);
  2306   000858  C020  F013         	movff	turn180@mR,setMotorPWM@m
  2307   00085C  C021  F014         	movff	turn180@mR+1,setMotorPWM@m+1
  2308   000860  ECCD  F000         	call	_setMotorPWM	;wreg free
  2309   000864                     l1895:
  2310                           
  2311                           ;dc_motor.c: 212:     while (mL->power <= 50 || mR->power <= 50 ) {
  2312   000864  C01E  FFD9         	movff	turn180@mL,fsr2l
  2313   000868  C01F  FFDA         	movff	turn180@mL+1,fsr2h
  2314   00086C  0E32               	movlw	50
  2315   00086E  64DF               	cpfsgt	indf2,c
  2316   000870  EF3C  F004         	goto	u591
  2317   000874  EF3E  F004         	goto	u590
  2318   000878                     u591:
  2319   000878  EF15  F004         	goto	l1885
  2320   00087C                     u590:
  2321   00087C  C020  FFD9         	movff	turn180@mR,fsr2l
  2322   000880  C021  FFDA         	movff	turn180@mR+1,fsr2h
  2323   000884  0E32               	movlw	50
  2324   000886  64DF               	cpfsgt	indf2,c
  2325   000888  EF48  F004         	goto	u601
  2326   00088C  EF4A  F004         	goto	u600
  2327   000890                     u601:
  2328   000890  EF15  F004         	goto	l1885
  2329   000894                     u600:
  2330   000894                     
  2331                           ;dc_motor.c: 219:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2332   000894  0E19               	movlw	25
  2333   000896  6E23               	movwf	(??_turn180+1)^0,c
  2334   000898  0E5A               	movlw	90
  2335   00089A  6E22               	movwf	??_turn180^0,c
  2336   00089C  0EB2               	movlw	178
  2337   00089E                     u957:
  2338   00089E  2EE8               	decfsz	wreg,f,c
  2339   0008A0  D7FE               	bra	u957
  2340   0008A2  2E22               	decfsz	??_turn180^0,f,c
  2341   0008A4  D7FC               	bra	u957
  2342   0008A6  2E23               	decfsz	(??_turn180+1)^0,f,c
  2343   0008A8  D7FA               	bra	u957
  2344   0008AA                     
  2345                           ;dc_motor.c: 220:     stop(mL, mR);
  2346   0008AA  C01E  F019         	movff	turn180@mL,stop@mL
  2347   0008AE  C01F  F01A         	movff	turn180@mL+1,stop@mL+1
  2348   0008B2  C020  F01B         	movff	turn180@mR,stop@mR
  2349   0008B6  C021  F01C         	movff	turn180@mR+1,stop@mR+1
  2350   0008BA  EC6C  F006         	call	_stop	;wreg free
  2351   0008BE  0012               	return		;funcret
  2352   0008C0                     __end_of_turn180:
  2353                           	callstack 0
  2354                           
  2355 ;; *************** function _stop *****************
  2356 ;; Defined at:
  2357 ;;		line 96 in file "dc_motor.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  2360 ;;		 -> main@motorL(9), returnstep@motorL(9), returnhome@motorL(9), 
  2361 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  2362 ;;		 -> main@motorR(9), returnstep@motorR(9), returnhome@motorR(9), 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      void 
  2367 ;; Registers used:
  2368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2374 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2377 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2378 ;;Total ram usage:        5 bytes
  2379 ;; Hardware stack levels used: 1
  2380 ;; Hardware stack levels required when called: 3
  2381 ;; This function calls:
  2382 ;;		_setMotorPWM
  2383 ;; This function is called by:
  2384 ;;		_turnLeft90
  2385 ;;		_turnRight90
  2386 ;;		_turnLeft135
  2387 ;;		_turnRight135
  2388 ;;		_turn180
  2389 ;;		_square
  2390 ;;		_smallmovement
  2391 ;;		_returnhome
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text12
  2396   000CD8                     __ptext12:
  2397                           	callstack 0
  2398   000CD8                     _stop:
  2399                           	callstack 26
  2400   000CD8                     
  2401                           ;dc_motor.c: 96: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 97: {;dc_motor.c: 99:
      +                               while (mL->power > 0 && mR->power > 0) {
  2402   000CD8  EF8C  F006         	goto	l1747
  2403   000CDC                     l1739:
  2404                           
  2405                           ;dc_motor.c: 100:     mL->power--;
  2406   000CDC  C019  FFD9         	movff	stop@mL,fsr2l
  2407   000CE0  C01A  FFDA         	movff	stop@mL+1,fsr2h
  2408   000CE4  06DF               	decf	indf2,f,c
  2409                           
  2410                           ;dc_motor.c: 101:     mR->power--;
  2411   000CE6  C01B  FFD9         	movff	stop@mR,fsr2l
  2412   000CEA  C01C  FFDA         	movff	stop@mR+1,fsr2h
  2413   000CEE  06DF               	decf	indf2,f,c
  2414   000CF0                     
  2415                           ;dc_motor.c: 102:     _delay((unsigned long)((1)*(64000000/4000.0)));
  2416   000CF0  0E15               	movlw	21
  2417   000CF2  6E1D               	movwf	??_stop^0,c
  2418   000CF4  0EC6               	movlw	198
  2419   000CF6                     u967:
  2420   000CF6  2EE8               	decfsz	wreg,f,c
  2421   000CF8  D7FE               	bra	u967
  2422   000CFA  2E1D               	decfsz	??_stop^0,f,c
  2423   000CFC  D7FC               	bra	u967
  2424   000CFE  D000               	nop2	
  2425   000D00                     
  2426                           ;dc_motor.c: 103:     setMotorPWM(mL);
  2427   000D00  C019  F013         	movff	stop@mL,setMotorPWM@m
  2428   000D04  C01A  F014         	movff	stop@mL+1,setMotorPWM@m+1
  2429   000D08  ECCD  F000         	call	_setMotorPWM	;wreg free
  2430   000D0C                     
  2431                           ;dc_motor.c: 104:     setMotorPWM(mR);
  2432   000D0C  C01B  F013         	movff	stop@mR,setMotorPWM@m
  2433   000D10  C01C  F014         	movff	stop@mR+1,setMotorPWM@m+1
  2434   000D14  ECCD  F000         	call	_setMotorPWM	;wreg free
  2435   000D18                     l1747:
  2436                           
  2437                           ;dc_motor.c: 99:     while (mL->power > 0 && mR->power > 0) {
  2438   000D18  C019  FFD9         	movff	stop@mL,fsr2l
  2439   000D1C  C01A  FFDA         	movff	stop@mL+1,fsr2h
  2440   000D20  50DF               	movf	indf2,w,c
  2441   000D22  B4D8               	btfsc	status,2,c
  2442   000D24  EF96  F006         	goto	u491
  2443   000D28  EF98  F006         	goto	u490
  2444   000D2C                     u491:
  2445   000D2C  EFA4  F006         	goto	l130
  2446   000D30                     u490:
  2447   000D30  C01B  FFD9         	movff	stop@mR,fsr2l
  2448   000D34  C01C  FFDA         	movff	stop@mR+1,fsr2h
  2449   000D38  50DF               	movf	indf2,w,c
  2450   000D3A  A4D8               	btfss	status,2,c
  2451   000D3C  EFA2  F006         	goto	u501
  2452   000D40  EFA4  F006         	goto	u500
  2453   000D44                     u501:
  2454   000D44  EF6E  F006         	goto	l1739
  2455   000D48                     u500:
  2456   000D48                     l130:
  2457   000D48  0012               	return		;funcret
  2458   000D4A                     __end_of_stop:
  2459                           	callstack 0
  2460                           
  2461 ;; *************** function _fullSpeedAhead *****************
  2462 ;; Defined at:
  2463 ;;		line 225 in file "dc_motor.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  2466 ;;		 -> main@motorL(9), returnhome@motorL(9), 
  2467 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  2468 ;;		 -> main@motorR(9), returnhome@motorR(9), 
  2469 ;;  dir             1   28[COMRAM] unsigned char 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;		None
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2481 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2483 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2484 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2485 ;;Total ram usage:        6 bytes
  2486 ;; Hardware stack levels used: 1
  2487 ;; Hardware stack levels required when called: 3
  2488 ;; This function calls:
  2489 ;;		_setMotorPWM
  2490 ;; This function is called by:
  2491 ;;		_returnhome
  2492 ;;		_main
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text13
  2497   000A56                     __ptext13:
  2498                           	callstack 0
  2499   000A56                     _fullSpeedAhead:
  2500                           	callstack 26
  2501   000A56                     
  2502                           ;dc_motor.c: 225: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 
      +                          226: {;dc_motor.c: 227:     mL->brakemode=1;
  2503   000A56  EE20 F002          	lfsr	2,2
  2504   000A5A  5019               	movf	fullSpeedAhead@mL^0,w,c
  2505   000A5C  26D9               	addwf	fsr2l,f,c
  2506   000A5E  501A               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2507   000A60  22DA               	addwfc	fsr2h,f,c
  2508   000A62  0E01               	movlw	1
  2509   000A64  6EDF               	movwf	indf2,c
  2510                           
  2511                           ;dc_motor.c: 228:     mR->brakemode=1;
  2512   000A66  EE20 F002          	lfsr	2,2
  2513   000A6A  501B               	movf	fullSpeedAhead@mR^0,w,c
  2514   000A6C  26D9               	addwf	fsr2l,f,c
  2515   000A6E  501C               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2516   000A70  22DA               	addwfc	fsr2h,f,c
  2517   000A72  0E01               	movlw	1
  2518   000A74  6EDF               	movwf	indf2,c
  2519                           
  2520                           ;dc_motor.c: 229:     mL->direction = dir;
  2521   000A76  EE20 F001          	lfsr	2,1
  2522   000A7A  5019               	movf	fullSpeedAhead@mL^0,w,c
  2523   000A7C  26D9               	addwf	fsr2l,f,c
  2524   000A7E  501A               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2525   000A80  22DA               	addwfc	fsr2h,f,c
  2526   000A82  C01D  FFDF         	movff	fullSpeedAhead@dir,indf2
  2527                           
  2528                           ;dc_motor.c: 230:     mR->direction = dir;
  2529   000A86  EE20 F001          	lfsr	2,1
  2530   000A8A  501B               	movf	fullSpeedAhead@mR^0,w,c
  2531   000A8C  26D9               	addwf	fsr2l,f,c
  2532   000A8E  501C               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2533   000A90  22DA               	addwfc	fsr2h,f,c
  2534   000A92  C01D  FFDF         	movff	fullSpeedAhead@dir,indf2
  2535                           
  2536                           ;dc_motor.c: 234:     while (mL->power <= 30 && mR->power <= 30 ) {
  2537   000A96  EF6A  F005         	goto	l1945
  2538   000A9A                     l1935:
  2539                           
  2540                           ;dc_motor.c: 235:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2541   000A9A  0ED0               	movlw	208
  2542   000A9C  6E1E               	movwf	??_fullSpeedAhead^0,c
  2543   000A9E  0ECA               	movlw	202
  2544   000AA0                     u977:
  2545   000AA0  2EE8               	decfsz	wreg,f,c
  2546   000AA2  D7FE               	bra	u977
  2547   000AA4  2E1E               	decfsz	??_fullSpeedAhead^0,f,c
  2548   000AA6  D7FC               	bra	u977
  2549   000AA8                     
  2550                           ;dc_motor.c: 236:         mL->power++;
  2551   000AA8  C019  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2552   000AAC  C01A  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2553   000AB0  2ADF               	incf	indf2,f,c
  2554   000AB2                     
  2555                           ;dc_motor.c: 237:         mR->power++;
  2556   000AB2  C01B  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2557   000AB6  C01C  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2558   000ABA  2ADF               	incf	indf2,f,c
  2559   000ABC                     
  2560                           ;dc_motor.c: 238:         setMotorPWM(mL);
  2561   000ABC  C019  F013         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2562   000AC0  C01A  F014         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2563   000AC4  ECCD  F000         	call	_setMotorPWM	;wreg free
  2564   000AC8                     
  2565                           ;dc_motor.c: 239:         setMotorPWM(mR);
  2566   000AC8  C01B  F013         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2567   000ACC  C01C  F014         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2568   000AD0  ECCD  F000         	call	_setMotorPWM	;wreg free
  2569   000AD4                     l1945:
  2570                           
  2571                           ;dc_motor.c: 234:     while (mL->power <= 30 && mR->power <= 30 ) {
  2572   000AD4  C019  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2573   000AD8  C01A  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2574   000ADC  0E1F               	movlw	31
  2575   000ADE  60DF               	cpfslt	indf2,c
  2576   000AE0  EF74  F005         	goto	u631
  2577   000AE4  EF76  F005         	goto	u630
  2578   000AE8                     u631:
  2579   000AE8  EF82  F005         	goto	l1949
  2580   000AEC                     u630:
  2581   000AEC  C01B  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2582   000AF0  C01C  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2583   000AF4  0E1E               	movlw	30
  2584   000AF6  64DF               	cpfsgt	indf2,c
  2585   000AF8  EF80  F005         	goto	u641
  2586   000AFC  EF82  F005         	goto	u640
  2587   000B00                     u641:
  2588   000B00  EF4D  F005         	goto	l1935
  2589   000B04                     u640:
  2590   000B04                     l1949:
  2591                           
  2592                           ;dc_motor.c: 242:     if (dir == 1 && T0CON0bits.T0EN == 0) {starttimer0;}
  2593   000B04  041D               	decf	fullSpeedAhead@dir^0,w,c
  2594   000B06  A4D8               	btfss	status,2,c
  2595   000B08  EF88  F005         	goto	u651
  2596   000B0C  EF8A  F005         	goto	u650
  2597   000B10                     u651:
  2598   000B10  EF8B  F005         	goto	l171
  2599   000B14                     u650:
  2600   000B14  50D5               	movf	213,w,c	;volatile
  2601   000B16                     l171:
  2602   000B16  0012               	return		;funcret
  2603   000B18                     __end_of_fullSpeedAhead:
  2604                           	callstack 0
  2605                           
  2606 ;; *************** function _setMotorPWM *****************
  2607 ;; Defined at:
  2608 ;;		line 73 in file "dc_motor.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  m               2   18[COMRAM] PTR struct DC_motor
  2611 ;;		 -> main@motorL(9), main@motorR(9), returnstep@motorR(9), returnstep@motorL(9), 
  2612 ;;		 -> returnhome@motorR(9), returnhome@motorL(9), 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  negDuty         1   23[COMRAM] unsigned char 
  2615 ;;  posDuty         1   22[COMRAM] unsigned char 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2625 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2626 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2628 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2629 ;;Total ram usage:        6 bytes
  2630 ;; Hardware stack levels used: 1
  2631 ;; Hardware stack levels required when called: 2
  2632 ;; This function calls:
  2633 ;;		___lwdiv
  2634 ;;		___wmul
  2635 ;; This function is called by:
  2636 ;;		_stop
  2637 ;;		_turnLeft90
  2638 ;;		_turnRight90
  2639 ;;		_turnLeft135
  2640 ;;		_turnRight135
  2641 ;;		_turn180
  2642 ;;		_fullSpeedAhead
  2643 ;;		_square
  2644 ;;		_smallmovement
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text14
  2649   00019A                     __ptext14:
  2650                           	callstack 0
  2651   00019A                     _setMotorPWM:
  2652                           	callstack 26
  2653   00019A                     
  2654                           ;dc_motor.c: 73: void setMotorPWM(DC_motor *m);dc_motor.c: 74: {;dc_motor.c: 75:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 77:     if(m->brakemode) {
  2655   00019A  EE20 F002          	lfsr	2,2
  2656   00019E  5013               	movf	setMotorPWM@m^0,w,c
  2657   0001A0  26D9               	addwf	fsr2l,f,c
  2658   0001A2  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2659   0001A4  22DA               	addwfc	fsr2h,f,c
  2660   0001A6  50DF               	movf	indf2,w,c
  2661   0001A8  B4D8               	btfsc	status,2,c
  2662   0001AA  EFD9  F000         	goto	u451
  2663   0001AE  EFDB  F000         	goto	u450
  2664   0001B2                     u451:
  2665   0001B2  EF0F  F001         	goto	l1723
  2666   0001B6                     u450:
  2667   0001B6                     
  2668                           ;dc_motor.c: 78:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2669   0001B6  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  2670   0001BA  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2671   0001BE  50DF               	movf	indf2,w,c
  2672   0001C0  6E15               	movwf	??_setMotorPWM^0,c
  2673   0001C2  5015               	movf	??_setMotorPWM^0,w,c
  2674   0001C4  6E01               	movwf	___wmul@multiplier^0,c
  2675   0001C6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2676   0001C8  EE20 F003          	lfsr	2,3
  2677   0001CC  5013               	movf	setMotorPWM@m^0,w,c
  2678   0001CE  26D9               	addwf	fsr2l,f,c
  2679   0001D0  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2680   0001D2  22DA               	addwfc	fsr2h,f,c
  2681   0001D4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2682   0001D8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2683   0001DC  ECC3  F007         	call	___wmul	;wreg free
  2684   0001E0  C001  F00C         	movff	?___wmul,___lwdiv@dividend
  2685   0001E4  C002  F00D         	movff	?___wmul+1,___lwdiv@dividend+1
  2686   0001E8  0E00               	movlw	0
  2687   0001EA  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  2688   0001EC  0E64               	movlw	100
  2689   0001EE  6E0E               	movwf	___lwdiv@divisor^0,c
  2690   0001F0  EC32  F006         	call	___lwdiv	;wreg free
  2691   0001F4  EE20 F003          	lfsr	2,3
  2692   0001F8  5013               	movf	setMotorPWM@m^0,w,c
  2693   0001FA  26D9               	addwf	fsr2l,f,c
  2694   0001FC  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2695   0001FE  22DA               	addwfc	fsr2h,f,c
  2696   000200  50DF               	movf	indf2,w,c
  2697   000202  6E16               	movwf	(??_setMotorPWM+1)^0,c
  2698   000204  500C               	movf	?___lwdiv^0,w,c
  2699   000206  5C16               	subwf	(??_setMotorPWM+1)^0,w,c
  2700   000208  6E17               	movwf	setMotorPWM@posDuty^0,c
  2701   00020A                     
  2702                           ;dc_motor.c: 79:         negDuty=m->PWMperiod;
  2703   00020A  EE20 F003          	lfsr	2,3
  2704   00020E  5013               	movf	setMotorPWM@m^0,w,c
  2705   000210  26D9               	addwf	fsr2l,f,c
  2706   000212  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2707   000214  22DA               	addwfc	fsr2h,f,c
  2708   000216  50DF               	movf	indf2,w,c
  2709   000218  6E18               	movwf	setMotorPWM@negDuty^0,c
  2710                           
  2711                           ;dc_motor.c: 80:     }
  2712   00021A  EF32  F001         	goto	l1727
  2713   00021E                     l1723:
  2714                           
  2715                           ;dc_motor.c: 82:         posDuty=0;
  2716   00021E  0E00               	movlw	0
  2717   000220  6E17               	movwf	setMotorPWM@posDuty^0,c
  2718   000222                     
  2719                           ;dc_motor.c: 83:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2720   000222  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  2721   000226  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2722   00022A  50DF               	movf	indf2,w,c
  2723   00022C  6E15               	movwf	??_setMotorPWM^0,c
  2724   00022E  5015               	movf	??_setMotorPWM^0,w,c
  2725   000230  6E01               	movwf	___wmul@multiplier^0,c
  2726   000232  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2727   000234  EE20 F003          	lfsr	2,3
  2728   000238  5013               	movf	setMotorPWM@m^0,w,c
  2729   00023A  26D9               	addwf	fsr2l,f,c
  2730   00023C  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2731   00023E  22DA               	addwfc	fsr2h,f,c
  2732   000240  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2733   000244  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2734   000248  ECC3  F007         	call	___wmul	;wreg free
  2735   00024C  C001  F00C         	movff	?___wmul,___lwdiv@dividend
  2736   000250  C002  F00D         	movff	?___wmul+1,___lwdiv@dividend+1
  2737   000254  0E00               	movlw	0
  2738   000256  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  2739   000258  0E64               	movlw	100
  2740   00025A  6E0E               	movwf	___lwdiv@divisor^0,c
  2741   00025C  EC32  F006         	call	___lwdiv	;wreg free
  2742   000260  500C               	movf	?___lwdiv^0,w,c
  2743   000262  6E18               	movwf	setMotorPWM@negDuty^0,c
  2744   000264                     l1727:
  2745                           
  2746                           ;dc_motor.c: 86:     if (m->direction) {
  2747   000264  EE20 F001          	lfsr	2,1
  2748   000268  5013               	movf	setMotorPWM@m^0,w,c
  2749   00026A  26D9               	addwf	fsr2l,f,c
  2750   00026C  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2751   00026E  22DA               	addwfc	fsr2h,f,c
  2752   000270  50DF               	movf	indf2,w,c
  2753   000272  B4D8               	btfsc	status,2,c
  2754   000274  EF3E  F001         	goto	u461
  2755   000278  EF40  F001         	goto	u460
  2756   00027C                     u461:
  2757   00027C  EF62  F001         	goto	l1731
  2758   000280                     u460:
  2759   000280                     
  2760                           ;dc_motor.c: 87:         *(m->posDutyHighByte)=posDuty;
  2761   000280  EE20 F005          	lfsr	2,5
  2762   000284  5013               	movf	setMotorPWM@m^0,w,c
  2763   000286  26D9               	addwf	fsr2l,f,c
  2764   000288  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2765   00028A  22DA               	addwfc	fsr2h,f,c
  2766   00028C  CFDE F015          	movff	postinc2,??_setMotorPWM
  2767   000290  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2768   000294  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2769   000298  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2770   00029C  C017  FFDF         	movff	setMotorPWM@posDuty,indf2
  2771                           
  2772                           ;dc_motor.c: 88:         *(m->negDutyHighByte)=negDuty;
  2773   0002A0  EE20 F007          	lfsr	2,7
  2774   0002A4  5013               	movf	setMotorPWM@m^0,w,c
  2775   0002A6  26D9               	addwf	fsr2l,f,c
  2776   0002A8  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2777   0002AA  22DA               	addwfc	fsr2h,f,c
  2778   0002AC  CFDE F015          	movff	postinc2,??_setMotorPWM
  2779   0002B0  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2780   0002B4  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2781   0002B8  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2782   0002BC  C018  FFDF         	movff	setMotorPWM@negDuty,indf2
  2783                           
  2784                           ;dc_motor.c: 89:     } else {
  2785   0002C0  EF82  F001         	goto	l122
  2786   0002C4                     l1731:
  2787                           
  2788                           ;dc_motor.c: 90:         *(m->posDutyHighByte)=negDuty;
  2789   0002C4  EE20 F005          	lfsr	2,5
  2790   0002C8  5013               	movf	setMotorPWM@m^0,w,c
  2791   0002CA  26D9               	addwf	fsr2l,f,c
  2792   0002CC  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2793   0002CE  22DA               	addwfc	fsr2h,f,c
  2794   0002D0  CFDE F015          	movff	postinc2,??_setMotorPWM
  2795   0002D4  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2796   0002D8  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2797   0002DC  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2798   0002E0  C018  FFDF         	movff	setMotorPWM@negDuty,indf2
  2799                           
  2800                           ;dc_motor.c: 91:         *(m->negDutyHighByte)=posDuty;
  2801   0002E4  EE20 F007          	lfsr	2,7
  2802   0002E8  5013               	movf	setMotorPWM@m^0,w,c
  2803   0002EA  26D9               	addwf	fsr2l,f,c
  2804   0002EC  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2805   0002EE  22DA               	addwfc	fsr2h,f,c
  2806   0002F0  CFDE F015          	movff	postinc2,??_setMotorPWM
  2807   0002F4  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2808   0002F8  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2809   0002FC  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2810   000300  C017  FFDF         	movff	setMotorPWM@posDuty,indf2
  2811   000304                     l122:
  2812   000304  0012               	return		;funcret
  2813   000306                     __end_of_setMotorPWM:
  2814                           	callstack 0
  2815                           
  2816 ;; *************** function ___wmul *****************
  2817 ;; Defined at:
  2818 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;  multiplier      2    0[COMRAM] unsigned int 
  2821 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;  product         2    4[COMRAM] unsigned int 
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  2    0[COMRAM] unsigned int 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2, status,0, prodl, prodh
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2833 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2834 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2836 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2837 ;;Total ram usage:        6 bytes
  2838 ;; Hardware stack levels used: 1
  2839 ;; Hardware stack levels required when called: 1
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_setMotorPWM
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           	psect	text15
  2848   000F86                     __ptext15:
  2849                           	callstack 0
  2850   000F86                     ___wmul:
  2851                           	callstack 26
  2852   000F86  5001               	movf	___wmul@multiplier^0,w,c
  2853   000F88  0203               	mulwf	___wmul@multiplicand^0,c
  2854   000F8A  CFF3 F005          	movff	prodl,___wmul@product
  2855   000F8E  CFF4 F006          	movff	prodh,___wmul@product+1
  2856   000F92  5001               	movf	___wmul@multiplier^0,w,c
  2857   000F94  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2858   000F96  50F3               	movf	243,w,c
  2859   000F98  2606               	addwf	(___wmul@product+1)^0,f,c
  2860   000F9A  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2861   000F9C  0203               	mulwf	___wmul@multiplicand^0,c
  2862   000F9E  50F3               	movf	243,w,c
  2863   000FA0  2606               	addwf	(___wmul@product+1)^0,f,c
  2864   000FA2  C005  F001         	movff	___wmul@product,?___wmul
  2865   000FA6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2866   000FAA  0012               	return		;funcret
  2867   000FAC                     __end_of___wmul:
  2868                           	callstack 0
  2869                           
  2870 ;; *************** function ___lwdiv *****************
  2871 ;; Defined at:
  2872 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  dividend        2   11[COMRAM] unsigned int 
  2875 ;;  divisor         2   13[COMRAM] unsigned int 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  quotient        2   15[COMRAM] unsigned int 
  2878 ;;  counter         1   17[COMRAM] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  2   11[COMRAM] unsigned int 
  2881 ;; Registers used:
  2882 ;;		wreg, status,2, status,0
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2888 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2889 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2891 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2892 ;;Total ram usage:        7 bytes
  2893 ;; Hardware stack levels used: 1
  2894 ;; Hardware stack levels required when called: 1
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_setMotorPWM
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           	psect	text16
  2904   000C64                     __ptext16:
  2905                           	callstack 0
  2906   000C64                     ___lwdiv:
  2907                           	callstack 26
  2908   000C64  0E00               	movlw	0
  2909   000C66  6E11               	movwf	(___lwdiv@quotient+1)^0,c
  2910   000C68  0E00               	movlw	0
  2911   000C6A  6E10               	movwf	___lwdiv@quotient^0,c
  2912   000C6C  500E               	movf	___lwdiv@divisor^0,w,c
  2913   000C6E  100F               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2914   000C70  B4D8               	btfsc	status,2,c
  2915   000C72  EF3D  F006         	goto	u421
  2916   000C76  EF3F  F006         	goto	u420
  2917   000C7A                     u421:
  2918   000C7A  EF67  F006         	goto	l895
  2919   000C7E                     u420:
  2920   000C7E  0E01               	movlw	1
  2921   000C80  6E12               	movwf	___lwdiv@counter^0,c
  2922   000C82  EF47  F006         	goto	l1703
  2923   000C86                     l1701:
  2924   000C86  90D8               	bcf	status,0,c
  2925   000C88  360E               	rlcf	___lwdiv@divisor^0,f,c
  2926   000C8A  360F               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2927   000C8C  2A12               	incf	___lwdiv@counter^0,f,c
  2928   000C8E                     l1703:
  2929   000C8E  AE0F               	btfss	(___lwdiv@divisor+1)^0,7,c
  2930   000C90  EF4C  F006         	goto	u431
  2931   000C94  EF4E  F006         	goto	u430
  2932   000C98                     u431:
  2933   000C98  EF43  F006         	goto	l1701
  2934   000C9C                     u430:
  2935   000C9C                     l1705:
  2936   000C9C  90D8               	bcf	status,0,c
  2937   000C9E  3610               	rlcf	___lwdiv@quotient^0,f,c
  2938   000CA0  3611               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2939   000CA2  500E               	movf	___lwdiv@divisor^0,w,c
  2940   000CA4  5C0C               	subwf	___lwdiv@dividend^0,w,c
  2941   000CA6  500F               	movf	(___lwdiv@divisor+1)^0,w,c
  2942   000CA8  580D               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2943   000CAA  A0D8               	btfss	status,0,c
  2944   000CAC  EF5A  F006         	goto	u441
  2945   000CB0  EF5C  F006         	goto	u440
  2946   000CB4                     u441:
  2947   000CB4  EF61  F006         	goto	l1713
  2948   000CB8                     u440:
  2949   000CB8  500E               	movf	___lwdiv@divisor^0,w,c
  2950   000CBA  5E0C               	subwf	___lwdiv@dividend^0,f,c
  2951   000CBC  500F               	movf	(___lwdiv@divisor+1)^0,w,c
  2952   000CBE  5A0D               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2953   000CC0  8010               	bsf	___lwdiv@quotient^0,0,c
  2954   000CC2                     l1713:
  2955   000CC2  90D8               	bcf	status,0,c
  2956   000CC4  320F               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2957   000CC6  320E               	rrcf	___lwdiv@divisor^0,f,c
  2958   000CC8  2E12               	decfsz	___lwdiv@counter^0,f,c
  2959   000CCA  EF4E  F006         	goto	l1705
  2960   000CCE                     l895:
  2961   000CCE  C010  F00C         	movff	___lwdiv@quotient,?___lwdiv
  2962   000CD2  C011  F00D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2963   000CD6  0012               	return		;funcret
  2964   000CD8                     __end_of___lwdiv:
  2965                           	callstack 0
  2966                           
  2967 ;; *************** function _initDCmotorsPWM *****************
  2968 ;; Defined at:
  2969 ;;		line 6 in file "dc_motor.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2983 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2986 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2987 ;;Total ram usage:        2 bytes
  2988 ;; Hardware stack levels used: 1
  2989 ;; Hardware stack levels required when called: 1
  2990 ;; This function calls:
  2991 ;;		Nothing
  2992 ;; This function is called by:
  2993 ;;		_main
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text17
  2998   000BD4                     __ptext17:
  2999                           	callstack 0
  3000   000BD4                     _initDCmotorsPWM:
  3001                           	callstack 29
  3002   000BD4                     
  3003                           ;dc_motor.c: 9:     LATEbits.LATE2 = 0;
  3004   000BD4  947D               	bcf	125,2,c	;volatile
  3005                           
  3006                           ;dc_motor.c: 10:     LATEbits.LATE4 = 0;
  3007   000BD6  987D               	bcf	125,4,c	;volatile
  3008                           
  3009                           ;dc_motor.c: 11:     LATCbits.LATC7 = 0;
  3010   000BD8  9E7B               	bcf	123,7,c	;volatile
  3011                           
  3012                           ;dc_motor.c: 12:     LATGbits.LATG6 = 0;
  3013   000BDA  9C7F               	bcf	127,6,c	;volatile
  3014                           
  3015                           ;dc_motor.c: 14:     TRISEbits.TRISE2 = 0;
  3016   000BDC  9485               	bcf	133,2,c	;volatile
  3017                           
  3018                           ;dc_motor.c: 15:     TRISEbits.TRISE4 = 0;
  3019   000BDE  9885               	bcf	133,4,c	;volatile
  3020                           
  3021                           ;dc_motor.c: 16:     TRISCbits.TRISC7 = 0;
  3022   000BE0  9E83               	bcf	131,7,c	;volatile
  3023                           
  3024                           ;dc_motor.c: 17:     TRISGbits.TRISG6 = 0;
  3025   000BE2  9C87               	bcf	135,6,c	;volatile
  3026   000BE4                     
  3027                           ;dc_motor.c: 20:     RE2PPS=0x05;
  3028   000BE4  0E05               	movlw	5
  3029   000BE6  010E               	movlb	14	; () banked
  3030   000BE8  6F74               	movwf	116,b	;volatile
  3031                           
  3032                           ;dc_motor.c: 21:     RE4PPS=0x06;
  3033   000BEA  0E06               	movlw	6
  3034   000BEC  6F76               	movwf	118,b	;volatile
  3035                           
  3036                           ;dc_motor.c: 22:     RC7PPS=0x07;
  3037   000BEE  0E07               	movlw	7
  3038   000BF0  6F69               	movwf	105,b	;volatile
  3039                           
  3040                           ;dc_motor.c: 23:     RG6PPS=0x08;
  3041   000BF2  0E08               	movlw	8
  3042   000BF4  6F88               	movwf	136,b	;volatile
  3043                           
  3044                           ;dc_motor.c: 32:     T2CONbits.CKPS=011;
  3045   000BF6  50BD               	movf	189,w,c	;volatile
  3046   000BF8  0B8F               	andlw	-113
  3047   000BFA  0910               	iorlw	16
  3048   000BFC  6EBD               	movwf	189,c	;volatile
  3049                           
  3050                           ;dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  3051   000BFE  0EE0               	movlw	-32
  3052   000C00  16BE               	andwf	190,f,c	;volatile
  3053                           
  3054                           ;dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  3055   000C02  50BF               	movf	191,w,c	;volatile
  3056   000C04  0BF0               	andlw	-16
  3057   000C06  0901               	iorlw	1
  3058   000C08  6EBF               	movwf	191,c	;volatile
  3059                           
  3060                           ;dc_motor.c: 38:     T2PR=199;
  3061   000C0A  0EC7               	movlw	199
  3062   000C0C  6EBC               	movwf	188,c	;volatile
  3063   000C0E                     
  3064                           ; BSR set to: 14
  3065                           ;dc_motor.c: 39:     T2CONbits.ON=1;
  3066   000C0E  8EBD               	bsf	189,7,c	;volatile
  3067                           
  3068                           ;dc_motor.c: 43:     CCPR1H=0;
  3069   000C10  0E00               	movlw	0
  3070   000C12  6EAA               	movwf	170,c	;volatile
  3071                           
  3072                           ;dc_motor.c: 44:     CCPR2H=0;
  3073   000C14  0E00               	movlw	0
  3074   000C16  6EA6               	movwf	166,c	;volatile
  3075                           
  3076                           ;dc_motor.c: 45:     CCPR3H=0;
  3077   000C18  0E00               	movlw	0
  3078   000C1A  010F               	movlb	15	; () banked
  3079   000C1C  6F25               	movwf	37,b	;volatile
  3080                           
  3081                           ;dc_motor.c: 46:     CCPR4H=0;
  3082   000C1E  0E00               	movlw	0
  3083   000C20  6F21               	movwf	33,b	;volatile
  3084                           
  3085                           ;dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  3086   000C22  0EFC               	movlw	-4
  3087   000C24  16AD               	andwf	173,f,c	;volatile
  3088                           
  3089                           ;dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  3090   000C26  0EF3               	movlw	-13
  3091   000C28  16AD               	andwf	173,f,c	;volatile
  3092                           
  3093                           ;dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  3094   000C2A  0ECF               	movlw	-49
  3095   000C2C  16AD               	andwf	173,f,c	;volatile
  3096                           
  3097                           ;dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  3098   000C2E  0E3F               	movlw	-193
  3099   000C30  16AD               	andwf	173,f,c	;volatile
  3100   000C32                     
  3101                           ; BSR set to: 15
  3102                           ;dc_motor.c: 55:     CCP1CONbits.FMT=1;
  3103   000C32  88AB               	bsf	171,4,c	;volatile
  3104                           
  3105                           ;dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  3106   000C34  50AB               	movf	171,w,c	;volatile
  3107   000C36  0BF0               	andlw	-16
  3108   000C38  090C               	iorlw	12
  3109   000C3A  6EAB               	movwf	171,c	;volatile
  3110   000C3C                     
  3111                           ; BSR set to: 15
  3112                           ;dc_motor.c: 57:     CCP1CONbits.EN=1;
  3113   000C3C  8EAB               	bsf	171,7,c	;volatile
  3114   000C3E                     
  3115                           ; BSR set to: 15
  3116                           ;dc_motor.c: 59:     CCP2CONbits.FMT=1;
  3117   000C3E  88A7               	bsf	167,4,c	;volatile
  3118                           
  3119                           ;dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  3120   000C40  50A7               	movf	167,w,c	;volatile
  3121   000C42  0BF0               	andlw	-16
  3122   000C44  090C               	iorlw	12
  3123   000C46  6EA7               	movwf	167,c	;volatile
  3124   000C48                     
  3125                           ; BSR set to: 15
  3126                           ;dc_motor.c: 61:     CCP2CONbits.EN=1;
  3127   000C48  8EA7               	bsf	167,7,c	;volatile
  3128   000C4A                     
  3129                           ; BSR set to: 15
  3130                           ;dc_motor.c: 63:     CCP3CONbits.FMT=1;
  3131   000C4A  8926               	bsf	38,4,b	;volatile
  3132                           
  3133                           ;dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  3134   000C4C  5126               	movf	38,w,b	;volatile
  3135   000C4E  0BF0               	andlw	-16
  3136   000C50  090C               	iorlw	12
  3137   000C52  6F26               	movwf	38,b	;volatile
  3138   000C54                     
  3139                           ; BSR set to: 15
  3140                           ;dc_motor.c: 65:     CCP3CONbits.EN=1;
  3141   000C54  8F26               	bsf	38,7,b	;volatile
  3142   000C56                     
  3143                           ; BSR set to: 15
  3144                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  3145   000C56  8922               	bsf	34,4,b	;volatile
  3146                           
  3147                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  3148   000C58  5122               	movf	34,w,b	;volatile
  3149   000C5A  0BF0               	andlw	-16
  3150   000C5C  090C               	iorlw	12
  3151   000C5E  6F22               	movwf	34,b	;volatile
  3152   000C60                     
  3153                           ; BSR set to: 15
  3154                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  3155   000C60  8F22               	bsf	34,7,b	;volatile
  3156   000C62                     
  3157                           ; BSR set to: 15
  3158   000C62  0012               	return		;funcret
  3159   000C64                     __end_of_initDCmotorsPWM:
  3160                           	callstack 0
  3161                           
  3162 ;; *************** function _decide_color *****************
  3163 ;; Defined at:
  3164 ;;		line 103 in file "color.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  mx              2    0[COMRAM] PTR struct colors
  3167 ;;		 -> main@reading(8), 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;		None
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      unsigned char 
  3172 ;; Registers used:
  3173 ;;		None
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3183 ;;Total ram usage:        2 bytes
  3184 ;; Hardware stack levels used: 1
  3185 ;; Hardware stack levels required when called: 1
  3186 ;; This function calls:
  3187 ;;		Nothing
  3188 ;; This function is called by:
  3189 ;;		_main
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text18
  3194   001048                     __ptext18:
  3195                           	callstack 0
  3196   001048                     _decide_color:
  3197                           	callstack 29
  3198   001048  0012               	return		;funcret
  3199   00104A                     __end_of_decide_color:
  3200                           	callstack 0
  3201                           
  3202 ;; *************** function _color_read_Red *****************
  3203 ;; Defined at:
  3204 ;;		line 46 in file "color.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  tmp             2    9[COMRAM] unsigned int 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  2    4[COMRAM] unsigned int 
  3211 ;; Registers used:
  3212 ;;		wreg, status,2, status,0, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3220 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3221 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3222 ;;Total ram usage:        7 bytes
  3223 ;; Hardware stack levels used: 1
  3224 ;; Hardware stack levels required when called: 3
  3225 ;; This function calls:
  3226 ;;		_I2C_2_Master_Read
  3227 ;;		_I2C_2_Master_RepStart
  3228 ;;		_I2C_2_Master_Start
  3229 ;;		_I2C_2_Master_Stop
  3230 ;;		_I2C_2_Master_Write
  3231 ;; This function is called by:
  3232 ;;		_main
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text19
  3237   000D4A                     __ptext19:
  3238                           	callstack 0
  3239   000D4A                     _color_read_Red:
  3240                           	callstack 27
  3241   000D4A                     
  3242                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
  3243   000D4A  EC1F  F008         	call	_I2C_2_Master_Start	;wreg free
  3244                           
  3245                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  3246   000D4E  0E52               	movlw	82
  3247   000D50  EC09  F008         	call	_I2C_2_Master_Write
  3248                           
  3249                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x16);
  3250   000D54  0EB6               	movlw	182
  3251   000D56  EC09  F008         	call	_I2C_2_Master_Write
  3252                           
  3253                           ;color.c: 53:  I2C_2_Master_RepStart();
  3254   000D5A  EC15  F008         	call	_I2C_2_Master_RepStart	;wreg free
  3255                           
  3256                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  3257   000D5E  0E53               	movlw	83
  3258   000D60  EC09  F008         	call	_I2C_2_Master_Write
  3259                           
  3260                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  3261   000D64  0E01               	movlw	1
  3262   000D66  EC45  F007         	call	_I2C_2_Master_Read
  3263   000D6A  6E07               	movwf	??_color_read_Red^0,c
  3264   000D6C  5007               	movf	??_color_read_Red^0,w,c
  3265   000D6E  6E0A               	movwf	color_read_Red@tmp^0,c
  3266   000D70  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3267                           
  3268                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3269   000D72  0E00               	movlw	0
  3270   000D74  EC45  F007         	call	_I2C_2_Master_Read
  3271   000D78  6E07               	movwf	??_color_read_Red^0,c
  3272   000D7A  5007               	movf	??_color_read_Red^0,w,c
  3273   000D7C  6E09               	movwf	(??_color_read_Red+2)^0,c
  3274   000D7E  6A08               	clrf	(??_color_read_Red+1)^0,c
  3275   000D80  500A               	movf	color_read_Red@tmp^0,w,c
  3276   000D82  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3277   000D84  6E0A               	movwf	color_read_Red@tmp^0,c
  3278   000D86  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3279   000D88  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3280   000D8A  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3281                           
  3282                           ;color.c: 57:  I2C_2_Master_Stop();
  3283   000D8C  EC1A  F008         	call	_I2C_2_Master_Stop	;wreg free
  3284   000D90                     
  3285                           ;color.c: 58:  return tmp;
  3286   000D90  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3287   000D94  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3288   000D98  0012               	return		;funcret
  3289   000D9A                     __end_of_color_read_Red:
  3290                           	callstack 0
  3291                           
  3292 ;; *************** function _color_read_Green *****************
  3293 ;; Defined at:
  3294 ;;		line 61 in file "color.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  tmp             2    9[COMRAM] unsigned int 
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  2    4[COMRAM] unsigned int 
  3301 ;; Registers used:
  3302 ;;		wreg, status,2, status,0, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3308 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3310 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3311 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3312 ;;Total ram usage:        7 bytes
  3313 ;; Hardware stack levels used: 1
  3314 ;; Hardware stack levels required when called: 3
  3315 ;; This function calls:
  3316 ;;		_I2C_2_Master_Read
  3317 ;;		_I2C_2_Master_RepStart
  3318 ;;		_I2C_2_Master_Start
  3319 ;;		_I2C_2_Master_Stop
  3320 ;;		_I2C_2_Master_Write
  3321 ;; This function is called by:
  3322 ;;		_main
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text20
  3327   000D9A                     __ptext20:
  3328                           	callstack 0
  3329   000D9A                     _color_read_Green:
  3330                           	callstack 27
  3331   000D9A                     
  3332                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  3333   000D9A  EC1F  F008         	call	_I2C_2_Master_Start	;wreg free
  3334                           
  3335                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  3336   000D9E  0E52               	movlw	82
  3337   000DA0  EC09  F008         	call	_I2C_2_Master_Write
  3338                           
  3339                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x18);
  3340   000DA4  0EB8               	movlw	184
  3341   000DA6  EC09  F008         	call	_I2C_2_Master_Write
  3342                           
  3343                           ;color.c: 67:  I2C_2_Master_RepStart();
  3344   000DAA  EC15  F008         	call	_I2C_2_Master_RepStart	;wreg free
  3345                           
  3346                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
  3347   000DAE  0E53               	movlw	83
  3348   000DB0  EC09  F008         	call	_I2C_2_Master_Write
  3349                           
  3350                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
  3351   000DB4  0E01               	movlw	1
  3352   000DB6  EC45  F007         	call	_I2C_2_Master_Read
  3353   000DBA  6E07               	movwf	??_color_read_Green^0,c
  3354   000DBC  5007               	movf	??_color_read_Green^0,w,c
  3355   000DBE  6E0A               	movwf	color_read_Green@tmp^0,c
  3356   000DC0  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3357                           
  3358                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3359   000DC2  0E00               	movlw	0
  3360   000DC4  EC45  F007         	call	_I2C_2_Master_Read
  3361   000DC8  6E07               	movwf	??_color_read_Green^0,c
  3362   000DCA  5007               	movf	??_color_read_Green^0,w,c
  3363   000DCC  6E09               	movwf	(??_color_read_Green+2)^0,c
  3364   000DCE  6A08               	clrf	(??_color_read_Green+1)^0,c
  3365   000DD0  500A               	movf	color_read_Green@tmp^0,w,c
  3366   000DD2  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3367   000DD4  6E0A               	movwf	color_read_Green@tmp^0,c
  3368   000DD6  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3369   000DD8  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3370   000DDA  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3371                           
  3372                           ;color.c: 71:  I2C_2_Master_Stop();
  3373   000DDC  EC1A  F008         	call	_I2C_2_Master_Stop	;wreg free
  3374   000DE0                     
  3375                           ;color.c: 72:  return tmp;
  3376   000DE0  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3377   000DE4  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3378   000DE8  0012               	return		;funcret
  3379   000DEA                     __end_of_color_read_Green:
  3380                           	callstack 0
  3381                           
  3382 ;; *************** function _color_read_Clear *****************
  3383 ;; Defined at:
  3384 ;;		line 89 in file "color.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  tmp             2    9[COMRAM] unsigned int 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  2    4[COMRAM] unsigned int 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3398 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3400 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3401 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3402 ;;Total ram usage:        7 bytes
  3403 ;; Hardware stack levels used: 1
  3404 ;; Hardware stack levels required when called: 3
  3405 ;; This function calls:
  3406 ;;		_I2C_2_Master_Read
  3407 ;;		_I2C_2_Master_RepStart
  3408 ;;		_I2C_2_Master_Start
  3409 ;;		_I2C_2_Master_Stop
  3410 ;;		_I2C_2_Master_Write
  3411 ;; This function is called by:
  3412 ;;		_main
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text21
  3417   000DEA                     __ptext21:
  3418                           	callstack 0
  3419   000DEA                     _color_read_Clear:
  3420                           	callstack 27
  3421   000DEA                     
  3422                           ;color.c: 91:  unsigned int tmp;;color.c: 92:  I2C_2_Master_Start();
  3423   000DEA  EC1F  F008         	call	_I2C_2_Master_Start	;wreg free
  3424                           
  3425                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  3426   000DEE  0E52               	movlw	82
  3427   000DF0  EC09  F008         	call	_I2C_2_Master_Write
  3428                           
  3429                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x14);
  3430   000DF4  0EB4               	movlw	180
  3431   000DF6  EC09  F008         	call	_I2C_2_Master_Write
  3432                           
  3433                           ;color.c: 95:  I2C_2_Master_RepStart();
  3434   000DFA  EC15  F008         	call	_I2C_2_Master_RepStart	;wreg free
  3435                           
  3436                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  3437   000DFE  0E53               	movlw	83
  3438   000E00  EC09  F008         	call	_I2C_2_Master_Write
  3439                           
  3440                           ;color.c: 97:  tmp=I2C_2_Master_Read(1);
  3441   000E04  0E01               	movlw	1
  3442   000E06  EC45  F007         	call	_I2C_2_Master_Read
  3443   000E0A  6E07               	movwf	??_color_read_Clear^0,c
  3444   000E0C  5007               	movf	??_color_read_Clear^0,w,c
  3445   000E0E  6E0A               	movwf	color_read_Clear@tmp^0,c
  3446   000E10  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3447                           
  3448                           ;color.c: 98:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3449   000E12  0E00               	movlw	0
  3450   000E14  EC45  F007         	call	_I2C_2_Master_Read
  3451   000E18  6E07               	movwf	??_color_read_Clear^0,c
  3452   000E1A  5007               	movf	??_color_read_Clear^0,w,c
  3453   000E1C  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3454   000E1E  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3455   000E20  500A               	movf	color_read_Clear@tmp^0,w,c
  3456   000E22  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3457   000E24  6E0A               	movwf	color_read_Clear@tmp^0,c
  3458   000E26  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3459   000E28  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3460   000E2A  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3461                           
  3462                           ;color.c: 99:  I2C_2_Master_Stop();
  3463   000E2C  EC1A  F008         	call	_I2C_2_Master_Stop	;wreg free
  3464   000E30                     
  3465                           ;color.c: 100:  return tmp;
  3466   000E30  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3467   000E34  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3468   000E38  0012               	return		;funcret
  3469   000E3A                     __end_of_color_read_Clear:
  3470                           	callstack 0
  3471                           
  3472 ;; *************** function _color_read_Blue *****************
  3473 ;; Defined at:
  3474 ;;		line 75 in file "color.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  tmp             2    9[COMRAM] unsigned int 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  2    4[COMRAM] unsigned int 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3491 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3492 ;;Total ram usage:        7 bytes
  3493 ;; Hardware stack levels used: 1
  3494 ;; Hardware stack levels required when called: 3
  3495 ;; This function calls:
  3496 ;;		_I2C_2_Master_Read
  3497 ;;		_I2C_2_Master_RepStart
  3498 ;;		_I2C_2_Master_Start
  3499 ;;		_I2C_2_Master_Stop
  3500 ;;		_I2C_2_Master_Write
  3501 ;; This function is called by:
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text22
  3507   000E3A                     __ptext22:
  3508                           	callstack 0
  3509   000E3A                     _color_read_Blue:
  3510                           	callstack 27
  3511   000E3A                     
  3512                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  3513   000E3A  EC1F  F008         	call	_I2C_2_Master_Start	;wreg free
  3514                           
  3515                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  3516   000E3E  0E52               	movlw	82
  3517   000E40  EC09  F008         	call	_I2C_2_Master_Write
  3518                           
  3519                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x1A);
  3520   000E44  0EBA               	movlw	186
  3521   000E46  EC09  F008         	call	_I2C_2_Master_Write
  3522                           
  3523                           ;color.c: 81:  I2C_2_Master_RepStart();
  3524   000E4A  EC15  F008         	call	_I2C_2_Master_RepStart	;wreg free
  3525                           
  3526                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  3527   000E4E  0E53               	movlw	83
  3528   000E50  EC09  F008         	call	_I2C_2_Master_Write
  3529                           
  3530                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  3531   000E54  0E01               	movlw	1
  3532   000E56  EC45  F007         	call	_I2C_2_Master_Read
  3533   000E5A  6E07               	movwf	??_color_read_Blue^0,c
  3534   000E5C  5007               	movf	??_color_read_Blue^0,w,c
  3535   000E5E  6E0A               	movwf	color_read_Blue@tmp^0,c
  3536   000E60  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3537                           
  3538                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3539   000E62  0E00               	movlw	0
  3540   000E64  EC45  F007         	call	_I2C_2_Master_Read
  3541   000E68  6E07               	movwf	??_color_read_Blue^0,c
  3542   000E6A  5007               	movf	??_color_read_Blue^0,w,c
  3543   000E6C  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3544   000E6E  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3545   000E70  500A               	movf	color_read_Blue@tmp^0,w,c
  3546   000E72  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3547   000E74  6E0A               	movwf	color_read_Blue@tmp^0,c
  3548   000E76  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3549   000E78  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3550   000E7A  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3551                           
  3552                           ;color.c: 85:  I2C_2_Master_Stop();
  3553   000E7C  EC1A  F008         	call	_I2C_2_Master_Stop	;wreg free
  3554   000E80                     
  3555                           ;color.c: 86:  return tmp;
  3556   000E80  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3557   000E84  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3558   000E88  0012               	return		;funcret
  3559   000E8A                     __end_of_color_read_Blue:
  3560                           	callstack 0
  3561                           
  3562 ;; *************** function _I2C_2_Master_RepStart *****************
  3563 ;; Defined at:
  3564 ;;		line 33 in file "i2c.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used: 1
  3584 ;; Hardware stack levels required when called: 2
  3585 ;; This function calls:
  3586 ;;		_I2C_2_Master_Idle
  3587 ;; This function is called by:
  3588 ;;		_color_read_Red
  3589 ;;		_color_read_Green
  3590 ;;		_color_read_Blue
  3591 ;;		_color_read_Clear
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text23
  3596   00102A                     __ptext23:
  3597                           	callstack 0
  3598   00102A                     _I2C_2_Master_RepStart:
  3599                           	callstack 27
  3600   00102A                     
  3601                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3602   00102A  ECAF  F007         	call	_I2C_2_Master_Idle	;wreg free
  3603   00102E                     
  3604                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3605   00102E  010E               	movlb	14	; () banked
  3606   001030  83DA               	bsf	218,1,b	;volatile
  3607   001032                     
  3608                           ; BSR set to: 14
  3609   001032  0012               	return		;funcret
  3610   001034                     __end_of_I2C_2_Master_RepStart:
  3611                           	callstack 0
  3612                           
  3613 ;; *************** function _I2C_2_Master_Read *****************
  3614 ;; Defined at:
  3615 ;;		line 51 in file "i2c.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  ack             1    wreg     unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  ack             1    2[COMRAM] unsigned char 
  3620 ;;  tmp             1    3[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      unsigned char 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3634 ;;Total ram usage:        3 bytes
  3635 ;; Hardware stack levels used: 1
  3636 ;; Hardware stack levels required when called: 2
  3637 ;; This function calls:
  3638 ;;		_I2C_2_Master_Idle
  3639 ;; This function is called by:
  3640 ;;		_color_read_Red
  3641 ;;		_color_read_Green
  3642 ;;		_color_read_Blue
  3643 ;;		_color_read_Clear
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text24
  3648   000E8A                     __ptext24:
  3649                           	callstack 0
  3650   000E8A                     _I2C_2_Master_Read:
  3651                           	callstack 27
  3652                           
  3653                           ; BSR set to: 14
  3654                           ;incstack = 0
  3655                           ;I2C_2_Master_Read@ack stored from wreg
  3656   000E8A  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3657   000E8C                     
  3658                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3659   000E8C  ECAF  F007         	call	_I2C_2_Master_Idle	;wreg free
  3660   000E90                     
  3661                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3662   000E90  010E               	movlb	14	; () banked
  3663   000E92  87DA               	bsf	218,3,b	;volatile
  3664                           
  3665                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3666   000E94  ECAF  F007         	call	_I2C_2_Master_Idle	;wreg free
  3667   000E98                     
  3668                           ;i2c.c: 57:   tmp = SSP2BUF;
  3669   000E98  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3670                           
  3671                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3672   000E9C  ECAF  F007         	call	_I2C_2_Master_Idle	;wreg free
  3673   000EA0                     
  3674                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3675   000EA0  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3676   000EA2  B4D8               	btfsc	status,2,c
  3677   000EA4  EF56  F007         	goto	u611
  3678   000EA8  EF5A  F007         	goto	u610
  3679   000EAC                     u611:
  3680   000EAC  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3681   000EAE  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3682   000EB0  EF5B  F007         	goto	u628
  3683   000EB4                     u610:
  3684   000EB4  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3685   000EB6                     u628:
  3686   000EB6  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3687   000EB8  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3688   000EBA  010E               	movlb	14	; () banked
  3689   000EBC  51DA               	movf	218,w,b	;volatile
  3690   000EBE  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3691   000EC0  0BDF               	andlw	-33
  3692   000EC2  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3693   000EC4  6FDA               	movwf	218,b	;volatile
  3694   000EC6                     
  3695                           ; BSR set to: 14
  3696                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3697   000EC6  89DA               	bsf	218,4,b	;volatile
  3698   000EC8                     
  3699                           ; BSR set to: 14
  3700                           ;i2c.c: 61:   return tmp;
  3701   000EC8  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3702   000ECA                     
  3703                           ; BSR set to: 14
  3704   000ECA  0012               	return		;funcret
  3705   000ECC                     __end_of_I2C_2_Master_Read:
  3706                           	callstack 0
  3707                           
  3708 ;; *************** function _color_click_init *****************
  3709 ;; Defined at:
  3710 ;;		line 6 in file "color.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;		None
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;		None
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  1    wreg      void 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0, cstack
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3726 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3727 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3728 ;;Total ram usage:        1 bytes
  3729 ;; Hardware stack levels used: 1
  3730 ;; Hardware stack levels required when called: 4
  3731 ;; This function calls:
  3732 ;;		_I2C_2_Master_Init
  3733 ;;		_color_writetoaddr
  3734 ;; This function is called by:
  3735 ;;		_main
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text25
  3740   000ECC                     __ptext25:
  3741                           	callstack 0
  3742   000ECC                     _color_click_init:
  3743                           	callstack 26
  3744   000ECC                     
  3745                           ;color.c: 9:     I2C_2_Master_Init();
  3746   000ECC  EC86  F007         	call	_I2C_2_Master_Init	;wreg free
  3747   000ED0                     
  3748                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  3749   000ED0  0E01               	movlw	1
  3750   000ED2  6E03               	movwf	color_writetoaddr@value^0,c
  3751   000ED4  0E00               	movlw	0
  3752   000ED6  ECD6  F007         	call	_color_writetoaddr
  3753   000EDA                     
  3754                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3755   000EDA  0E3F               	movlw	63
  3756   000EDC  6E05               	movwf	??_color_click_init^0,c
  3757   000EDE  0E55               	movlw	85
  3758   000EE0                     u987:
  3759   000EE0  2EE8               	decfsz	wreg,f,c
  3760   000EE2  D7FE               	bra	u987
  3761   000EE4  2E05               	decfsz	??_color_click_init^0,f,c
  3762   000EE6  D7FC               	bra	u987
  3763   000EE8  F000               	nop	
  3764   000EEA                     
  3765                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  3766   000EEA  0E03               	movlw	3
  3767   000EEC  6E03               	movwf	color_writetoaddr@value^0,c
  3768   000EEE  0E00               	movlw	0
  3769   000EF0  ECD6  F007         	call	_color_writetoaddr
  3770   000EF4                     
  3771                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  3772   000EF4  0ED5               	movlw	213
  3773   000EF6  6E03               	movwf	color_writetoaddr@value^0,c
  3774   000EF8  0E01               	movlw	1
  3775   000EFA  ECD6  F007         	call	_color_writetoaddr
  3776   000EFE                     
  3777                           ;color.c: 22:     TRISFbits.TRISF7 = 0;
  3778   000EFE  9E86               	bcf	134,7,c	;volatile
  3779   000F00                     
  3780                           ;color.c: 23:     TRISGbits.TRISG1 = 0;
  3781   000F00  9287               	bcf	135,1,c	;volatile
  3782   000F02                     
  3783                           ;color.c: 24:     TRISAbits.TRISA4 = 0;
  3784   000F02  9881               	bcf	129,4,c	;volatile
  3785   000F04                     
  3786                           ;color.c: 26:     LATFbits.LATF7 = 0;
  3787   000F04  9E7E               	bcf	126,7,c	;volatile
  3788   000F06                     
  3789                           ;color.c: 27:     LATGbits.LATG1 = 0;
  3790   000F06  927F               	bcf	127,1,c	;volatile
  3791   000F08                     
  3792                           ;color.c: 28:     LATAbits.LATA4 = 0;
  3793   000F08  9879               	bcf	121,4,c	;volatile
  3794   000F0A  0012               	return		;funcret
  3795   000F0C                     __end_of_color_click_init:
  3796                           	callstack 0
  3797                           
  3798 ;; *************** function _color_writetoaddr *****************
  3799 ;; Defined at:
  3800 ;;		line 31 in file "color.c"
  3801 ;; Parameters:    Size  Location     Type
  3802 ;;  address         1    wreg     unsigned char 
  3803 ;;  value           1    2[COMRAM] unsigned char 
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  address         1    3[COMRAM] unsigned char 
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      void 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0, cstack
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3815 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3819 ;;Total ram usage:        2 bytes
  3820 ;; Hardware stack levels used: 1
  3821 ;; Hardware stack levels required when called: 3
  3822 ;; This function calls:
  3823 ;;		_I2C_2_Master_Start
  3824 ;;		_I2C_2_Master_Stop
  3825 ;;		_I2C_2_Master_Write
  3826 ;; This function is called by:
  3827 ;;		_color_click_init
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text26
  3832   000FAC                     __ptext26:
  3833                           	callstack 0
  3834   000FAC                     _color_writetoaddr:
  3835                           	callstack 26
  3836                           
  3837                           ;incstack = 0
  3838                           ;color_writetoaddr@address stored from wreg
  3839   000FAC  6E04               	movwf	color_writetoaddr@address^0,c
  3840   000FAE                     
  3841                           ;color.c: 32:     I2C_2_Master_Start();
  3842   000FAE  EC1F  F008         	call	_I2C_2_Master_Start	;wreg free
  3843                           
  3844                           ;color.c: 33:     I2C_2_Master_Write(0x52 | 0x00);
  3845   000FB2  0E52               	movlw	82
  3846   000FB4  EC09  F008         	call	_I2C_2_Master_Write
  3847                           
  3848                           ;color.c: 34:     I2C_2_Master_Write(0x80 | address);
  3849   000FB8  5004               	movf	color_writetoaddr@address^0,w,c
  3850   000FBA  0980               	iorlw	128
  3851   000FBC  EC09  F008         	call	_I2C_2_Master_Write
  3852                           
  3853                           ;color.c: 35:     I2C_2_Master_Write(value);
  3854   000FC0  5003               	movf	color_writetoaddr@value^0,w,c
  3855   000FC2  EC09  F008         	call	_I2C_2_Master_Write
  3856                           
  3857                           ;color.c: 36:     I2C_2_Master_Stop();
  3858   000FC6  EC1A  F008         	call	_I2C_2_Master_Stop	;wreg free
  3859   000FCA  0012               	return		;funcret
  3860   000FCC                     __end_of_color_writetoaddr:
  3861                           	callstack 0
  3862                           
  3863 ;; *************** function _I2C_2_Master_Write *****************
  3864 ;; Defined at:
  3865 ;;		line 45 in file "i2c.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  data_byte       1    wreg     unsigned char 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  data_byte       1    1[COMRAM] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3883 ;;Total ram usage:        1 bytes
  3884 ;; Hardware stack levels used: 1
  3885 ;; Hardware stack levels required when called: 2
  3886 ;; This function calls:
  3887 ;;		_I2C_2_Master_Idle
  3888 ;; This function is called by:
  3889 ;;		_color_writetoaddr
  3890 ;;		_color_read_Red
  3891 ;;		_color_read_Green
  3892 ;;		_color_read_Blue
  3893 ;;		_color_read_Clear
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text27
  3898   001012                     __ptext27:
  3899                           	callstack 0
  3900   001012                     _I2C_2_Master_Write:
  3901                           	callstack 27
  3902                           
  3903                           ;incstack = 0
  3904                           ;I2C_2_Master_Write@data_byte stored from wreg
  3905   001012  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3906   001014                     
  3907                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3908   001014  ECAF  F007         	call	_I2C_2_Master_Idle	;wreg free
  3909   001018                     
  3910                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3911   001018  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3912   00101C  0012               	return		;funcret
  3913   00101E                     __end_of_I2C_2_Master_Write:
  3914                           	callstack 0
  3915                           
  3916 ;; *************** function _I2C_2_Master_Stop *****************
  3917 ;; Defined at:
  3918 ;;		line 39 in file "i2c.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used: 1
  3938 ;; Hardware stack levels required when called: 2
  3939 ;; This function calls:
  3940 ;;		_I2C_2_Master_Idle
  3941 ;; This function is called by:
  3942 ;;		_color_writetoaddr
  3943 ;;		_color_read_Red
  3944 ;;		_color_read_Green
  3945 ;;		_color_read_Blue
  3946 ;;		_color_read_Clear
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text28
  3951   001034                     __ptext28:
  3952                           	callstack 0
  3953   001034                     _I2C_2_Master_Stop:
  3954                           	callstack 27
  3955   001034                     
  3956                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3957   001034  ECAF  F007         	call	_I2C_2_Master_Idle	;wreg free
  3958   001038                     
  3959                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  3960   001038  010E               	movlb	14	; () banked
  3961   00103A  85DA               	bsf	218,2,b	;volatile
  3962   00103C                     
  3963                           ; BSR set to: 14
  3964   00103C  0012               	return		;funcret
  3965   00103E                     __end_of_I2C_2_Master_Stop:
  3966                           	callstack 0
  3967                           
  3968 ;; *************** function _I2C_2_Master_Start *****************
  3969 ;; Defined at:
  3970 ;;		line 27 in file "i2c.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;		None
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;		None
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg, status,2, status,0, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3988 ;;Total ram usage:        0 bytes
  3989 ;; Hardware stack levels used: 1
  3990 ;; Hardware stack levels required when called: 2
  3991 ;; This function calls:
  3992 ;;		_I2C_2_Master_Idle
  3993 ;; This function is called by:
  3994 ;;		_color_writetoaddr
  3995 ;;		_color_read_Red
  3996 ;;		_color_read_Green
  3997 ;;		_color_read_Blue
  3998 ;;		_color_read_Clear
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text29
  4003   00103E                     __ptext29:
  4004                           	callstack 0
  4005   00103E                     _I2C_2_Master_Start:
  4006                           	callstack 27
  4007   00103E                     
  4008                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4009   00103E  ECAF  F007         	call	_I2C_2_Master_Idle	;wreg free
  4010   001042                     
  4011                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4012   001042  010E               	movlb	14	; () banked
  4013   001044  81DA               	bsf	218,0,b	;volatile
  4014   001046                     
  4015                           ; BSR set to: 14
  4016   001046  0012               	return		;funcret
  4017   001048                     __end_of_I2C_2_Master_Start:
  4018                           	callstack 0
  4019                           
  4020 ;; *************** function _I2C_2_Master_Idle *****************
  4021 ;; Defined at:
  4022 ;;		line 22 in file "i2c.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;		None
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;		None
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4039 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4040 ;;Total ram usage:        1 bytes
  4041 ;; Hardware stack levels used: 1
  4042 ;; Hardware stack levels required when called: 1
  4043 ;; This function calls:
  4044 ;;		Nothing
  4045 ;; This function is called by:
  4046 ;;		_I2C_2_Master_Start
  4047 ;;		_I2C_2_Master_RepStart
  4048 ;;		_I2C_2_Master_Stop
  4049 ;;		_I2C_2_Master_Write
  4050 ;;		_I2C_2_Master_Read
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text30
  4055   000F5E                     __ptext30:
  4056                           	callstack 0
  4057   000F5E                     _I2C_2_Master_Idle:
  4058                           	callstack 27
  4059   000F5E                     l30:
  4060   000F5E  010E               	movlb	14	; () banked
  4061   000F60  B5D8               	btfsc	216,2,b	;volatile
  4062   000F62  EFB5  F007         	goto	u471
  4063   000F66  EFB7  F007         	goto	u470
  4064   000F6A                     u471:
  4065   000F6A  EFAF  F007         	goto	l30
  4066   000F6E                     u470:
  4067   000F6E                     
  4068                           ; BSR set to: 14
  4069   000F6E  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4070   000F72  0E1F               	movlw	31
  4071   000F74  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4072   000F76  A4D8               	btfss	status,2,c
  4073   000F78  EFC0  F007         	goto	u481
  4074   000F7C  EFC2  F007         	goto	u480
  4075   000F80                     u481:
  4076   000F80  EFAF  F007         	goto	l30
  4077   000F84                     u480:
  4078   000F84                     
  4079                           ; BSR set to: 14
  4080   000F84  0012               	return		;funcret
  4081   000F86                     __end_of_I2C_2_Master_Idle:
  4082                           	callstack 0
  4083                           
  4084 ;; *************** function _I2C_2_Master_Init *****************
  4085 ;; Defined at:
  4086 ;;		line 4 in file "i2c.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      void 
  4093 ;; Registers used:
  4094 ;;		wreg, status,2
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;Total ram usage:        0 bytes
  4105 ;; Hardware stack levels used: 1
  4106 ;; Hardware stack levels required when called: 1
  4107 ;; This function calls:
  4108 ;;		Nothing
  4109 ;; This function is called by:
  4110 ;;		_main
  4111 ;;		_color_click_init
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text31
  4116   000F0C                     __ptext31:
  4117                           	callstack 0
  4118   000F0C                     _I2C_2_Master_Init:
  4119                           	callstack 28
  4120   000F0C                     
  4121                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4122   000F0C  010E               	movlb	14	; () banked
  4123   000F0E  51D9               	movf	217,w,b	;volatile
  4124   000F10  0BF0               	andlw	-16
  4125   000F12  0908               	iorlw	8
  4126   000F14  6FD9               	movwf	217,b	;volatile
  4127   000F16                     
  4128                           ; BSR set to: 14
  4129                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4130   000F16  8BD9               	bsf	217,5,b	;volatile
  4131                           
  4132                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4133   000F18  0E9F               	movlw	159
  4134   000F1A  6FD6               	movwf	214,b	;volatile
  4135   000F1C                     
  4136                           ; BSR set to: 14
  4137                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4138   000F1C  8A84               	bsf	132,5,c	;volatile
  4139   000F1E                     
  4140                           ; BSR set to: 14
  4141                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4142   000F1E  8C84               	bsf	132,6,c	;volatile
  4143   000F20                     
  4144                           ; BSR set to: 14
  4145                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4146   000F20  9BA7               	bcf	167,5,b	;volatile
  4147   000F22                     
  4148                           ; BSR set to: 14
  4149                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4150   000F22  9DA7               	bcf	167,6,b	;volatile
  4151                           
  4152                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4153   000F24  0E1D               	movlw	29
  4154   000F26  6F1D               	movwf	29,b	;volatile
  4155                           
  4156                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4157   000F28  0E1E               	movlw	30
  4158   000F2A  6F1C               	movwf	28,b	;volatile
  4159                           
  4160                           ;i2c.c: 18:   RD5PPS=0x1C;
  4161   000F2C  0E1C               	movlw	28
  4162   000F2E  6F6F               	movwf	111,b	;volatile
  4163                           
  4164                           ;i2c.c: 19:   RD6PPS=0x1B;
  4165   000F30  0E1B               	movlw	27
  4166   000F32  6F70               	movwf	112,b	;volatile
  4167   000F34                     
  4168                           ; BSR set to: 14
  4169   000F34  0012               	return		;funcret
  4170   000F36                     __end_of_I2C_2_Master_Init:
  4171                           	callstack 0
  4172                           
  4173 ;; *************** function _Timer0_init *****************
  4174 ;; Defined at:
  4175 ;;		line 20 in file "timer0.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;		None
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  1    wreg      void 
  4182 ;; Registers used:
  4183 ;;		wreg, status,2
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4193 ;;Total ram usage:        0 bytes
  4194 ;; Hardware stack levels used: 1
  4195 ;; Hardware stack levels required when called: 1
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_main
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text32
  4204   001000                     __ptext32:
  4205                           	callstack 0
  4206   001000                     _Timer0_init:
  4207                           	callstack 29
  4208   001000                     
  4209                           ;timer0.c: 33:     T0CON1bits.T0CS=0b010;
  4210   001000  50D6               	movf	214,w,c	;volatile
  4211   001002  0B1F               	andlw	-225
  4212   001004  0940               	iorlw	64
  4213   001006  6ED6               	movwf	214,c	;volatile
  4214   001008                     
  4215                           ;timer0.c: 34:     T0CON1bits.T0ASYNC=1;
  4216   001008  88D6               	bsf	214,4,c	;volatile
  4217                           
  4218                           ;timer0.c: 35:     T0CON1bits.T0CKPS=0b0000;
  4219   00100A  0EF0               	movlw	-16
  4220   00100C  16D6               	andwf	214,f,c	;volatile
  4221   00100E                     
  4222                           ;timer0.c: 36:     T0CON0bits.T016BIT=1;
  4223   00100E  88D5               	bsf	213,4,c	;volatile
  4224   001010  0012               	return		;funcret
  4225   001012                     __end_of_Timer0_init:
  4226                           	callstack 0
  4227                           
  4228 ;; *************** function _Interrupts_init *****************
  4229 ;; Defined at:
  4230 ;;		line 8 in file "timer0.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		None
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used: 1
  4250 ;; Hardware stack levels required when called: 1
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		_main
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	text33
  4259   00101E                     __ptext33:
  4260                           	callstack 0
  4261   00101E                     _Interrupts_init:
  4262                           	callstack 29
  4263   00101E                     
  4264                           ;timer0.c: 10:     PIE0bits.TMR0IE=1;
  4265   00101E  010E               	movlb	14	; () banked
  4266   001020  8B29               	bsf	41,5,b	;volatile
  4267                           
  4268                           ;timer0.c: 11:     INTCONbits.PEIE=1;
  4269   001022  8CF2               	bsf	242,6,c	;volatile
  4270                           
  4271                           ;timer0.c: 12:     INTCONbits.IPEN=0;
  4272   001024  9AF2               	bcf	242,5,c	;volatile
  4273                           
  4274                           ;timer0.c: 13:     INTCONbits.GIE=1;
  4275   001026  8EF2               	bsf	242,7,c	;volatile
  4276   001028                     
  4277                           ; BSR set to: 14
  4278   001028  0012               	return		;funcret
  4279   00102A                     __end_of_Interrupts_init:
  4280                           	callstack 0
  4281                           
  4282 ;; *************** function _HighISR *****************
  4283 ;; Defined at:
  4284 ;;		line 191 in file "mainfinal.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      void 
  4291 ;; Registers used:
  4292 ;;		status,2, status,0
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4302 ;;Total ram usage:        0 bytes
  4303 ;; Hardware stack levels used: 1
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		Interrupt level 2
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	intcode
  4312   000008                     __pintcode:
  4313                           	callstack 0
  4314   000008                     _HighISR:
  4315                           	callstack 24
  4316                           
  4317                           ; BSR set to: 14
  4318                           ;incstack = 0
  4319   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4320   00000A                     
  4321                           ;mainfinal.c: 193:     if (PIR0bits.TMR0IF)
  4322   00000A  010E               	movlb	14	; () banked
  4323   00000C  AB33               	btfss	51,5,b	;volatile
  4324   00000E  EF0B  F000         	goto	i2u82_41
  4325   000012  EF0D  F000         	goto	i2u82_40
  4326   000016                     i2u82_41:
  4327   000016  EF0F  F000         	goto	i2l2287
  4328   00001A                     i2u82_40:
  4329   00001A                     
  4330                           ; BSR set to: 14
  4331                           ;mainfinal.c: 194:     {;mainfinal.c: 195:         timercount++;
  4332   00001A  4A56               	infsnz	_timercount^0,f,c
  4333   00001C  2A57               	incf	(_timercount+1)^0,f,c
  4334   00001E                     i2l2287:
  4335                           
  4336                           ; BSR set to: 14
  4337                           ;mainfinal.c: 197:     PIR0bits.TMR0IF=0;
  4338   00001E  9B33               	bcf	51,5,b	;volatile
  4339   000020                     
  4340                           ; BSR set to: 14
  4341   000020  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4342   000022  0011               	retfie		f
  4343   000024                     __end_of_HighISR:
  4344                           	callstack 0
  4345   000000                     
  4346                           	psect	rparam
  4347   000000                     
  4348                           	psect	temp
  4349   00005A                     btemp:
  4350                           	callstack 0
  4351   00005A                     	ds	1
  4352   000000                     int$flags	set	btemp
  4353   000000                     wtemp8	set	btemp+1
  4354   000000                     ttemp5	set	btemp+1
  4355   000000                     ttemp6	set	btemp+4
  4356   000000                     ttemp7	set	btemp+8
  4357                           
  4358                           	psect	idloc
  4359                           
  4360                           ;Config register IDLOC0 @ 0x200000
  4361                           ;	unspecified, using default values
  4362   200000                     	org	2097152
  4363   200000  0FFF               	dw	4095
  4364                           
  4365                           ;Config register IDLOC1 @ 0x200002
  4366                           ;	unspecified, using default values
  4367   200002                     	org	2097154
  4368   200002  0FFF               	dw	4095
  4369                           
  4370                           ;Config register IDLOC2 @ 0x200004
  4371                           ;	unspecified, using default values
  4372   200004                     	org	2097156
  4373   200004  0FFF               	dw	4095
  4374                           
  4375                           ;Config register IDLOC3 @ 0x200006
  4376                           ;	unspecified, using default values
  4377   200006                     	org	2097158
  4378   200006  0FFF               	dw	4095
  4379                           
  4380                           ;Config register IDLOC4 @ 0x200008
  4381                           ;	unspecified, using default values
  4382   200008                     	org	2097160
  4383   200008  0FFF               	dw	4095
  4384                           
  4385                           ;Config register IDLOC5 @ 0x20000A
  4386                           ;	unspecified, using default values
  4387   20000A                     	org	2097162
  4388   20000A  0FFF               	dw	4095
  4389                           
  4390                           ;Config register IDLOC6 @ 0x20000C
  4391                           ;	unspecified, using default values
  4392   20000C                     	org	2097164
  4393   20000C  0FFF               	dw	4095
  4394                           
  4395                           ;Config register IDLOC7 @ 0x20000E
  4396                           ;	unspecified, using default values
  4397   20000E                     	org	2097166
  4398   20000E  0FFF               	dw	4095
  4399                           
  4400                           	psect	config
  4401                           
  4402                           ;Config register CONFIG1L @ 0x300000
  4403                           ;	External Oscillator mode Selection bits
  4404                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  4405                           ;	Power-up default value for COSC bits
  4406                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  4407   300000                     	org	3145728
  4408   300000  AA                 	db	170
  4409                           
  4410                           ;Config register CONFIG1H @ 0x300001
  4411                           ;	unspecified, using default values
  4412                           ;	Clock Out Enable bit
  4413                           ;	CLKOUTEN = 0x1, unprogrammed default
  4414                           ;	Clock Switch Enable bit
  4415                           ;	CSWEN = 0x1, unprogrammed default
  4416                           ;	Fail-Safe Clock Monitor Enable bit
  4417                           ;	FCMEN = 0x1, unprogrammed default
  4418   300001                     	org	3145729
  4419   300001  FF                 	db	255
  4420                           
  4421                           ;Config register CONFIG2L @ 0x300002
  4422                           ;	unspecified, using default values
  4423                           ;	Master Clear Enable bit
  4424                           ;	MCLRE = 0x1, unprogrammed default
  4425                           ;	Power-up Timer Enable bit
  4426                           ;	PWRTE = 0x1, unprogrammed default
  4427                           ;	Low-power BOR enable bit
  4428                           ;	LPBOREN = 0x1, unprogrammed default
  4429                           ;	Brown-out Reset Enable bits
  4430                           ;	BOREN = 0x3, unprogrammed default
  4431   300002                     	org	3145730
  4432   300002  FF                 	db	255
  4433                           
  4434                           ;Config register CONFIG2H @ 0x300003
  4435                           ;	unspecified, using default values
  4436                           ;	Brown Out Reset Voltage selection bits
  4437                           ;	BORV = 0x3, unprogrammed default
  4438                           ;	ZCD Disable bit
  4439                           ;	ZCD = 0x1, unprogrammed default
  4440                           ;	PPSLOCK bit One-Way Set Enable bit
  4441                           ;	PPS1WAY = 0x1, unprogrammed default
  4442                           ;	Stack Full/Underflow Reset Enable bit
  4443                           ;	STVREN = 0x1, unprogrammed default
  4444                           ;	Debugger Enable bit
  4445                           ;	DEBUG = 0x1, unprogrammed default
  4446                           ;	Extended Instruction Set Enable bit
  4447                           ;	XINST = 0x1, unprogrammed default
  4448   300003                     	org	3145731
  4449   300003  FF                 	db	255
  4450                           
  4451                           ;Config register CONFIG3L @ 0x300004
  4452                           ;	WDT Period Select bits
  4453                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  4454                           ;	WDT operating mode
  4455                           ;	WDTE = OFF, WDT Disabled
  4456   300004                     	org	3145732
  4457   300004  9F                 	db	159
  4458                           
  4459                           ;Config register CONFIG3H @ 0x300005
  4460                           ;	unspecified, using default values
  4461                           ;	WDT Window Select bits
  4462                           ;	WDTCWS = 0x7, unprogrammed default
  4463                           ;	WDT input clock selector
  4464                           ;	WDTCCS = 0x7, unprogrammed default
  4465   300005                     	org	3145733
  4466   300005  FF                 	db	255
  4467                           
  4468                           ;Config register CONFIG4L @ 0x300006
  4469                           ;	unspecified, using default values
  4470                           ;	Write Protection Block 0
  4471                           ;	WRT0 = 0x1, unprogrammed default
  4472                           ;	Write Protection Block 1
  4473                           ;	WRT1 = 0x1, unprogrammed default
  4474                           ;	Write Protection Block 2
  4475                           ;	WRT2 = 0x1, unprogrammed default
  4476                           ;	Write Protection Block 3
  4477                           ;	WRT3 = 0x1, unprogrammed default
  4478                           ;	Write Protection Block 3
  4479                           ;	WRT4 = 0x1, unprogrammed default
  4480                           ;	Write Protection Block 3
  4481                           ;	WRT5 = 0x1, unprogrammed default
  4482                           ;	Write Protection Block 3
  4483                           ;	WRT6 = 0x1, unprogrammed default
  4484                           ;	Write Protection Block 3
  4485                           ;	WRT7 = 0x1, unprogrammed default
  4486   300006                     	org	3145734
  4487   300006  FF                 	db	255
  4488                           
  4489                           ;Config register CONFIG4H @ 0x300007
  4490                           ;	unspecified, using default values
  4491                           ;	Configuration Register Write Protection bit
  4492                           ;	WRTC = 0x1, unprogrammed default
  4493                           ;	Boot Block Write Protection bit
  4494                           ;	WRTB = 0x1, unprogrammed default
  4495                           ;	Data EEPROM Write Protection bit
  4496                           ;	WRTD = 0x1, unprogrammed default
  4497                           ;	Scanner Enable bit
  4498                           ;	SCANE = 0x1, unprogrammed default
  4499                           ;	Low Voltage Programming Enable bit
  4500                           ;	LVP = 0x1, unprogrammed default
  4501   300007                     	org	3145735
  4502   300007  FF                 	db	255
  4503                           
  4504                           ;Config register CONFIG5L @ 0x300008
  4505                           ;	unspecified, using default values
  4506                           ;	UserNVM Program Memory Code Protection bit
  4507                           ;	CP = 0x1, unprogrammed default
  4508                           ;	DataNVM Memory Code Protection bit
  4509                           ;	CPD = 0x1, unprogrammed default
  4510   300008                     	org	3145736
  4511   300008  FF                 	db	255
  4512                           
  4513                           ;Config register CONFIG5H @ 0x300009
  4514                           ;	unspecified, using default values
  4515   300009                     	org	3145737
  4516   300009  FF                 	db	255
  4517                           
  4518                           ;Config register CONFIG6L @ 0x30000A
  4519                           ;	unspecified, using default values
  4520                           ;	Table Read Protection Block 0
  4521                           ;	EBTR0 = 0x1, unprogrammed default
  4522                           ;	Table Read Protection Block 1
  4523                           ;	EBTR1 = 0x1, unprogrammed default
  4524                           ;	Table Read Protection Block 2
  4525                           ;	EBTR2 = 0x1, unprogrammed default
  4526                           ;	Table Read Protection Block 3
  4527                           ;	EBTR3 = 0x1, unprogrammed default
  4528                           ;	Table Read Protection Block 4
  4529                           ;	EBTR4 = 0x1, unprogrammed default
  4530                           ;	Table Read Protection Block 5
  4531                           ;	EBTR5 = 0x1, unprogrammed default
  4532                           ;	Table Read Protection Block 6
  4533                           ;	EBTR6 = 0x1, unprogrammed default
  4534                           ;	Table Read Protection Block 7
  4535                           ;	EBTR7 = 0x1, unprogrammed default
  4536   30000A                     	org	3145738
  4537   30000A  FF                 	db	255
  4538                           
  4539                           ;Config register CONFIG6H @ 0x30000B
  4540                           ;	unspecified, using default values
  4541                           ;	Boot Block Table Read Protection bit
  4542                           ;	EBTRB = 0x1, unprogrammed default
  4543   30000B                     	org	3145739
  4544   30000B  FF                 	db	255
  4545                           tosu	equ	0xFFF
  4546                           tosh	equ	0xFFE
  4547                           tosl	equ	0xFFD
  4548                           stkptr	equ	0xFFC
  4549                           pclatu	equ	0xFFB
  4550                           pclath	equ	0xFFA
  4551                           pcl	equ	0xFF9
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           prodh	equ	0xFF4
  4557                           prodl	equ	0xFF3
  4558                           indf0	equ	0xFEF
  4559                           postinc0	equ	0xFEE
  4560                           postdec0	equ	0xFED
  4561                           preinc0	equ	0xFEC
  4562                           plusw0	equ	0xFEB
  4563                           fsr0h	equ	0xFEA
  4564                           fsr0l	equ	0xFE9
  4565                           wreg	equ	0xFE8
  4566                           indf1	equ	0xFE7
  4567                           postinc1	equ	0xFE6
  4568                           postdec1	equ	0xFE5
  4569                           preinc1	equ	0xFE4
  4570                           plusw1	equ	0xFE3
  4571                           fsr1h	equ	0xFE2
  4572                           fsr1l	equ	0xFE1
  4573                           bsr	equ	0xFE0
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           preinc2	equ	0xFDC
  4578                           plusw2	equ	0xFDB
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     81      89
    BANK0           160      0       0
    BANK1           256    244     244
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    decide_color@mx	PTR struct colors size(2) Largest target is 8
		 -> main@reading(BANK1[8]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    returnhome@timearray	PTR unsigned char  size(2) Largest target is 100
		 -> main@timearray(BANK1[100]), 

    returnhome@path	PTR unsigned char  size(2) Largest target is 100
		 -> main@path(BANK1[100]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    savetime@timearray	PTR unsigned char  size(2) Largest target is 100
		 -> main@timearray(BANK1[100]), 

    savepath@path	PTR unsigned char  size(2) Largest target is 100
		 -> main@path(BANK1[100]), 

    smallmovement@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    smallmovement@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    smallmovement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    smallmovement@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    smallmovement@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    smallmovement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    square@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    square@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    square@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnhome@motorR(COMRAM[9]), 

    square@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    square@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    square@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnhome@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnhome@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnhome@motorL(COMRAM[9]), 

    turn180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turn180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turn180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turn180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turn180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turn180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnhome@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), returnhome@motorL(COMRAM[9]), 

    S801DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S801DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnstep@motorL(COMRAM[9]), 
		 -> returnhome@motorR(COMRAM[9]), returnhome@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_returnhome
    _smallmovement->_stop
    _returnhome->_returnstep
    _square->_stop
    _returnstep->_turn180
    _returnstep->_turnLeft135
    _returnstep->_turnLeft90
    _returnstep->_turnRight135
    _returnstep->_turnRight90
    _turnRight90->_stop
    _turnRight135->_stop
    _turnLeft90->_stop
    _turnLeft135->_stop
    _turn180->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->_color_read_Blue
    ___lwdiv->_color_read_Clear
    ___lwdiv->_color_read_Green
    ___lwdiv->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               246   246      0  171081
                                              0 BANK1    244   244      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                            ___lwdiv
                   _color_click_init
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                       _decide_color
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _returnhome
                           _savepath
                           _savetime
                      _smallmovement
                             _square
                            _turn180
                        _turnLeft135
                         _turnLeft90
                       _turnRight135
                        _turnRight90
 ---------------------------------------------------------------------------------
 (1) _smallmovement                                        6     1      5   11110
                                             29 COMRAM     6     1      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _savetime                                             6     2      4     219
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _savepath                                             5     2      3    1260
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _returnhome                                          27     5     22   80548
                                             54 COMRAM    27     5     22
                     _fullSpeedAhead
                         _returnstep
                             _square
                               _stop
 ---------------------------------------------------------------------------------
 (1) _square                                               7     2      5   11794
                                             29 COMRAM     7     2      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _returnstep                                          19     1     18   56816
                                             35 COMRAM    19     1     18
                            _turn180
                        _turnLeft135
                         _turnLeft90
                       _turnRight135
                        _turnRight90
 ---------------------------------------------------------------------------------
 (1) _turnRight90                                          6     2      4   11338
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnRight135                                         6     2      4   11186
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft90                                           6     2      4   11338
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft135                                          6     2      4   11186
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turn180                                              6     2      4   11186
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    6341
                                             24 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    4975
                                             24 COMRAM     6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    4233
                                             18 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     631
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    1574
                                             11 COMRAM     7     3      4
                             ___wmul (ARG)
                    _color_read_Blue (ARG)
                   _color_read_Clear (ARG)
                   _color_read_Green (ARG)
                     _color_read_Red (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _decide_color                                         2     0      2     608
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   ___lwdiv
     ___wmul (ARG)
     _color_read_Blue (ARG)
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear (ARG)
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green (ARG)
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red (ARG)
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Blue
   _color_read_Clear
   _color_read_Green
   _color_read_Red
   _decide_color
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
       ___wmul
   _initDCmotorsPWM
   _returnhome
     _fullSpeedAhead
     _returnstep
       _turn180
         _setMotorPWM
         _stop
           _setMotorPWM
       _turnLeft135
         _setMotorPWM
         _stop
       _turnLeft90
         _setMotorPWM
         _stop
       _turnRight135
         _setMotorPWM
         _stop
       _turnRight90
         _setMotorPWM
         _stop
     _square
       _setMotorPWM
       _stop
     _stop
   _savepath
   _savetime
   _smallmovement
     _setMotorPWM
     _stop
   _square
   _turn180
   _turnLeft135
   _turnLeft90
   _turnRight135
   _turnRight90

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F4      F4       7       95.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     51      59       1       94.7%
BITBIGSFRhlllhl     52      0       0      42        0.0%
BITBIGSFRhlllll     46      0       0      44        0.0%
BITBIGSFRlllhll     35      0       0      53        0.0%
BITBIGSFRllll       2D      0       0      56        0.0%
BITBIGSFRllhh       20      0       0      46        0.0%
BITBIGSFRlllhhh     1E      0       0      48        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      49        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      47        0.0%
BITBIGSFRlllhll      B      0       0      55        0.0%
BITBIGSFRlllhll      9      0       0      54        0.0%
BITBIGSFRlllhlh      5      0       0      52        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRlllhhl      3      0       0      51        0.0%
BITBIGSFRhllllh      2      0       0      43        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhlllhh      1      0       0      41        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      50        0.0%
BITBIGSFRhlhh        1      0       0      40        0.0%
BITBIGSFRlh          1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14D      57        0.0%
DATA                 0      0     14D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 15:37:38 2022

               _color_read_Red 0D4A                _color_read_Blue 0E3A                ??_smallmovement 0023  
                           l30 0F5E                             l33 0F84                             l42 103C  
                           l27 0F34                             l36 1046                             l45 101C  
                           l39 1032                             l48 0ECA              fullSpeedAhead@dir 001D  
          ___wmul@multiplicand 0003               _color_read_Clear 0DEA               _color_read_Green 0D9A  
            ??_Interrupts_init 0001                            l201 0430                            l122 0304  
                          l130 0D48                            l115 0C62                            l150 07D8  
                          l136 051E                            l144 0608                            l401 1048  
                          l209 0A54                            l162 08BE                            l171 0B16  
                          l404 0FAA                            l156 06F0                            l342 1010  
                          l183 0BD2                            l177 0992                            l186 0FE8  
                          l339 1028                            l197 0386                            l189 0F5C  
                          l383 0F0A                            l392 0DE8                            l386 0FCA  
                          l298 00EA                            l395 0E88                            l389 0D98  
                          l398 0E38                            l902 0CD6                            l895 0CCE  
                          u420 0C7E                            u500 0D48                            u421 0C7A  
                          u501 0D44                            u430 0C9C                            u510 04D8  
                          u431 0C98                            u511 04D4                            u440 0CB8  
                          u600 0894                            u520 04F2                            u441 0CB4  
                          u601 0890                            u521 04EE                            u610 0EB4  
                          u450 01B6                            u530 05C4                            u611 0EAC  
                          u451 01B2                            u531 05C0                            u460 0280  
                          u540 05DC                            u700 09F4                            u461 027C  
                          u541 05D8                            u701 09F0                            u470 0F6E  
                          u630 0AEC                            u550 0794                            u710 0A1A  
                          u471 0F6A                            u631 0AE8                            u551 0790  
                          u711 0A16                            u480 0F84                            u640 0B04  
                          u560 07AC                            u720 0A40                            u800 0430  
                          u481 0F80                            u641 0B00                            u561 07A8  
                          u721 0A3C                            u801 042C                            u650 0B14  
                          u490 0D30                            u570 06AC                            u730 0BA6  
                          u810 00F8                            u651 0B10                            u491 0D2C  
                          u571 06A8                            u731 0BA2                            u811 00F4  
                          u628 0EB6                            u580 06C4                            u660 094E  
                          u740 0BBE                            u581 06C0                            u661 094A  
                          u741 0BBA                            u590 087C                            u670 0966  
                          u750 0332                            u591 0878                            u671 0962  
                          u751 032E                            u680 09A8                            u760 0386  
                          u681 09A4                            u761 0382                            u690 09CE  
                          u770 03C6                            u907 0488                            u691 09CA  
                          u771 03C2                            u917 04FC                            u781 03D0  
                          u837 0B42                            u927 0748                            u847 08EA  
                          u791 03E2                            u937 07B6                            u857 0970  
                          u947 0830                            u867 0576                            u957 089E  
                          u877 05E6                            u967 0CF6                            u887 0660  
                          u977 0AA0                            u897 06CE                            u987 0EE0  
                          wreg 000FE8                    main@ambient 01D2                           l2001 0BE4  
                         l2011 0C48                           l2003 0C0E                           l2101 0F04  
                         l2013 0C4A                           l2005 0C32                           l2021 0B18  
                         l2103 0F06                           l2015 0C54                           l2007 0C3C  
                         l2031 0B6A                           l2023 0B3C                           l2105 0F08  
                         l2113 0E3A                           l2121 0DE0                           l2017 0C56  
                         l2009 0C3E                           l2041 0BBE                           l2033 0B76  
                         l2025 0B4A                           l2201 00D2                           l2115 0E80  
                         l2107 0D4A                           l2019 0C60                           l2043 0FCC  
                         l2051 0F52                           l2035 0B82                           l2027 0B54  
                         l2211 0140                           l2203 00DA                           l2131 0028  
                         l2125 0DEA                           l2109 0D90                           l2061 030A  
                         l2045 0FE6                           l2053 0F54                           l2029 0B5E  
                         l2037 0B8E                           l2213 0150                           l2205 00E2  
                         l2141 0040                           l2133 002C                           l2127 0E30  
                         l2119 0D9A                           l2071 03C6                           l2063 0332  
                         l2055 0F54                           l2047 0F36                           l2039 0BA6  
                         l2215 016C                           l2207 00F8                           l2151 006A  
                         l2143 0048                           l2135 0030                           l2081 100E  
                         l2073 0406                           l2065 034A                           l2049 0F38  
                         l2209 0128                           l2161 008C                           l2153 0072  
                         l2145 0052                           l2137 003C                           l2083 101E  
                         l2091 0EEA                           l2067 0388                           l2075 0422  
                         l2059 0306                           l2171 0096                           l2163 008E  
                         l2155 007A                           l2147 005A                           l2139 0040  
                         l2077 1000                           l2093 0EF4                           l2085 0ECC  
                         l1701 0C86                           l2069 03A0                           l2181 00A2  
                         l2173 009A                           l2165 0090                           l2157 0082  
                         l2149 0062                           l2079 1008                           l2095 0EFE  
                         l2087 0ED0                           l1711 0CC0                           l1703 0C8E  
                         l2191 00B2                           l2183 00A4                           l2175 009C  
                         l2167 0092                           l2159 008A                           l2097 0F00  
                         l2089 0EDA                           l1713 0CC2                           l1705 0C9C  
                         l1721 020A                           l1801 0570                           l2193 00BA  
                         l2185 00A6                           l2177 009E                           l2169 0094  
                         l2099 0F02                           l1715 0CC8                           l1707 0CA2  
                         l1731 02C4                           l1723 021E                           l1803 0580  
                         l1811 05AC                           l2195 00C2                           l2187 00A8  
                         l2179 00A0                           l1733 0F5E                           l1709 0CB8  
                         l1725 0222                           l1717 019A                           l1741 0CF0  
                         l1901 08AA                           l1821 0706                           l1813 05C4  
                         l1805 058A                           l2197 00CA                           l2189 00AE  
                         l1911 0F20                           l1903 0F0C                           l1735 0F6E  
                         l1751 103E                           l1727 0264                           l1719 01B6  
                         l1743 0D00                           l1831 0750                           l1823 0716  
                         l1815 05DC                           l1807 0594                           l2199 00CE  
                         l1913 0F22                           l1905 0F16                           l1753 1042  
                         l1761 1018                           l1921 0E90                           l1729 0280  
                         l1745 0D0C                           l1737 0CD8                           l1841 0794  
                         l1833 075A                           l1825 0726                           l1817 05F4  
                         l1809 05A0                           l1907 0F1C                           l1755 1034  
                         l1923 0E98                           l1915 102A                           l1691 0FA2  
                         l1739 0CDC                           l1747 0D18                           l1843 07AC  
                         l1835 0764                           l1827 0732                           l1819 06F2  
                         l1771 0472                           l1763 0432                           l1851 062E  
                         l1909 0F1E                           l1757 1038                           l1925 0EA0  
                         l1917 102E                           l1941 0ABC                           l1933 0A56  
                         l1749 0D30                           l1845 07C4                           l1837 0770  
                         l1829 0742                           l1781 04B2                           l1773 0482  
                         l1765 0446                           l1861 0672                           l1853 063E  
                         l1759 1014                           l1927 0EC6                           l1919 0E8C  
                         l1695 0C64                           l1951 0B14                           l1943 0AC8  
                         l1935 0A9A                           l1839 077C                           l1775 0492  
                         l1783 04BE                           l1767 0456                           l1871 06C4  
                         l1863 067C                           l1855 064A                           l1847 060A  
                         l1791 0520                           l1929 0EC8                           l1697 0C6C  
                         l1689 0F86                           l1937 0AA8                           l1945 0AD4  
                         l1881 080E                           l1785 04D8                           l1777 049C  
                         l1769 0466                           l1873 06DC                           l1865 0688  
                         l1857 065A                           l1849 061E                           l1793 0534  
                         l1961 0906                           l1953 08C0                           l1699 0C7E  
                         l1947 0AEC                           l1939 0AB2                           l1891 084C  
                         l1883 081A                           l1875 07DA                           l1787 04F2  
                         l1779 04A6                           l1859 0668                           l1867 0694  
                         l1795 0544                           l1971 094E                           l1963 0912  
                         l1955 08E4                           l1949 0B04                           l1893 0858  
                         l1885 082A                           l1877 07EE                           l1789 050A  
                         l1869 06AC                           l1797 0554                           l1981 09BC  
                         l1973 0966                           l1965 091E                           l1957 08F2  
                         l1887 0838                           l1895 0864                           l1879 07FE  
                         l1799 0560                           l1991 0A1A                           l1983 09CE  
                         l1975 097E                           l1967 092A                           l1959 08FC  
                         l1897 087C                           l1889 0842                           l1993 0A2E  
                         l1985 09E2                           l1977 0996                           l1969 0936  
                         l1899 0894                           l1995 0A40                           l1987 09F4  
                         l1979 09A8                           l1997 0FAE                           l1989 0A08  
                         l1999 0BD4                           _T2PR 000FBC                    main@reading 01DA  
                         _main 0028                           fsr2h 000FDA                           indf2 000FDF  
                         fsr2l 000FD9                           btemp 005A                           _stop 0CD8  
                         prodh 000FF4                           prodl 000FF3                           start 0024  
       __end_of_color_read_Red 0D9A                __end_of_HighISR 0024                   ___param_bank 000000  
                  _turnLeft135 06F2                    _turnRight90 0520                          ?_main 0001  
                        ?_stop 0019                __end_of___lwdiv 0CD8                          i2l320 0020  
                        _TMR0H 000FD4                          _TMR0L 000FD3     __end_of_I2C_2_Master_Start 1048  
   __end_of_I2C_2_Master_Write 101E                          plusw0 000FEB                          plusw2 000FDB  
              __end_of_turn180 08C0                 returnhome@path 0037                          ttemp5 005B  
                        ttemp6 005E                          ttemp7 0062                          status 000FD8  
                        wtemp8 005B        __end_of_color_read_Blue 0E8A          _I2C_2_Master_RepStart 102A  
              ?_color_read_Red 0005                __initialization 0FEA                   __end_of_main 019A  
                 __end_of_stop 0D4A                         ??_main 0052                         ??_stop 001D  
                __activetblptr 000000                   _turnRight135 060A                   ?_setMotorPWM 0013  
                       _CCPR1H 000FAA                         _CCPR2H 000FA6                         _CCPR3H 000F25  
                       _CCPR4H 000F21                         _RE2PPS 000E74                         _RD5PPS 000E6F  
                       _RC7PPS 000E69                         _RE4PPS 000E76                         _RD6PPS 000E70  
                       i2l2283 000A                         i2l2285 001A                         i2l2287 001E  
                       _RG6PPS 000E88                      ??_HighISR 0001       __end_of_color_click_init 0F0C  
                ??_Timer0_init 0001                   _CCPTMRS0bits 000FAD          returnstep@instruction 0036  
                       ___wmul 0F86                      ??___lwdiv 0010                         clear_0 0FF0  
                       isa$std 000001                         _square 08C0                  main@timearray 0100  
             __end_of_savepath 0FEA               __end_of_savetime 0F5E              savetime@timearray 0001  
                 _decide_color 1048                      ??_turn180 0022                         stop@mL 0019  
                       stop@mR 001B              ??_initDCmotorsPWM 0003                     __accesstop 0060  
      __end_of__initialization 0FF6       __end_of_color_read_Clear 0E3A       __end_of_color_read_Green 0DEA  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 000001               ?_color_read_Blue 0005  
              _Interrupts_init 101E                 __pcstackCOMRAM 0001            __end_of_Timer0_init 1012  
             smallmovement@dir 0022              _color_writetoaddr 0FAC                   _T2CLKCONbits 000FBF  
                 ?_turnLeft135 001E             ?_color_writetoaddr 0003                        ?___wmul 0001  
                 ?_turnRight90 001E          __end_of_smallmovement 0BD4                        ?_square 001E  
          ??_color_writetoaddr 0004                        i2u82_40 001A                        i2u82_41 0016  
                      _SSP2ADD 000ED6                        _SSP2BUF 000ED5        __end_of_Interrupts_init 102A  
       color_writetoaddr@value 0003               ??_color_read_Red 0007                        _HighISR 0008  
    __end_of_color_writetoaddr 0FCC             _I2C_2_Master_Start 103E             _I2C_2_Master_Write 1012  
                      __Hparam 0000                        __Lparam 0000                      ?_savepath 0001  
            color_read_Red@tmp 000A                      ?_savetime 0001                    _Timer0_init 1000  
          ?_I2C_2_Master_Start 0001                 decide_color@mx 0001                        ___lwdiv 0C64  
          ?_I2C_2_Master_Write 0001                     _off_period 0052                   turnLeft90@mL 001E  
                 turnLeft90@mR 0020                        __pcinit 0FEA                        __ramtop 0E00  
                      __ptext0 0028                        __ptext1 0B18                        __ptext2 0F36  
                      __ptext3 0FCC                        __ptext4 0306                        __ptext5 08C0  
                      __ptext6 0994                        __ptext7 0520                        __ptext8 060A  
                      __ptext9 0432                      _T2CONbits 000FBD                      _T2HLTbits 000FBE  
                      _turn180 07DA                        main@max 01CA           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 0FF6              ?_color_click_init 0001  
           ??_color_click_init 0005                     ??_savepath 0004                     ??_savetime 0005  
           savetime@timercount 0003                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE               returnhome@motorL 0039               returnhome@motorR 0042  
              _initDCmotorsPWM 0BD4                      _PORTFbits 000F8E                     _returnhome 0306  
                   _timercount 0056             setMotorPWM@negDuty 0018                     _returnstep 0994  
                    _TRISAbits 000F81             setMotorPWM@posDuty 0017                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87                      _TRISHbits 000F88               fullSpeedAhead@mL 0019  
             fullSpeedAhead@mR 001B       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
             ?_Interrupts_init 0001                    _CCP1CONbits 000FAB              ?_color_read_Clear 0005  
                  _CCP2CONbits 000FA7              ?_color_read_Green 0005                    _CCP3CONbits 000F26  
                  _CCP4CONbits 000F22                     main@motorL 01E2                     main@motorR 01EB  
           ??_color_read_Clear 0007             ??_color_read_Green 0007                     _turnLeft90 0432  
               _fullSpeedAhead 0A56                 __end_of___wmul 0FAC                 __end_of_square 0994  
          color_read_Clear@tmp 000A            start_initialization 0FEA            color_read_Green@tmp 000A  
      __end_of_initDCmotorsPWM 0C64         __end_of_fullSpeedAhead 0B18                       ??___wmul 0005  
                  ?_returnhome 0037                       ??_square 0023                    ?_returnstep 0024  
                  __pbssCOMRAM 0052                  __pcstackBANK1 0100                smallmovement@mL 001E  
              smallmovement@mR 0020                       ?_HighISR 0001                      _main$2600 01C8  
             ___lwdiv@dividend 000C                   ?_Timer0_init 0001                    ?_turnLeft90 001E  
              ?_fullSpeedAhead 0019                      __pintcode 0008            savepath@instruction 0003  
                     ?___lwdiv 000C           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
                ?_turnRight135 001E              _I2C_2_Master_Idle 0F5E              _I2C_2_Master_Init 0F0C  
            _I2C_2_Master_Read 0E8A               returnstep@motorL 0024               returnstep@motorR 002D  
            _I2C_2_Master_Stop 1034             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0015                       ?_turn180 001E  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 0010       initDCmotorsPWM@PWMperiod 0001  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 000F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 000F7B                       _LATDbits 000F7C                       _LATEbits 000F7D  
                     _LATFbits 000F7E                      _on_period 0054                       _LATGbits 000F7F  
                     _LATHbits 000F80                       _PIE0bits 000E29                       _PIR0bits 000E33  
             ?_initDCmotorsPWM 0001                       _SSP2CON2 000EDA                       _SSP2STAT 000ED8  
    __end_of_I2C_2_Master_Idle 0F86      __end_of_I2C_2_Master_Init 0F36      __end_of_I2C_2_Master_Read 0ECC  
            ___wmul@multiplier 0001                 ??_turnRight135 0022      __end_of_I2C_2_Master_Stop 103E  
                 setMotorPWM@m 0013    I2C_2_Master_Write@data_byte 0002                   _pathposition 0058  
            ??_color_read_Blue 0007                  ?_decide_color 0001  __end_of_I2C_2_Master_RepStart 1034  
           color_read_Blue@tmp 000A            __end_of_setMotorPWM 0306                       __Hrparam 0000  
                     __Lrparam 0000                 turnRight135@mL 001E                 turnRight135@mR 0020  
                turnLeft135@mL 001E                  turnLeft135@mR 0020                  _smallmovement 0B18  
                   _ANSELDbits 000EA7                     _ANSELFbits 000EB4            returnhome@timearray 004B  
                 savepath@path 0001                 ??_decide_color 0003                     _T0CON0bits 000FD5  
                   _T0CON1bits 000FD6                ___lwdiv@divisor 000E                ___lwdiv@counter 0012  
                     __ptext10 06F2                       __ptext11 07DA                       __ptext20 0D9A  
                     __ptext12 0CD8                       __ptext21 0DEA                       __ptext13 0A56  
                     __ptext30 0F5E                       __ptext22 0E3A                       __ptext14 019A  
                     __ptext31 0F0C                       __ptext23 102A                       __ptext15 0F86  
                     __ptext32 1000                       __ptext24 0E8A                       __ptext16 0C64  
                     __ptext33 101E                       __ptext25 0ECC                       __ptext17 0BD4  
                     __ptext26 0FAC                       __ptext18 1048                       __ptext27 1012  
                     __ptext19 0D4A                       __ptext28 1034                       __ptext29 103E  
                 _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA                       _savepath 0FCC  
                ??_turnLeft135 0022                       _savetime 0F36                       isa$xinst 000000  
                     int$flags 005A                  ??_turnRight90 0022                       main@path 0164  
               ?_smallmovement 001E                   ??_returnhome 004D                   ??_returnstep 0036  
                    turn180@mL 001E                      turn180@mR 0020                     _INTCONbits 000FF2  
                  _setMotorPWM 019A                      square@dir 0022                       intlevel2 0000  
                turnRight90@mL 001E                  turnRight90@mR 0020               ??_fullSpeedAhead 001E  
         __end_of_turnRight135 06F2             __end_of_returnhome 0432             __end_of_returnstep 0A56  
                 ??_turnLeft90 0022               _color_click_init 0ECC            __end_of_turnLeft135 07DA  
                     square@mL 001E                       square@mR 0020                     _SSP2DATPPS 000E1D  
                 _timeposition 0059                     _SSP2CLKPPS 000E1C            __end_of_turnRight90 060A  
           __end_of_turnLeft90 0520           __end_of_decide_color 104A  
