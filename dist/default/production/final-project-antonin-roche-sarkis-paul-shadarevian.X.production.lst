

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 10 17:49:40 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	text35,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    50                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    51   000000                     
    52                           ; Version 2.35
    53                           ; Generated 05/05/2021 GMT
    54                           ; 
    55                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution. Publication is not required when
    69                           ;        this file is used in an embedded application.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F67K40 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87   000000                     _TRISFbits	set	3974
    88   000000                     _LATDbits	set	3964
    89   000000                     _LATFbits	set	3966
    90   000000                     _TRISGbits	set	3975
    91   000000                     _TRISEbits	set	3973
    92   000000                     _LATGbits	set	3967
    93   000000                     _SSP2CON2bits	set	3802
    94   000000                     _SSP2CLKPPS	set	3612
    95   000000                     _SSP2DATPPS	set	3613
    96   000000                     _ANSELDbits	set	3751
    97   000000                     _SSP2ADD	set	3798
    98   000000                     _SSP2CON1bits	set	3801
    99   000000                     _LATCbits	set	3963
   100   000000                     _LATEbits	set	3965
   101   000000                     _SSP2CON2	set	3802
   102   000000                     _TRISDbits	set	3972
   103   000000                     _CCPR4H	set	3873
   104   000000                     _CCPR3H	set	3877
   105   000000                     _SSP2STAT	set	3800
   106   000000                     _ANSELFbits	set	3764
   107   000000                     _SSP2BUF	set	3797
   108   000000                     _PIE0bits	set	3625
   109   000000                     _PIR0bits	set	3635
   110   000000                     _RC7PPS	set	3689
   111   000000                     _RD5PPS	set	3695
   112   000000                     _RE2PPS	set	3700
   113   000000                     _RD6PPS	set	3696
   114   000000                     _TRISAbits	set	3969
   115   000000                     _LATHbits	set	3968
   116   000000                     _TRISCbits	set	3971
   117   000000                     _PORTFbits	set	3982
   118   000000                     _TRISHbits	set	3976
   119   000000                     _T2PR	set	4028
   120   000000                     _T2CONbits	set	4029
   121   000000                     _CCPR2H	set	4006
   122   000000                     _CCPR1H	set	4010
   123   000000                     _RE4PPS	set	3702
   124   000000                     _RG6PPS	set	3720
   125   000000                     _ANSELAbits	set	3730
   126   000000                     _TMR0L	set	4051
   127   000000                     _TMR0H	set	4052
   128   000000                     _T0CON0bits	set	4053
   129   000000                     _T2CLKCONbits	set	4031
   130   000000                     _T2HLTbits	set	4030
   131   000000                     _CCP1CONbits	set	4011
   132   000000                     _CCPTMRS0bits	set	4013
   133   000000                     _CCP2CONbits	set	4007
   134   000000                     _ADREFbits	set	3928
   135   000000                     _LATAbits	set	3961
   136   000000                     _CCP3CONbits	set	3878
   137   000000                     _CCP4CONbits	set	3874
   138   000000                     _T0CON1bits	set	4054
   139   000000                     _INTCONbits	set	4082
   140   000000                     _ADPCH	set	3935
   141   000000                     _ADRESH	set	3940
   142   000000                     _ADCON0bits	set	3936
   143                           
   144                           ; #config settings
   145                           
   146                           	psect	cinit
   147   0015EA                     __pcinit:
   148                           	callstack 0
   149   0015EA                     start_initialization:
   150                           	callstack 0
   151   0015EA                     __initialization:
   152                           	callstack 0
   153                           
   154                           ; Clear objects allocated to COMRAM (8 bytes)
   155   0015EA  EE00  F053         	lfsr	0,__pbssCOMRAM
   156   0015EE  0E08               	movlw	8
   157   0015F0                     clear_0:
   158   0015F0  6AEE               	clrf	postinc0,c
   159   0015F2  06E8               	decf	wreg,f,c
   160   0015F4  E1FD               	bnz	clear_0
   161   0015F6                     end_of_initialization:
   162                           	callstack 0
   163   0015F6                     __end_of__initialization:
   164                           	callstack 0
   165   0015F6  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   166   0015F8  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   167   0015FA  0100               	movlb	0
   168   0015FC  EFAD  F002         	goto	_main	;jump to C main() function
   169                           
   170                           	psect	bssCOMRAM
   171   000053                     __pbssCOMRAM:
   172                           	callstack 0
   173   000053                     _off_period:
   174                           	callstack 0
   175   000053                     	ds	2
   176   000055                     _on_period:
   177                           	callstack 0
   178   000055                     	ds	2
   179   000057                     _timercount:
   180                           	callstack 0
   181   000057                     	ds	2
   182   000059                     _pathposition:
   183                           	callstack 0
   184   000059                     	ds	1
   185   00005A                     _timeposition:
   186                           	callstack 0
   187   00005A                     	ds	1
   188                           
   189                           	psect	cstackBANK1
   190   000100                     __pcstackBANK1:
   191                           	callstack 0
   192   000100                     main@timearray:
   193                           	callstack 0
   194                           
   195                           ; 100 bytes @ 0x0
   196   000100                     	ds	100
   197   000164                     main@path:
   198                           	callstack 0
   199                           
   200                           ; 100 bytes @ 0x64
   201   000164                     	ds	100
   202   0001C8                     _main$2741:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0xC8
   206   0001C8                     	ds	2
   207   0001CA                     main@ambient:
   208                           	callstack 0
   209                           
   210                           ; 8 bytes @ 0xCA
   211   0001CA                     	ds	8
   212   0001D2                     main@max:
   213                           	callstack 0
   214                           
   215                           ; 8 bytes @ 0xD2
   216   0001D2                     	ds	8
   217   0001DA                     main@reading:
   218                           	callstack 0
   219                           
   220                           ; 8 bytes @ 0xDA
   221   0001DA                     	ds	8
   222   0001E2                     main@motorL:
   223                           	callstack 0
   224                           
   225                           ; 9 bytes @ 0xE2
   226   0001E2                     	ds	9
   227   0001EB                     main@motorR:
   228                           	callstack 0
   229                           
   230                           ; 9 bytes @ 0xEB
   231   0001EB                     	ds	9
   232                           
   233                           	psect	cstackCOMRAM
   234   000001                     __pcstackCOMRAM:
   235                           	callstack 0
   236   000001                     ??_I2C_2_Master_Idle:
   237   000001                     ?_ADC_getval:
   238                           	callstack 0
   239   000001                     ?_savetime:
   240                           	callstack 0
   241   000001                     ?___wmul:
   242                           	callstack 0
   243   000001                     initDCmotorsPWM@PWMperiod:
   244                           	callstack 0
   245   000001                     savepath@path:
   246                           	callstack 0
   247   000001                     savetime@timearray:
   248                           	callstack 0
   249   000001                     ___wmul@multiplier:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0x0
   253   000001                     	ds	1
   254   000002                     ??_I2C_2_Master_Read:
   255   000002                     I2C_2_Master_Write@data_byte:
   256                           	callstack 0
   257                           
   258                           ; 1 bytes @ 0x1
   259   000002                     	ds	1
   260   000003                     I2C_2_Master_Read@ack:
   261                           	callstack 0
   262   000003                     savepath@instruction:
   263                           	callstack 0
   264   000003                     color_writetoaddr@value:
   265                           	callstack 0
   266   000003                     savetime@timercount:
   267                           	callstack 0
   268   000003                     ADC_getval@tmpval:
   269                           	callstack 0
   270   000003                     ___wmul@multiplicand:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x2
   274   000003                     	ds	1
   275   000004                     ??_savepath:
   276   000004                     I2C_2_Master_Read@tmp:
   277                           	callstack 0
   278   000004                     color_writetoaddr@address:
   279                           	callstack 0
   280                           
   281                           ; 1 bytes @ 0x3
   282   000004                     	ds	1
   283   000005                     ??_color_click_init:
   284   000005                     ??_savetime:
   285   000005                     ?_color_read_Red:
   286                           	callstack 0
   287   000005                     ?_color_read_Blue:
   288                           	callstack 0
   289   000005                     ?_color_read_Green:
   290                           	callstack 0
   291   000005                     ?_color_read_Clear:
   292                           	callstack 0
   293   000005                     ___wmul@product:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x4
   297   000005                     	ds	2
   298   000007                     ??_color_read_Red:
   299   000007                     ??_color_read_Blue:
   300   000007                     ??_color_read_Green:
   301   000007                     ??_color_read_Clear:
   302                           
   303                           ; 1 bytes @ 0x6
   304   000007                     	ds	3
   305   00000A                     color_read_Red@tmp:
   306                           	callstack 0
   307   00000A                     color_read_Green@tmp:
   308                           	callstack 0
   309   00000A                     color_read_Blue@tmp:
   310                           	callstack 0
   311   00000A                     color_read_Clear@tmp:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x9
   315   00000A                     	ds	2
   316   00000C                     ?___lwdiv:
   317                           	callstack 0
   318   00000C                     ___lwdiv@dividend:
   319                           	callstack 0
   320                           
   321                           ; 2 bytes @ 0xB
   322   00000C                     	ds	2
   323   00000E                     ___lwdiv@divisor:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0xD
   327   00000E                     	ds	2
   328   000010                     ___lwdiv@quotient:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0xF
   332   000010                     	ds	2
   333   000012                     ___lwdiv@counter:
   334                           	callstack 0
   335                           
   336                           ; 1 bytes @ 0x11
   337   000012                     	ds	1
   338   000013                     setMotorPWM@m:
   339                           	callstack 0
   340   000013                     decide_color@mx:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x12
   344   000013                     	ds	2
   345   000015                     ??_setMotorPWM:
   346                           
   347                           ; 1 bytes @ 0x14
   348   000015                     	ds	2
   349   000017                     setMotorPWM@posDuty:
   350                           	callstack 0
   351   000017                     _decide_color$2742:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x16
   355   000017                     	ds	1
   356   000018                     setMotorPWM@negDuty:
   357                           	callstack 0
   358                           
   359                           ; 1 bytes @ 0x17
   360   000018                     	ds	1
   361   000019                     stop@mL:
   362                           	callstack 0
   363   000019                     fullSpeedAhead@mL:
   364                           	callstack 0
   365   000019                     decide_color@gr:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0x18
   369   000019                     	ds	2
   370   00001B                     stop@mR:
   371                           	callstack 0
   372   00001B                     fullSpeedAhead@mR:
   373                           	callstack 0
   374   00001B                     decide_color@rr:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x1A
   378   00001B                     	ds	2
   379   00001D                     ??_stop:
   380   00001D                     fullSpeedAhead@dir:
   381                           	callstack 0
   382   00001D                     decide_color@br:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0x1C
   386   00001D                     	ds	1
   387   00001E                     ??_fullSpeedAhead:
   388   00001E                     turnLeft90@mL:
   389                           	callstack 0
   390   00001E                     turnRight90@mL:
   391                           	callstack 0
   392   00001E                     turnLeft135@mL:
   393                           	callstack 0
   394   00001E                     turnRight135@mL:
   395                           	callstack 0
   396   00001E                     turn180@mL:
   397                           	callstack 0
   398   00001E                     square@mL:
   399                           	callstack 0
   400   00001E                     smallmovement@mL:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x1D
   404   00001E                     	ds	2
   405   000020                     turnLeft90@mR:
   406                           	callstack 0
   407   000020                     turnRight90@mR:
   408                           	callstack 0
   409   000020                     turnLeft135@mR:
   410                           	callstack 0
   411   000020                     turnRight135@mR:
   412                           	callstack 0
   413   000020                     turn180@mR:
   414                           	callstack 0
   415   000020                     square@mR:
   416                           	callstack 0
   417   000020                     smallmovement@mR:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0x1F
   421   000020                     	ds	2
   422   000022                     ??_turnLeft90:
   423   000022                     ??_turnRight90:
   424   000022                     ??_turnLeft135:
   425   000022                     ??_turnRight135:
   426   000022                     ??_turn180:
   427   000022                     square@dir:
   428                           	callstack 0
   429   000022                     smallmovement@dir:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0x21
   433   000022                     	ds	1
   434   000023                     ??_square:
   435   000023                     ??_smallmovement:
   436                           
   437                           ; 1 bytes @ 0x22
   438   000023                     	ds	2
   439   000025                     returnstep@motorL:
   440                           	callstack 0
   441                           
   442                           ; 9 bytes @ 0x24
   443   000025                     	ds	9
   444   00002E                     returnstep@motorR:
   445                           	callstack 0
   446                           
   447                           ; 9 bytes @ 0x2D
   448   00002E                     	ds	9
   449   000037                     returnstep@instruction:
   450                           	callstack 0
   451                           
   452                           ; 1 bytes @ 0x36
   453   000037                     	ds	1
   454   000038                     returnhome@path:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x37
   458   000038                     	ds	2
   459   00003A                     returnhome@motorL:
   460                           	callstack 0
   461                           
   462                           ; 9 bytes @ 0x39
   463   00003A                     	ds	9
   464   000043                     returnhome@motorR:
   465                           	callstack 0
   466                           
   467                           ; 9 bytes @ 0x42
   468   000043                     	ds	9
   469   00004C                     returnhome@timearray:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x4B
   473   00004C                     	ds	2
   474   00004E                     ??_returnhome:
   475                           
   476                           ; 1 bytes @ 0x4D
   477   00004E                     	ds	5
   478   000053                     
   479                           ; 1 bytes @ 0x52
   480 ;;
   481 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   482 ;;
   483 ;; *************** function _main *****************
   484 ;; Defined at:
   485 ;;		line 21 in file "mainfinal.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;  step            1    0        unsigned char 
   490 ;;  path          100  100[BANK1 ] unsigned char [100]
   491 ;;  timearray     100    0[BANK1 ] unsigned char [100]
   492 ;;  motorR          9  235[BANK1 ] struct DC_motor
   493 ;;  motorL          9  226[BANK1 ] struct DC_motor
   494 ;;  reading         8  218[BANK1 ] struct colors
   495 ;;  max             8  210[BANK1 ] struct colors
   496 ;;  ambient         8  202[BANK1 ] struct colors
   497 ;;  PWMcycle        2    0        unsigned int 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   508 ;;      Locals:         0       0     244       0       0       0       0       0       0       0       0       0       
      +0       0       0
   509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   510 ;;      Totals:         0       0     244       0       0       0       0       0       0       0       0       0       
      +0       0       0
   511 ;;Total ram usage:      244 bytes
   512 ;; Hardware stack levels required when called: 7
   513 ;; This function calls:
   514 ;;		_ADC_getval
   515 ;;		_ADC_init
   516 ;;		_I2C_2_Master_Init
   517 ;;		_Interrupts_init
   518 ;;		_Timer0_init
   519 ;;		___lwdiv
   520 ;;		_color_click_init
   521 ;;		_color_read_Blue
   522 ;;		_color_read_Clear
   523 ;;		_color_read_Green
   524 ;;		_color_read_Red
   525 ;;		_decide_color
   526 ;;		_fullSpeedAhead
   527 ;;		_initDCmotorsPWM
   528 ;;		_returnhome
   529 ;;		_savepath
   530 ;;		_savetime
   531 ;;		_smallmovement
   532 ;;		_square
   533 ;;		_turn180
   534 ;;		_turnLeft135
   535 ;;		_turnLeft90
   536 ;;		_turnRight135
   537 ;;		_turnRight90
   538 ;; This function is called by:
   539 ;;		Startup code after reset
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text0
   544   00055A                     __ptext0:
   545                           	callstack 0
   546   00055A                     _main:
   547                           	callstack 24
   548   00055A                     
   549                           ;mainfinal.c: 23:     Timer0_init();
   550   00055A  EC00  F00B         	call	_Timer0_init	;wreg free
   551   00055E                     
   552                           ;mainfinal.c: 24:     Interrupts_init();
   553   00055E  EC0F  F00B         	call	_Interrupts_init	;wreg free
   554   000562                     
   555                           ;mainfinal.c: 25:     initDCmotorsPWM(199);
   556   000562  0E00               	movlw	0
   557   000564  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   558   000566  0EC7               	movlw	199
   559   000568  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   560   00056A  ECCD  F008         	call	_initDCmotorsPWM	;wreg free
   561   00056E                     
   562                           ;mainfinal.c: 26:     color_click_init();
   563   00056E  EC49  F00A         	call	_color_click_init	;wreg free
   564   000572                     
   565                           ;mainfinal.c: 31:     color_click_init();
   566   000572  EC49  F00A         	call	_color_click_init	;wreg free
   567                           
   568                           ;mainfinal.c: 32:     I2C_2_Master_Init();
   569   000576  EC69  F00A         	call	_I2C_2_Master_Init	;wreg free
   570   00057A                     
   571                           ;mainfinal.c: 35:     struct colors reading, max, ambient;;mainfinal.c: 38:     reading.
      +                          red = 0;
   572   00057A  0E00               	movlw	0
   573   00057C  0101               	movlb	1	; () banked
   574   00057E  6FDB               	movwf	(main@reading+1)& (0+255),b
   575   000580  0E00               	movlw	0
   576   000582  6FDA               	movwf	main@reading& (0+255),b
   577   000584                     
   578                           ; BSR set to: 1
   579                           ;mainfinal.c: 39:     reading.blue = 0;
   580   000584  0E00               	movlw	0
   581   000586  6FDD               	movwf	(main@reading+3)& (0+255),b
   582   000588  0E00               	movlw	0
   583   00058A  6FDC               	movwf	(main@reading+2)& (0+255),b
   584   00058C                     
   585                           ; BSR set to: 1
   586                           ;mainfinal.c: 40:     reading.green = 0;
   587   00058C  0E00               	movlw	0
   588   00058E  6FDF               	movwf	(main@reading+5)& (0+255),b
   589   000590  0E00               	movlw	0
   590   000592  6FDE               	movwf	(main@reading+4)& (0+255),b
   591   000594                     
   592                           ; BSR set to: 1
   593                           ;mainfinal.c: 41:     reading.clear = 0;
   594   000594  0E00               	movlw	0
   595   000596  6FE1               	movwf	(main@reading+7)& (0+255),b
   596   000598  0E00               	movlw	0
   597   00059A  6FE0               	movwf	(main@reading+6)& (0+255),b
   598   00059C                     
   599                           ; BSR set to: 1
   600                           ;mainfinal.c: 43:     max.red = 0;
   601   00059C  0E00               	movlw	0
   602   00059E  6FD3               	movwf	(main@max+1)& (0+255),b
   603   0005A0  0E00               	movlw	0
   604   0005A2  6FD2               	movwf	main@max& (0+255),b
   605   0005A4                     
   606                           ; BSR set to: 1
   607                           ;mainfinal.c: 44:     max.blue = 0;
   608   0005A4  0E00               	movlw	0
   609   0005A6  6FD5               	movwf	(main@max+3)& (0+255),b
   610   0005A8  0E00               	movlw	0
   611   0005AA  6FD4               	movwf	(main@max+2)& (0+255),b
   612   0005AC                     
   613                           ; BSR set to: 1
   614                           ;mainfinal.c: 45:     max.green = 0;
   615   0005AC  0E00               	movlw	0
   616   0005AE  6FD7               	movwf	(main@max+5)& (0+255),b
   617   0005B0  0E00               	movlw	0
   618   0005B2  6FD6               	movwf	(main@max+4)& (0+255),b
   619   0005B4                     
   620                           ; BSR set to: 1
   621                           ;mainfinal.c: 46:     max.clear = 0;
   622   0005B4  0E00               	movlw	0
   623   0005B6  6FD9               	movwf	(main@max+7)& (0+255),b
   624   0005B8  0E00               	movlw	0
   625   0005BA  6FD8               	movwf	(main@max+6)& (0+255),b
   626   0005BC                     
   627                           ; BSR set to: 1
   628                           ;mainfinal.c: 48:     LATFbits.LATF7 = 1;
   629   0005BC  8E7E               	bsf	126,7,c	;volatile
   630   0005BE                     
   631                           ; BSR set to: 1
   632                           ;mainfinal.c: 49:     LATGbits.LATG1 = 1;
   633   0005BE  827F               	bsf	127,1,c	;volatile
   634   0005C0                     
   635                           ; BSR set to: 1
   636                           ;mainfinal.c: 50:     LATAbits.LATA4 = 1;
   637   0005C0  8879               	bsf	121,4,c	;volatile
   638   0005C2                     
   639                           ; BSR set to: 1
   640                           ;mainfinal.c: 52:     TRISDbits.TRISD3 = 0;
   641   0005C2  9684               	bcf	132,3,c	;volatile
   642   0005C4                     
   643                           ; BSR set to: 1
   644                           ;mainfinal.c: 53:     LATDbits.LATD3 = 0;
   645   0005C4  967C               	bcf	124,3,c	;volatile
   646   0005C6                     
   647                           ; BSR set to: 1
   648                           ;mainfinal.c: 55:     TRISFbits.TRISF2 = 1;
   649   0005C6  8486               	bsf	134,2,c	;volatile
   650   0005C8                     
   651                           ; BSR set to: 1
   652                           ;mainfinal.c: 56:     ANSELFbits.ANSELF2=0;
   653   0005C8  010E               	movlb	14	; () banked
   654   0005CA  95B4               	bcf	180,2,b	;volatile
   655   0005CC                     
   656                           ; BSR set to: 14
   657                           ;mainfinal.c: 57:     LATDbits.LATD7 = 0;
   658   0005CC  9E7C               	bcf	124,7,c	;volatile
   659   0005CE                     
   660                           ; BSR set to: 14
   661                           ;mainfinal.c: 58:     TRISDbits.TRISD7 = 0;
   662   0005CE  9E84               	bcf	132,7,c	;volatile
   663                           
   664                           ;mainfinal.c: 66:     ADC_init();
   665   0005D0  ECE8  F00A         	call	_ADC_init	;wreg free
   666   0005D4                     
   667                           ;mainfinal.c: 67:     if (ADC_getval()<100){LATDbits.LATD7 = 1;}
   668   0005D4  ECC9  F00A         	call	_ADC_getval	;wreg free
   669   0005D8  5002               	movf	(?_ADC_getval+1)^0,w,c
   670   0005DA  E107               	bnz	u1691
   671   0005DC  0E64               	movlw	100
   672   0005DE  5C01               	subwf	?_ADC_getval^0,w,c
   673   0005E0  B0D8               	btfsc	status,0,c
   674   0005E2  EFF5  F002         	goto	u1691
   675   0005E6  EFF7  F002         	goto	u1690
   676   0005EA                     u1691:
   677   0005EA  EFF8  F002         	goto	l303
   678   0005EE                     u1690:
   679   0005EE  8E7C               	bsf	124,7,c	;volatile
   680   0005F0                     l303:
   681                           
   682                           ;mainfinal.c: 71:     LATHbits.LATH1=0;
   683   0005F0  9280               	bcf	128,1,c	;volatile
   684                           
   685                           ;mainfinal.c: 72:     TRISHbits.TRISH1 = 0;
   686   0005F2  9288               	bcf	136,1,c	;volatile
   687                           
   688                           ;mainfinal.c: 74:     LATDbits.LATD3=0;
   689   0005F4  967C               	bcf	124,3,c	;volatile
   690                           
   691                           ;mainfinal.c: 75:     TRISDbits.TRISD3 = 0;
   692   0005F6  9684               	bcf	132,3,c	;volatile
   693                           
   694                           ;mainfinal.c: 77:     LATDbits.LATD4=0;
   695   0005F8  987C               	bcf	124,4,c	;volatile
   696                           
   697                           ;mainfinal.c: 78:     TRISDbits.TRISD4 = 0;
   698   0005FA  9884               	bcf	132,4,c	;volatile
   699   0005FC                     
   700                           ;mainfinal.c: 82:     struct DC_motor motorL, motorR;;mainfinal.c: 84:     motorR.power 
      +                          = 0;
   701   0005FC  0E00               	movlw	0
   702   0005FE  0101               	movlb	1	; () banked
   703   000600  6FEB               	movwf	main@motorR& (0+255),b
   704                           
   705                           ;mainfinal.c: 85:     motorL.direction = 1;
   706   000602  0E01               	movlw	1
   707   000604  6FE3               	movwf	(main@motorL+1)& (0+255),b
   708   000606                     
   709                           ; BSR set to: 1
   710                           ;mainfinal.c: 86:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   711   000606  0EAA               	movlw	170
   712   000608  6FE7               	movwf	(main@motorL+5)& (0+255),b
   713   00060A  0E0F               	movlw	15
   714   00060C  6FE8               	movwf	(main@motorL+6)& (0+255),b
   715   00060E                     
   716                           ; BSR set to: 1
   717                           ;mainfinal.c: 87:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   718   00060E  0EA6               	movlw	166
   719   000610  6FE9               	movwf	(main@motorL+7)& (0+255),b
   720   000612  0E0F               	movlw	15
   721   000614  6FEA               	movwf	(main@motorL+8)& (0+255),b
   722   000616                     
   723                           ; BSR set to: 1
   724                           ;mainfinal.c: 88:     motorL.PWMperiod=PWMcycle;
   725   000616  0E00               	movlw	0
   726   000618  6FE6               	movwf	(main@motorL+4)& (0+255),b
   727   00061A  0EC7               	movlw	199
   728   00061C  6FE5               	movwf	(main@motorL+3)& (0+255),b
   729                           
   730                           ;mainfinal.c: 90:     motorL.power = 0;
   731   00061E  0E00               	movlw	0
   732   000620  6FE2               	movwf	main@motorL& (0+255),b
   733                           
   734                           ;mainfinal.c: 91:     motorR.direction = 1;
   735   000622  0E01               	movlw	1
   736   000624  6FEC               	movwf	(main@motorR+1)& (0+255),b
   737   000626                     
   738                           ; BSR set to: 1
   739                           ;mainfinal.c: 92:     motorR.PWMperiod=PWMcycle;
   740   000626  0E00               	movlw	0
   741   000628  6FEF               	movwf	(main@motorR+4)& (0+255),b
   742   00062A  0EC7               	movlw	199
   743   00062C  6FEE               	movwf	(main@motorR+3)& (0+255),b
   744   00062E                     
   745                           ; BSR set to: 1
   746                           ;mainfinal.c: 93:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   747   00062E  0E25               	movlw	37
   748   000630  6FF0               	movwf	(main@motorR+5)& (0+255),b
   749   000632  0E0F               	movlw	15
   750   000634  6FF1               	movwf	(main@motorR+6)& (0+255),b
   751   000636                     
   752                           ; BSR set to: 1
   753                           ;mainfinal.c: 94:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   754   000636  0E21               	movlw	33
   755   000638  6FF2               	movwf	(main@motorR+7)& (0+255),b
   756   00063A  0E0F               	movlw	15
   757   00063C  6FF3               	movwf	(main@motorR+8)& (0+255),b
   758   00063E                     
   759                           ; BSR set to: 1
   760                           ;mainfinal.c: 98:     char path[100];;mainfinal.c: 99:     char timearray[100];;mainfina
      +                          l.c: 105:     TRISFbits.TRISF2 = 1;
   761   00063E  8486               	bsf	134,2,c	;volatile
   762   000640                     
   763                           ; BSR set to: 1
   764                           ;mainfinal.c: 106:     ANSELFbits.ANSELF2=0;
   765   000640  010E               	movlb	14	; () banked
   766   000642  95B4               	bcf	180,2,b	;volatile
   767   000644                     
   768                           ; BSR set to: 14
   769                           ;mainfinal.c: 107:     LATDbits.LATD7 = 0;
   770   000644  9E7C               	bcf	124,7,c	;volatile
   771   000646                     
   772                           ; BSR set to: 14
   773                           ;mainfinal.c: 108:     TRISDbits.TRISD7 = 0;
   774   000646  9E84               	bcf	132,7,c	;volatile
   775   000648                     
   776                           ; BSR set to: 14
   777                           ;mainfinal.c: 111:     TRISFbits.TRISF3 = 1;
   778   000648  8686               	bsf	134,3,c	;volatile
   779   00064A                     
   780                           ; BSR set to: 14
   781                           ;mainfinal.c: 112:     ANSELFbits.ANSELF3 = 0;
   782   00064A  97B4               	bcf	180,3,b	;volatile
   783   00064C                     
   784                           ; BSR set to: 14
   785                           ;mainfinal.c: 113:     LATHbits.LATH3 = 0;
   786   00064C  9680               	bcf	128,3,c	;volatile
   787   00064E                     
   788                           ; BSR set to: 14
   789                           ;mainfinal.c: 114:     TRISHbits.TRISH3 = 0;
   790   00064E  9688               	bcf	136,3,c	;volatile
   791   000650                     l304:
   792   000650  B68E               	btfsc	142,3,c	;volatile
   793   000652  EF2D  F003         	goto	u1701
   794   000656  EF2F  F003         	goto	u1700
   795   00065A                     u1701:
   796   00065A  EF28  F003         	goto	l304
   797   00065E                     u1700:
   798   00065E                     
   799                           ;mainfinal.c: 119:     LATHbits.LATH3 = 1;
   800   00065E  8680               	bsf	128,3,c	;volatile
   801   000660                     
   802                           ;mainfinal.c: 120:     ambient.red = color_read_Red();
   803   000660  EC88  F009         	call	_color_read_Red	;wreg free
   804   000664  C005  F1CA         	movff	?_color_read_Red,main@ambient
   805   000668  C006  F1CB         	movff	?_color_read_Red+1,main@ambient+1
   806                           
   807                           ;mainfinal.c: 121:     ambient.blue = color_read_Blue();
   808   00066C  EC00  F00A         	call	_color_read_Blue	;wreg free
   809   000670  C005  F1CC         	movff	?_color_read_Blue,main@ambient+2
   810   000674  C006  F1CD         	movff	?_color_read_Blue+1,main@ambient+3
   811                           
   812                           ;mainfinal.c: 122:     ambient.green = color_read_Green();
   813   000678  ECB0  F009         	call	_color_read_Green	;wreg free
   814   00067C  C005  F1CE         	movff	?_color_read_Green,main@ambient+4
   815   000680  C006  F1CF         	movff	?_color_read_Green+1,main@ambient+5
   816                           
   817                           ;mainfinal.c: 123:     ambient.clear = color_read_Clear();
   818   000684  ECD8  F009         	call	_color_read_Clear	;wreg free
   819   000688  C005  F1D0         	movff	?_color_read_Clear,main@ambient+6
   820   00068C  C006  F1D1         	movff	?_color_read_Clear+1,main@ambient+7
   821   000690                     
   822                           ;mainfinal.c: 124:     LATHbits.LATH3 = 0;
   823   000690  9680               	bcf	128,3,c	;volatile
   824   000692                     l307:
   825   000692  B48E               	btfsc	142,2,c	;volatile
   826   000694  EF4E  F003         	goto	u1711
   827   000698  EF50  F003         	goto	u1710
   828   00069C                     u1711:
   829   00069C  EF49  F003         	goto	l307
   830   0006A0                     u1710:
   831   0006A0                     
   832                           ;mainfinal.c: 129:     LATDbits.LATD7 = 1;
   833   0006A0  8E7C               	bsf	124,7,c	;volatile
   834   0006A2                     
   835                           ;mainfinal.c: 130:     max.red = color_read_Red();
   836   0006A2  EC88  F009         	call	_color_read_Red	;wreg free
   837   0006A6  C005  F1D2         	movff	?_color_read_Red,main@max
   838   0006AA  C006  F1D3         	movff	?_color_read_Red+1,main@max+1
   839                           
   840                           ;mainfinal.c: 131:     max.blue = color_read_Blue();
   841   0006AE  EC00  F00A         	call	_color_read_Blue	;wreg free
   842   0006B2  C005  F1D4         	movff	?_color_read_Blue,main@max+2
   843   0006B6  C006  F1D5         	movff	?_color_read_Blue+1,main@max+3
   844                           
   845                           ;mainfinal.c: 132:     max.green = color_read_Green();
   846   0006BA  ECB0  F009         	call	_color_read_Green	;wreg free
   847   0006BE  C005  F1D6         	movff	?_color_read_Green,main@max+4
   848   0006C2  C006  F1D7         	movff	?_color_read_Green+1,main@max+5
   849                           
   850                           ;mainfinal.c: 133:     max.clear = color_read_Clear();
   851   0006C6  ECD8  F009         	call	_color_read_Clear	;wreg free
   852   0006CA  C005  F1D8         	movff	?_color_read_Clear,main@max+6
   853   0006CE  C006  F1D9         	movff	?_color_read_Clear+1,main@max+7
   854   0006D2                     
   855                           ;mainfinal.c: 134:     LATDbits.LATD7 = 0;
   856   0006D2  9E7C               	bcf	124,7,c	;volatile
   857   0006D4                     l2571:
   858                           
   859                           ;mainfinal.c: 139:     fullSpeedAhead(&motorL,&motorR, 1);
   860   0006D4  0EE2               	movlw	low main@motorL
   861   0006D6  6E19               	movwf	fullSpeedAhead@mL^0,c
   862   0006D8  0E01               	movlw	high main@motorL
   863   0006DA  6E1A               	movwf	(fullSpeedAhead@mL+1)^0,c
   864   0006DC  0EEB               	movlw	low main@motorR
   865   0006DE  6E1B               	movwf	fullSpeedAhead@mR^0,c
   866   0006E0  0E01               	movlw	high main@motorR
   867   0006E2  6E1C               	movwf	(fullSpeedAhead@mR+1)^0,c
   868   0006E4  0E01               	movlw	1
   869   0006E6  6E1D               	movwf	fullSpeedAhead@dir^0,c
   870   0006E8  EC0E  F008         	call	_fullSpeedAhead	;wreg free
   871   0006EC                     
   872                           ;mainfinal.c: 141:     reading.clear = (color_read_Clear()-ambient.clear)/(max.clear/100
      +                          0);
   873   0006EC  0E03               	movlw	3
   874   0006EE  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
   875   0006F0  0EE8               	movlw	232
   876   0006F2  6E0E               	movwf	___lwdiv@divisor^0,c
   877   0006F4  C1D8  F00C         	movff	main@max+6,___lwdiv@dividend
   878   0006F8  C1D9  F00D         	movff	main@max+7,___lwdiv@dividend+1
   879   0006FC  EC15  F009         	call	___lwdiv	;wreg free
   880   000700  C00C  F1C8         	movff	?___lwdiv,_main$2741
   881   000704  C00D  F1C9         	movff	?___lwdiv+1,_main$2741+1
   882   000708                     
   883                           ;mainfinal.c: 141:     reading.clear = (color_read_Clear()-ambient.clear)/(max.clear/100
      +                          0);
   884   000708  ECD8  F009         	call	_color_read_Clear	;wreg free
   885   00070C  0101               	movlb	1	; () banked
   886   00070E  51D0               	movf	(main@ambient+6)& (0+255),w,b
   887   000710  5C05               	subwf	?_color_read_Clear^0,w,c
   888   000712  6E0C               	movwf	___lwdiv@dividend^0,c
   889   000714  51D1               	movf	(main@ambient+7)& (0+255),w,b
   890   000716  5806               	subwfb	(?_color_read_Clear+1)^0,w,c
   891   000718  6E0D               	movwf	(___lwdiv@dividend+1)^0,c
   892   00071A  C1C8  F00E         	movff	_main$2741,___lwdiv@divisor
   893   00071E  C1C9  F00F         	movff	_main$2741+1,___lwdiv@divisor+1
   894   000722  EC15  F009         	call	___lwdiv	;wreg free
   895   000726  C00C  F1E0         	movff	?___lwdiv,main@reading+6
   896   00072A  C00D  F1E1         	movff	?___lwdiv+1,main@reading+7
   897                           
   898                           ;mainfinal.c: 143:     if (1200 > reading.clear > 30) {
   899   00072E  EF6A  F003         	goto	l2571
   900   000732  EF12  F000         	goto	start
   901   000736                     __end_of_main:
   902                           	callstack 0
   903                           
   904 ;; *************** function _smallmovement *****************
   905 ;; Defined at:
   906 ;;		line 267 in file "dc_motor.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;  mL              2   29[COMRAM] PTR struct DC_motor
   909 ;;		 -> main@motorL(9), 
   910 ;;  mR              2   31[COMRAM] PTR struct DC_motor
   911 ;;		 -> main@motorR(9), 
   912 ;;  dir             1   33[COMRAM] unsigned char 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   924 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   926 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   927 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   928 ;;Total ram usage:        6 bytes
   929 ;; Hardware stack levels used: 1
   930 ;; Hardware stack levels required when called: 4
   931 ;; This function calls:
   932 ;;		_setMotorPWM
   933 ;;		_stop
   934 ;; This function is called by:
   935 ;;		_main
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text1
   940   0010DE                     __ptext1:
   941                           	callstack 0
   942   0010DE                     _smallmovement:
   943                           	callstack 26
   944   0010DE                     
   945                           ;dc_motor.c: 267: void smallmovement(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 2
      +                          68: {;dc_motor.c: 269:     mL->direction = dir;
   946   0010DE  EE20 F001          	lfsr	2,1
   947   0010E2  501E               	movf	smallmovement@mL^0,w,c
   948   0010E4  26D9               	addwf	fsr2l,f,c
   949   0010E6  501F               	movf	(smallmovement@mL+1)^0,w,c
   950   0010E8  22DA               	addwfc	fsr2h,f,c
   951   0010EA  C022  FFDF         	movff	smallmovement@dir,indf2
   952                           
   953                           ;dc_motor.c: 270:     mR->direction = dir;
   954   0010EE  EE20 F001          	lfsr	2,1
   955   0010F2  5020               	movf	smallmovement@mR^0,w,c
   956   0010F4  26D9               	addwf	fsr2l,f,c
   957   0010F6  5021               	movf	(smallmovement@mR+1)^0,w,c
   958   0010F8  22DA               	addwfc	fsr2h,f,c
   959   0010FA  C022  FFDF         	movff	smallmovement@dir,indf2
   960                           
   961                           ;dc_motor.c: 272:     while (mL->power <= 50 || mR->power <= 50 ) {
   962   0010FE  EFAA  F008         	goto	l2239
   963   001102                     l2225:
   964                           
   965                           ;dc_motor.c: 273:         _delay((unsigned long)((10)*(64000000/4000.0)));
   966   001102  0ED0               	movlw	208
   967   001104  6E23               	movwf	??_smallmovement^0,c
   968   001106  0ECA               	movlw	202
   969   001108                     u1737:
   970   001108  2EE8               	decfsz	wreg,f,c
   971   00110A  D7FE               	bra	u1737
   972   00110C  2E23               	decfsz	??_smallmovement^0,f,c
   973   00110E  D7FC               	bra	u1737
   974   001110                     
   975                           ;dc_motor.c: 274:         mL->power++;
   976   001110  C01E  FFD9         	movff	smallmovement@mL,fsr2l
   977   001114  C01F  FFDA         	movff	smallmovement@mL+1,fsr2h
   978   001118  2ADF               	incf	indf2,f,c
   979   00111A                     
   980                           ;dc_motor.c: 275:         mR->power++;
   981   00111A  C020  FFD9         	movff	smallmovement@mR,fsr2l
   982   00111E  C021  FFDA         	movff	smallmovement@mR+1,fsr2h
   983   001122  2ADF               	incf	indf2,f,c
   984   001124                     
   985                           ;dc_motor.c: 276:         setMotorPWM(mL);
   986   001124  C01E  F013         	movff	smallmovement@mL,setMotorPWM@m
   987   001128  C01F  F014         	movff	smallmovement@mL+1,setMotorPWM@m+1
   988   00112C  EC9B  F003         	call	_setMotorPWM	;wreg free
   989   001130                     
   990                           ;dc_motor.c: 277:         setMotorPWM(mR);
   991   001130  C020  F013         	movff	smallmovement@mR,setMotorPWM@m
   992   001134  C021  F014         	movff	smallmovement@mR+1,setMotorPWM@m+1
   993   001138  EC9B  F003         	call	_setMotorPWM	;wreg free
   994   00113C                     
   995                           ;dc_motor.c: 279:     setMotorPWM(mL);
   996   00113C  C01E  F013         	movff	smallmovement@mL,setMotorPWM@m
   997   001140  C01F  F014         	movff	smallmovement@mL+1,setMotorPWM@m+1
   998   001144  EC9B  F003         	call	_setMotorPWM	;wreg free
   999   001148                     
  1000                           ;dc_motor.c: 280:     setMotorPWM(mR);
  1001   001148  C020  F013         	movff	smallmovement@mR,setMotorPWM@m
  1002   00114C  C021  F014         	movff	smallmovement@mR+1,setMotorPWM@m+1
  1003   001150  EC9B  F003         	call	_setMotorPWM	;wreg free
  1004   001154                     l2239:
  1005                           
  1006                           ;dc_motor.c: 272:     while (mL->power <= 50 || mR->power <= 50 ) {
  1007   001154  C01E  FFD9         	movff	smallmovement@mL,fsr2l
  1008   001158  C01F  FFDA         	movff	smallmovement@mL+1,fsr2h
  1009   00115C  0E32               	movlw	50
  1010   00115E  64DF               	cpfsgt	indf2,c
  1011   001160  EFB4  F008         	goto	u1191
  1012   001164  EFB6  F008         	goto	u1190
  1013   001168                     u1191:
  1014   001168  EF81  F008         	goto	l2225
  1015   00116C                     u1190:
  1016   00116C  C020  FFD9         	movff	smallmovement@mR,fsr2l
  1017   001170  C021  FFDA         	movff	smallmovement@mR+1,fsr2h
  1018   001174  0E32               	movlw	50
  1019   001176  64DF               	cpfsgt	indf2,c
  1020   001178  EFC0  F008         	goto	u1201
  1021   00117C  EFC2  F008         	goto	u1200
  1022   001180                     u1201:
  1023   001180  EF81  F008         	goto	l2225
  1024   001184                     u1200:
  1025   001184                     
  1026                           ;dc_motor.c: 283:     stop(mL, mR);
  1027   001184  C01E  F019         	movff	smallmovement@mL,stop@mL
  1028   001188  C01F  F01A         	movff	smallmovement@mL+1,stop@mL+1
  1029   00118C  C020  F01B         	movff	smallmovement@mR,stop@mR
  1030   001190  C021  F01C         	movff	smallmovement@mR+1,stop@mR+1
  1031   001194  EC4F  F009         	call	_stop	;wreg free
  1032   001198  0012               	return		;funcret
  1033   00119A                     __end_of_smallmovement:
  1034                           	callstack 0
  1035                           
  1036 ;; *************** function _savetime *****************
  1037 ;; Defined at:
  1038 ;;		line 306 in file "dc_motor.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  timearray       2    0[COMRAM] PTR unsigned char 
  1041 ;;		 -> main@timearray(100), 
  1042 ;;  timercount      2    2[COMRAM] int 
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;		None
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  2    0[COMRAM] int 
  1047 ;; Registers used:
  1048 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1054 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1057 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1058 ;;Total ram usage:        6 bytes
  1059 ;; Hardware stack levels used: 1
  1060 ;; Hardware stack levels required when called: 1
  1061 ;; This function calls:
  1062 ;;		Nothing
  1063 ;; This function is called by:
  1064 ;;		_main
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           	psect	text2
  1069   0014FC                     __ptext2:
  1070                           	callstack 0
  1071   0014FC                     _savetime:
  1072                           	callstack 29
  1073   0014FC                     
  1074                           ;dc_motor.c: 306: int savetime(char timearray[100], int timercount);dc_motor.c: 307: {;d
      +                          c_motor.c: 308:     T0CON0bits.T0EN=0;
  1075   0014FC  9ED5               	bcf	213,7,c	;volatile
  1076   0014FE                     
  1077                           ;dc_motor.c: 309:     timearray[timeposition]=timercount;
  1078   0014FE  C05A  F005         	movff	_timeposition,??_savetime
  1079   001502  6A06               	clrf	(??_savetime+1)^0,c
  1080   001504  BE05               	btfsc	??_savetime^0,7,c
  1081   001506  0606               	decf	(??_savetime+1)^0,f,c
  1082   001508  5005               	movf	??_savetime^0,w,c
  1083   00150A  2401               	addwf	savetime@timearray^0,w,c
  1084   00150C  6ED9               	movwf	fsr2l,c
  1085   00150E  5006               	movf	(??_savetime+1)^0,w,c
  1086   001510  2002               	addwfc	(savetime@timearray+1)^0,w,c
  1087   001512  6EDA               	movwf	fsr2h,c
  1088   001514  C003  FFDF         	movff	savetime@timercount,indf2
  1089   001518                     
  1090                           ;dc_motor.c: 310:     timeposition++;
  1091   001518  2A5A               	incf	_timeposition^0,f,c
  1092   00151A                     
  1093                           ;dc_motor.c: 312:     return timercount;
  1094   00151A  0E00               	movlw	0
  1095   00151C  6E02               	movwf	(?_savetime+1)^0,c
  1096   00151E  0E00               	movlw	0
  1097   001520  6E01               	movwf	?_savetime^0,c
  1098   001522  0012               	return		;funcret
  1099   001524                     __end_of_savetime:
  1100                           	callstack 0
  1101                           
  1102 ;; *************** function _savepath *****************
  1103 ;; Defined at:
  1104 ;;		line 300 in file "dc_motor.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  path            2    0[COMRAM] PTR unsigned char 
  1107 ;;		 -> main@path(100), 
  1108 ;;  instruction     1    2[COMRAM] unsigned char 
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1120 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1123 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1124 ;;Total ram usage:        5 bytes
  1125 ;; Hardware stack levels used: 1
  1126 ;; Hardware stack levels required when called: 1
  1127 ;; This function calls:
  1128 ;;		Nothing
  1129 ;; This function is called by:
  1130 ;;		_main
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text3
  1135   0015B2                     __ptext3:
  1136                           	callstack 0
  1137   0015B2                     _savepath:
  1138                           	callstack 29
  1139   0015B2                     
  1140                           ;dc_motor.c: 300: void savepath(char path[100], char instruction);dc_motor.c: 301: {;dc_
      +                          motor.c: 302:     path[pathposition] = instruction;
  1141   0015B2  C059  F004         	movff	_pathposition,??_savepath
  1142   0015B6  6A05               	clrf	(??_savepath+1)^0,c
  1143   0015B8  BE04               	btfsc	??_savepath^0,7,c
  1144   0015BA  0605               	decf	(??_savepath+1)^0,f,c
  1145   0015BC  5004               	movf	??_savepath^0,w,c
  1146   0015BE  2401               	addwf	savepath@path^0,w,c
  1147   0015C0  6ED9               	movwf	fsr2l,c
  1148   0015C2  5005               	movf	(??_savepath+1)^0,w,c
  1149   0015C4  2002               	addwfc	(savepath@path+1)^0,w,c
  1150   0015C6  6EDA               	movwf	fsr2h,c
  1151   0015C8  C003  FFDF         	movff	savepath@instruction,indf2
  1152   0015CC                     
  1153                           ;dc_motor.c: 303:     pathposition++;
  1154   0015CC  2A59               	incf	_pathposition^0,f,c
  1155   0015CE  0012               	return		;funcret
  1156   0015D0                     __end_of_savepath:
  1157                           	callstack 0
  1158                           
  1159 ;; *************** function _returnhome *****************
  1160 ;; Defined at:
  1161 ;;		line 315 in file "dc_motor.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  path            2   55[COMRAM] PTR unsigned char 
  1164 ;;		 -> main@path(100), 
  1165 ;;  motorL          9   57[COMRAM] struct DC_motor
  1166 ;;  motorR          9   66[COMRAM] struct DC_motor
  1167 ;;  timearray       2   75[COMRAM] PTR unsigned char 
  1168 ;;		 -> main@timearray(100), 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;		None
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1180 ;;      Params:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1183 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1184 ;;Total ram usage:       27 bytes
  1185 ;; Hardware stack levels used: 1
  1186 ;; Hardware stack levels required when called: 6
  1187 ;; This function calls:
  1188 ;;		_fullSpeedAhead
  1189 ;;		_returnstep
  1190 ;;		_square
  1191 ;;		_stop
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text4
  1198   0008A2                     __ptext4:
  1199                           	callstack 0
  1200   0008A2                     _returnhome:
  1201                           	callstack 24
  1202   0008A2                     l2261:
  1203                           
  1204                           ;dc_motor.c: 315: void returnhome(char path[100], DC_motor motorL, DC_motor motorR, char
      +                           timearray[100]);dc_motor.c: 316: {;dc_motor.c: 317:     while (pathposition >= 0) {
  1205   0008A2  EFDF  F004         	goto	l2277
  1206   0008A6                     l2263:
  1207                           
  1208                           ;dc_motor.c: 320:     if (path[pathposition--] == 1) {
  1209   0008A6  0659               	decf	_pathposition^0,f,c
  1210   0008A8  2859               	incf	_pathposition^0,w,c
  1211   0008AA  6E4E               	movwf	??_returnhome^0,c
  1212   0008AC  6A4F               	clrf	(??_returnhome+1)^0,c
  1213   0008AE  BE4E               	btfsc	??_returnhome^0,7,c
  1214   0008B0  064F               	decf	(??_returnhome+1)^0,f,c
  1215   0008B2  504E               	movf	??_returnhome^0,w,c
  1216   0008B4  2438               	addwf	returnhome@path^0,w,c
  1217   0008B6  6ED9               	movwf	fsr2l,c
  1218   0008B8  504F               	movf	(??_returnhome+1)^0,w,c
  1219   0008BA  2039               	addwfc	(returnhome@path+1)^0,w,c
  1220   0008BC  6EDA               	movwf	fsr2h,c
  1221   0008BE  04DE               	decf	postinc2,w,c
  1222   0008C0  A4D8               	btfss	status,2,c
  1223   0008C2  EF65  F004         	goto	u1211
  1224   0008C6  EF67  F004         	goto	u1210
  1225   0008CA                     u1211:
  1226   0008CA  EF9E  F004         	goto	l2271
  1227   0008CE                     u1210:
  1228   0008CE                     
  1229                           ;dc_motor.c: 322:     fullSpeedAhead(&motorL, &motorR, 0);
  1230   0008CE  0E3A               	movlw	low returnhome@motorL
  1231   0008D0  6E19               	movwf	fullSpeedAhead@mL^0,c
  1232   0008D2  0E00               	movlw	high returnhome@motorL
  1233   0008D4  6E1A               	movwf	(fullSpeedAhead@mL+1)^0,c
  1234   0008D6  0E43               	movlw	low returnhome@motorR
  1235   0008D8  6E1B               	movwf	fullSpeedAhead@mR^0,c
  1236   0008DA  0E00               	movlw	high returnhome@motorR
  1237   0008DC  6E1C               	movwf	(fullSpeedAhead@mR+1)^0,c
  1238   0008DE  0E00               	movlw	0
  1239   0008E0  6E1D               	movwf	fullSpeedAhead@dir^0,c
  1240   0008E2  EC0E  F008         	call	_fullSpeedAhead	;wreg free
  1241   0008E6                     l2267:
  1242   0008E6  065A               	decf	_timeposition^0,f,c
  1243   0008E8  285A               	incf	_timeposition^0,w,c
  1244   0008EA  6E4E               	movwf	??_returnhome^0,c
  1245   0008EC  6A4F               	clrf	(??_returnhome+1)^0,c
  1246   0008EE  BE4E               	btfsc	??_returnhome^0,7,c
  1247   0008F0  064F               	decf	(??_returnhome+1)^0,f,c
  1248   0008F2  504E               	movf	??_returnhome^0,w,c
  1249   0008F4  244C               	addwf	returnhome@timearray^0,w,c
  1250   0008F6  6ED9               	movwf	fsr2l,c
  1251   0008F8  504F               	movf	(??_returnhome+1)^0,w,c
  1252   0008FA  204D               	addwfc	(returnhome@timearray+1)^0,w,c
  1253   0008FC  6EDA               	movwf	fsr2h,c
  1254   0008FE  50DF               	movf	indf2,w,c
  1255   000900  6E50               	movwf	(??_returnhome+2)^0,c
  1256   000902  6A51               	clrf	(??_returnhome+3)^0,c
  1257   000904  5050               	movf	(??_returnhome+2)^0,w,c
  1258   000906  5C57               	subwf	_timercount^0,w,c
  1259   000908  5058               	movf	(_timercount+1)^0,w,c
  1260   00090A  0A80               	xorlw	128
  1261   00090C  6E52               	movwf	(??_returnhome+4)^0,c
  1262   00090E  5051               	movf	(??_returnhome+3)^0,w,c
  1263   000910  0A80               	xorlw	128
  1264   000912  5852               	subwfb	(??_returnhome+4)^0,w,c
  1265   000914  A0D8               	btfss	status,0,c
  1266   000916  EF8F  F004         	goto	u1221
  1267   00091A  EF91  F004         	goto	u1220
  1268   00091E                     u1221:
  1269   00091E  EF73  F004         	goto	l2267
  1270   000922                     u1220:
  1271   000922                     
  1272                           ;dc_motor.c: 332:     T0CON0bits.T0EN=0;
  1273   000922  9ED5               	bcf	213,7,c	;volatile
  1274   000924                     
  1275                           ;dc_motor.c: 333:     stop(&motorL, &motorR);
  1276   000924  0E3A               	movlw	low returnhome@motorL
  1277   000926  6E19               	movwf	stop@mL^0,c
  1278   000928  0E00               	movlw	high returnhome@motorL
  1279   00092A  6E1A               	movwf	(stop@mL+1)^0,c
  1280   00092C  0E43               	movlw	low returnhome@motorR
  1281   00092E  6E1B               	movwf	stop@mR^0,c
  1282   000930  0E00               	movlw	high returnhome@motorR
  1283   000932  6E1C               	movwf	(stop@mR+1)^0,c
  1284   000934  EC4F  F009         	call	_stop	;wreg free
  1285                           
  1286                           ;dc_motor.c: 335:     }
  1287   000938  EFDF  F004         	goto	l2277
  1288   00093C                     l2271:
  1289   00093C  C059  F04E         	movff	_pathposition,??_returnhome
  1290   000940  6A4F               	clrf	(??_returnhome+1)^0,c
  1291   000942  BE4E               	btfsc	??_returnhome^0,7,c
  1292   000944  064F               	decf	(??_returnhome+1)^0,f,c
  1293   000946  504E               	movf	??_returnhome^0,w,c
  1294   000948  2438               	addwf	returnhome@path^0,w,c
  1295   00094A  6ED9               	movwf	fsr2l,c
  1296   00094C  504F               	movf	(??_returnhome+1)^0,w,c
  1297   00094E  2039               	addwfc	(returnhome@path+1)^0,w,c
  1298   000950  6EDA               	movwf	fsr2h,c
  1299   000952  04DE               	decf	postinc2,w,c
  1300   000954  B4D8               	btfsc	status,2,c
  1301   000956  EFAF  F004         	goto	u1231
  1302   00095A  EFB1  F004         	goto	u1230
  1303   00095E                     u1231:
  1304   00095E  EFDF  F004         	goto	l2277
  1305   000962                     u1230:
  1306   000962                     
  1307                           ;dc_motor.c: 339:     returnstep(path[pathposition], motorL, motorR);
  1308   000962  EE20  F03A         	lfsr	2,returnhome@motorL
  1309   000966  EE00  F025         	lfsr	0,returnstep@motorL
  1310   00096A  0E08               	movlw	8
  1311   00096C                     u1241:
  1312   00096C  CFDB FFEB          	movff	plusw2,plusw0
  1313   000970  06E8               	decf	wreg,f,c
  1314   000972  E2FC               	bc	u1241
  1315   000974  EE20  F043         	lfsr	2,returnhome@motorR
  1316   000978  EE00  F02E         	lfsr	0,returnstep@motorR
  1317   00097C  0E08               	movlw	8
  1318   00097E                     u1251:
  1319   00097E  CFDB FFEB          	movff	plusw2,plusw0
  1320   000982  06E8               	decf	wreg,f,c
  1321   000984  E2FC               	bc	u1251
  1322   000986  C059  F04E         	movff	_pathposition,??_returnhome
  1323   00098A  6A4F               	clrf	(??_returnhome+1)^0,c
  1324   00098C  BE4E               	btfsc	??_returnhome^0,7,c
  1325   00098E  064F               	decf	(??_returnhome+1)^0,f,c
  1326   000990  504E               	movf	??_returnhome^0,w,c
  1327   000992  2438               	addwf	returnhome@path^0,w,c
  1328   000994  6ED9               	movwf	fsr2l,c
  1329   000996  504F               	movf	(??_returnhome+1)^0,w,c
  1330   000998  2039               	addwfc	(returnhome@path+1)^0,w,c
  1331   00099A  6EDA               	movwf	fsr2h,c
  1332   00099C  50DF               	movf	indf2,w,c
  1333   00099E  EC5E  F005         	call	_returnstep
  1334   0009A2                     
  1335                           ;dc_motor.c: 340:     square(&motorL, &motorR, 1);}
  1336   0009A2  0E3A               	movlw	low returnhome@motorL
  1337   0009A4  6E1E               	movwf	square@mL^0,c
  1338   0009A6  0E00               	movlw	high returnhome@motorL
  1339   0009A8  6E1F               	movwf	(square@mL+1)^0,c
  1340   0009AA  0E43               	movlw	low returnhome@motorR
  1341   0009AC  6E20               	movwf	square@mR^0,c
  1342   0009AE  0E00               	movlw	high returnhome@motorR
  1343   0009B0  6E21               	movwf	(square@mR+1)^0,c
  1344   0009B2  0E01               	movlw	1
  1345   0009B4  6E22               	movwf	square@dir^0,c
  1346   0009B6  ECA4  F007         	call	_square	;wreg free
  1347   0009BA  EF51  F004         	goto	l2261
  1348   0009BE                     l2277:
  1349                           
  1350                           ;dc_motor.c: 317:     while (pathposition >= 0) {
  1351   0009BE  BE59               	btfsc	_pathposition^0,7,c
  1352   0009C0  EFE6  F004         	goto	u1260
  1353   0009C4  EFE4  F004         	goto	u1261
  1354   0009C8                     u1261:
  1355   0009C8  EF53  F004         	goto	l2263
  1356   0009CC                     u1260:
  1357   0009CC  0012               	return		;funcret
  1358   0009CE                     __end_of_returnhome:
  1359                           	callstack 0
  1360                           
  1361 ;; *************** function _returnstep *****************
  1362 ;; Defined at:
  1363 ;;		line 344 in file "dc_motor.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  instruction     1    wreg     unsigned char 
  1366 ;;  motorL          9   36[COMRAM] struct DC_motor
  1367 ;;  motorR          9   45[COMRAM] struct DC_motor
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  instruction     1   54[COMRAM] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1379 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1382 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1383 ;;Total ram usage:       19 bytes
  1384 ;; Hardware stack levels used: 1
  1385 ;; Hardware stack levels required when called: 5
  1386 ;; This function calls:
  1387 ;;		_square
  1388 ;;		_turn180
  1389 ;;		_turnLeft135
  1390 ;;		_turnLeft90
  1391 ;;		_turnRight135
  1392 ;;		_turnRight90
  1393 ;; This function is called by:
  1394 ;;		_returnhome
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text5
  1399   000ABC                     __ptext5:
  1400                           	callstack 0
  1401   000ABC                     _returnstep:
  1402                           	callstack 24
  1403                           
  1404                           ;incstack = 0
  1405                           ;returnstep@instruction stored from wreg
  1406   000ABC  6E37               	movwf	returnstep@instruction^0,c
  1407   000ABE                     
  1408                           ;dc_motor.c: 345:     if (instruction == 2) {turnLeft90(&motorL,&motorR);}
  1409   000ABE  0E02               	movlw	2
  1410   000AC0  1837               	xorwf	returnstep@instruction^0,w,c
  1411   000AC2  A4D8               	btfss	status,2,c
  1412   000AC4  EF66  F005         	goto	u1131
  1413   000AC8  EF68  F005         	goto	u1130
  1414   000ACC                     u1131:
  1415   000ACC  EF72  F005         	goto	l2179
  1416   000AD0                     u1130:
  1417   000AD0  0E25               	movlw	low returnstep@motorL
  1418   000AD2  6E1E               	movwf	turnLeft90@mL^0,c
  1419   000AD4  0E00               	movlw	high returnstep@motorL
  1420   000AD6  6E1F               	movwf	(turnLeft90@mL+1)^0,c
  1421   000AD8  0E2E               	movlw	low returnstep@motorR
  1422   000ADA  6E20               	movwf	turnLeft90@mR^0,c
  1423   000ADC  0E00               	movlw	high returnstep@motorR
  1424   000ADE  6E21               	movwf	(turnLeft90@mR+1)^0,c
  1425   000AE0  ECE7  F004         	call	_turnLeft90	;wreg free
  1426   000AE4                     l2179:
  1427                           
  1428                           ;dc_motor.c: 346:     if (instruction == 3) {turnRight90(&motorL,&motorR);}
  1429   000AE4  0E03               	movlw	3
  1430   000AE6  1837               	xorwf	returnstep@instruction^0,w,c
  1431   000AE8  A4D8               	btfss	status,2,c
  1432   000AEA  EF79  F005         	goto	u1141
  1433   000AEE  EF7B  F005         	goto	u1140
  1434   000AF2                     u1141:
  1435   000AF2  EF85  F005         	goto	l2183
  1436   000AF6                     u1140:
  1437   000AF6  0E25               	movlw	low returnstep@motorL
  1438   000AF8  6E1E               	movwf	turnRight90@mL^0,c
  1439   000AFA  0E00               	movlw	high returnstep@motorL
  1440   000AFC  6E1F               	movwf	(turnRight90@mL+1)^0,c
  1441   000AFE  0E2E               	movlw	low returnstep@motorR
  1442   000B00  6E20               	movwf	turnRight90@mR^0,c
  1443   000B02  0E00               	movlw	high returnstep@motorR
  1444   000B04  6E21               	movwf	(turnRight90@mR+1)^0,c
  1445   000B06  ECD4  F005         	call	_turnRight90	;wreg free
  1446   000B0A                     l2183:
  1447                           
  1448                           ;dc_motor.c: 347:     if (instruction == 4) {turn180(&motorL,&motorR);}
  1449   000B0A  0E04               	movlw	4
  1450   000B0C  1837               	xorwf	returnstep@instruction^0,w,c
  1451   000B0E  A4D8               	btfss	status,2,c
  1452   000B10  EF8C  F005         	goto	u1151
  1453   000B14  EF8E  F005         	goto	u1150
  1454   000B18                     u1151:
  1455   000B18  EF98  F005         	goto	l2187
  1456   000B1C                     u1150:
  1457   000B1C  0E25               	movlw	low returnstep@motorL
  1458   000B1E  6E1E               	movwf	turn180@mL^0,c
  1459   000B20  0E00               	movlw	high returnstep@motorL
  1460   000B22  6E1F               	movwf	(turn180@mL+1)^0,c
  1461   000B24  0E2E               	movlw	low returnstep@motorR
  1462   000B26  6E20               	movwf	turn180@mR^0,c
  1463   000B28  0E00               	movlw	high returnstep@motorR
  1464   000B2A  6E21               	movwf	(turn180@mR+1)^0,c
  1465   000B2C  EC31  F007         	call	_turn180	;wreg free
  1466   000B30                     l2187:
  1467                           
  1468                           ;dc_motor.c: 348:     if (instruction == 5) {turnLeft135(&motorL,&motorR);}
  1469   000B30  0E05               	movlw	5
  1470   000B32  1837               	xorwf	returnstep@instruction^0,w,c
  1471   000B34  A4D8               	btfss	status,2,c
  1472   000B36  EF9F  F005         	goto	u1161
  1473   000B3A  EFA1  F005         	goto	u1160
  1474   000B3E                     u1161:
  1475   000B3E  EFAB  F005         	goto	l2191
  1476   000B42                     u1160:
  1477   000B42  0E25               	movlw	low returnstep@motorL
  1478   000B44  6E1E               	movwf	turnLeft135@mL^0,c
  1479   000B46  0E00               	movlw	high returnstep@motorL
  1480   000B48  6E1F               	movwf	(turnLeft135@mL+1)^0,c
  1481   000B4A  0E2E               	movlw	low returnstep@motorR
  1482   000B4C  6E20               	movwf	turnLeft135@mR^0,c
  1483   000B4E  0E00               	movlw	high returnstep@motorR
  1484   000B50  6E21               	movwf	(turnLeft135@mR+1)^0,c
  1485   000B52  ECBD  F006         	call	_turnLeft135	;wreg free
  1486   000B56                     l2191:
  1487                           
  1488                           ;dc_motor.c: 349:     if (instruction == 6) {turnRight135(&motorL,&motorR);}
  1489   000B56  0E06               	movlw	6
  1490   000B58  1837               	xorwf	returnstep@instruction^0,w,c
  1491   000B5A  A4D8               	btfss	status,2,c
  1492   000B5C  EFB2  F005         	goto	u1171
  1493   000B60  EFB4  F005         	goto	u1170
  1494   000B64                     u1171:
  1495   000B64  EFBE  F005         	goto	l2195
  1496   000B68                     u1170:
  1497   000B68  0E25               	movlw	low returnstep@motorL
  1498   000B6A  6E1E               	movwf	turnRight135@mL^0,c
  1499   000B6C  0E00               	movlw	high returnstep@motorL
  1500   000B6E  6E1F               	movwf	(turnRight135@mL+1)^0,c
  1501   000B70  0E2E               	movlw	low returnstep@motorR
  1502   000B72  6E20               	movwf	turnRight135@mR^0,c
  1503   000B74  0E00               	movlw	high returnstep@motorR
  1504   000B76  6E21               	movwf	(turnRight135@mR+1)^0,c
  1505   000B78  EC49  F006         	call	_turnRight135	;wreg free
  1506   000B7C                     l2195:
  1507                           
  1508                           ;dc_motor.c: 350:     if (instruction == 7) {square(&motorL,&motorR, 0);}
  1509   000B7C  0E07               	movlw	7
  1510   000B7E  1837               	xorwf	returnstep@instruction^0,w,c
  1511   000B80  A4D8               	btfss	status,2,c
  1512   000B82  EFC5  F005         	goto	u1181
  1513   000B86  EFC7  F005         	goto	u1180
  1514   000B8A                     u1181:
  1515   000B8A  EFD3  F005         	goto	l210
  1516   000B8E                     u1180:
  1517   000B8E  0E25               	movlw	low returnstep@motorL
  1518   000B90  6E1E               	movwf	square@mL^0,c
  1519   000B92  0E00               	movlw	high returnstep@motorL
  1520   000B94  6E1F               	movwf	(square@mL+1)^0,c
  1521   000B96  0E2E               	movlw	low returnstep@motorR
  1522   000B98  6E20               	movwf	square@mR^0,c
  1523   000B9A  0E00               	movlw	high returnstep@motorR
  1524   000B9C  6E21               	movwf	(square@mR+1)^0,c
  1525   000B9E  0E00               	movlw	0
  1526   000BA0  6E22               	movwf	square@dir^0,c
  1527   000BA2  ECA4  F007         	call	_square	;wreg free
  1528   000BA6                     l210:
  1529   000BA6  0012               	return		;funcret
  1530   000BA8                     __end_of_returnstep:
  1531                           	callstack 0
  1532                           
  1533 ;; *************** function _turnRight90 *****************
  1534 ;; Defined at:
  1535 ;;		line 133 in file "dc_motor.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  1538 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1539 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  1540 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      void 
  1545 ;; Registers used:
  1546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1555 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1556 ;;Total ram usage:        6 bytes
  1557 ;; Hardware stack levels used: 1
  1558 ;; Hardware stack levels required when called: 4
  1559 ;; This function calls:
  1560 ;;		_setMotorPWM
  1561 ;;		_stop
  1562 ;; This function is called by:
  1563 ;;		_returnstep
  1564 ;;		_main
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text6
  1569   000BA8                     __ptext6:
  1570                           	callstack 0
  1571   000BA8                     _turnRight90:
  1572                           	callstack 26
  1573   000BA8                     
  1574                           ;dc_motor.c: 133: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 134: { stop(m
      +                          L, mR);
  1575   000BA8  C01E  F019         	movff	turnRight90@mL,stop@mL
  1576   000BAC  C01F  F01A         	movff	turnRight90@mL+1,stop@mL+1
  1577   000BB0  C020  F01B         	movff	turnRight90@mR,stop@mR
  1578   000BB4  C021  F01C         	movff	turnRight90@mR+1,stop@mR+1
  1579   000BB8  EC4F  F009         	call	_stop	;wreg free
  1580   000BBC                     
  1581                           ;dc_motor.c: 136:     mL->direction = 1;
  1582   000BBC  EE20 F001          	lfsr	2,1
  1583   000BC0  501E               	movf	turnRight90@mL^0,w,c
  1584   000BC2  26D9               	addwf	fsr2l,f,c
  1585   000BC4  501F               	movf	(turnRight90@mL+1)^0,w,c
  1586   000BC6  22DA               	addwfc	fsr2h,f,c
  1587   000BC8  0E01               	movlw	1
  1588   000BCA  6EDF               	movwf	indf2,c
  1589   000BCC                     
  1590                           ;dc_motor.c: 137:     mR->direction = 0;
  1591   000BCC  EE20 F001          	lfsr	2,1
  1592   000BD0  5020               	movf	turnRight90@mR^0,w,c
  1593   000BD2  26D9               	addwf	fsr2l,f,c
  1594   000BD4  5021               	movf	(turnRight90@mR+1)^0,w,c
  1595   000BD6  22DA               	addwfc	fsr2h,f,c
  1596   000BD8  0E00               	movlw	0
  1597   000BDA  6EDF               	movwf	indf2,c
  1598   000BDC                     
  1599                           ;dc_motor.c: 139:     mL->power = 20;
  1600   000BDC  C01E  FFD9         	movff	turnRight90@mL,fsr2l
  1601   000BE0  C01F  FFDA         	movff	turnRight90@mL+1,fsr2h
  1602   000BE4  0E14               	movlw	20
  1603   000BE6  6EDF               	movwf	indf2,c
  1604   000BE8                     
  1605                           ;dc_motor.c: 140:     mR->power = 20;
  1606   000BE8  C020  FFD9         	movff	turnRight90@mR,fsr2l
  1607   000BEC  C021  FFDA         	movff	turnRight90@mR+1,fsr2h
  1608   000BF0  0E14               	movlw	20
  1609   000BF2  6EDF               	movwf	indf2,c
  1610                           
  1611                           ;dc_motor.c: 142:     while (mL->power <= 50 && mR->power <= 50 ) {
  1612   000BF4  EF1A  F006         	goto	l2009
  1613   000BF8                     l1999:
  1614                           
  1615                           ;dc_motor.c: 143:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1616   000BF8  0E68               	movlw	104
  1617   000BFA  6E22               	movwf	??_turnRight90^0,c
  1618   000BFC  0EE4               	movlw	228
  1619   000BFE                     u1747:
  1620   000BFE  2EE8               	decfsz	wreg,f,c
  1621   000C00  D7FE               	bra	u1747
  1622   000C02  2E22               	decfsz	??_turnRight90^0,f,c
  1623   000C04  D7FC               	bra	u1747
  1624   000C06  D000               	nop2	
  1625   000C08                     
  1626                           ;dc_motor.c: 144:         mL->power++;
  1627   000C08  C01E  FFD9         	movff	turnRight90@mL,fsr2l
  1628   000C0C  C01F  FFDA         	movff	turnRight90@mL+1,fsr2h
  1629   000C10  2ADF               	incf	indf2,f,c
  1630   000C12                     
  1631                           ;dc_motor.c: 145:         mR->power++;
  1632   000C12  C020  FFD9         	movff	turnRight90@mR,fsr2l
  1633   000C16  C021  FFDA         	movff	turnRight90@mR+1,fsr2h
  1634   000C1A  2ADF               	incf	indf2,f,c
  1635   000C1C                     
  1636                           ;dc_motor.c: 146:         setMotorPWM(mL);
  1637   000C1C  C01E  F013         	movff	turnRight90@mL,setMotorPWM@m
  1638   000C20  C01F  F014         	movff	turnRight90@mL+1,setMotorPWM@m+1
  1639   000C24  EC9B  F003         	call	_setMotorPWM	;wreg free
  1640   000C28                     
  1641                           ;dc_motor.c: 147:         setMotorPWM(mR);
  1642   000C28  C020  F013         	movff	turnRight90@mR,setMotorPWM@m
  1643   000C2C  C021  F014         	movff	turnRight90@mR+1,setMotorPWM@m+1
  1644   000C30  EC9B  F003         	call	_setMotorPWM	;wreg free
  1645   000C34                     l2009:
  1646                           
  1647                           ;dc_motor.c: 142:     while (mL->power <= 50 && mR->power <= 50 ) {
  1648   000C34  C01E  FFD9         	movff	turnRight90@mL,fsr2l
  1649   000C38  C01F  FFDA         	movff	turnRight90@mL+1,fsr2h
  1650   000C3C  0E33               	movlw	51
  1651   000C3E  60DF               	cpfslt	indf2,c
  1652   000C40  EF24  F006         	goto	u981
  1653   000C44  EF26  F006         	goto	u980
  1654   000C48                     u981:
  1655   000C48  EF32  F006         	goto	l2013
  1656   000C4C                     u980:
  1657   000C4C  C020  FFD9         	movff	turnRight90@mR,fsr2l
  1658   000C50  C021  FFDA         	movff	turnRight90@mR+1,fsr2h
  1659   000C54  0E32               	movlw	50
  1660   000C56  64DF               	cpfsgt	indf2,c
  1661   000C58  EF30  F006         	goto	u991
  1662   000C5C  EF32  F006         	goto	u990
  1663   000C60                     u991:
  1664   000C60  EFFC  F005         	goto	l1999
  1665   000C64                     u990:
  1666   000C64                     l2013:
  1667                           
  1668                           ;dc_motor.c: 150:     _delay((unsigned long)((160)*(64000000/4000.0)));
  1669   000C64  0E0D               	movlw	13
  1670   000C66  6E23               	movwf	(??_turnRight90+1)^0,c
  1671   000C68  0EFD               	movlw	253
  1672   000C6A  6E22               	movwf	??_turnRight90^0,c
  1673   000C6C  0EA2               	movlw	162
  1674   000C6E                     u1757:
  1675   000C6E  2EE8               	decfsz	wreg,f,c
  1676   000C70  D7FE               	bra	u1757
  1677   000C72  2E22               	decfsz	??_turnRight90^0,f,c
  1678   000C74  D7FC               	bra	u1757
  1679   000C76  2E23               	decfsz	(??_turnRight90+1)^0,f,c
  1680   000C78  D7FA               	bra	u1757
  1681   000C7A  D000               	nop2	
  1682   000C7C                     
  1683                           ;dc_motor.c: 152:     stop(mL, mR);
  1684   000C7C  C01E  F019         	movff	turnRight90@mL,stop@mL
  1685   000C80  C01F  F01A         	movff	turnRight90@mL+1,stop@mL+1
  1686   000C84  C020  F01B         	movff	turnRight90@mR,stop@mR
  1687   000C88  C021  F01C         	movff	turnRight90@mR+1,stop@mR+1
  1688   000C8C  EC4F  F009         	call	_stop	;wreg free
  1689   000C90  0012               	return		;funcret
  1690   000C92                     __end_of_turnRight90:
  1691                           	callstack 0
  1692                           
  1693 ;; *************** function _turnRight135 *****************
  1694 ;; Defined at:
  1695 ;;		line 181 in file "dc_motor.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  1698 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1699 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  1700 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1714 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1715 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1716 ;;Total ram usage:        6 bytes
  1717 ;; Hardware stack levels used: 1
  1718 ;; Hardware stack levels required when called: 4
  1719 ;; This function calls:
  1720 ;;		_setMotorPWM
  1721 ;;		_stop
  1722 ;; This function is called by:
  1723 ;;		_returnstep
  1724 ;;		_main
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           	psect	text7
  1729   000C92                     __ptext7:
  1730                           	callstack 0
  1731   000C92                     _turnRight135:
  1732                           	callstack 26
  1733   000C92                     
  1734                           ;dc_motor.c: 181: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 182: {;dc_mo
      +                          tor.c: 183:     stop(mL, mR);
  1735   000C92  C01E  F019         	movff	turnRight135@mL,stop@mL
  1736   000C96  C01F  F01A         	movff	turnRight135@mL+1,stop@mL+1
  1737   000C9A  C020  F01B         	movff	turnRight135@mR,stop@mR
  1738   000C9E  C021  F01C         	movff	turnRight135@mR+1,stop@mR+1
  1739   000CA2  EC4F  F009         	call	_stop	;wreg free
  1740   000CA6                     
  1741                           ;dc_motor.c: 185:     mL->direction = 1;
  1742   000CA6  EE20 F001          	lfsr	2,1
  1743   000CAA  501E               	movf	turnRight135@mL^0,w,c
  1744   000CAC  26D9               	addwf	fsr2l,f,c
  1745   000CAE  501F               	movf	(turnRight135@mL+1)^0,w,c
  1746   000CB0  22DA               	addwfc	fsr2h,f,c
  1747   000CB2  0E01               	movlw	1
  1748   000CB4  6EDF               	movwf	indf2,c
  1749   000CB6                     
  1750                           ;dc_motor.c: 186:     mR->direction = 0;
  1751   000CB6  EE20 F001          	lfsr	2,1
  1752   000CBA  5020               	movf	turnRight135@mR^0,w,c
  1753   000CBC  26D9               	addwf	fsr2l,f,c
  1754   000CBE  5021               	movf	(turnRight135@mR+1)^0,w,c
  1755   000CC0  22DA               	addwfc	fsr2h,f,c
  1756   000CC2  0E00               	movlw	0
  1757   000CC4  6EDF               	movwf	indf2,c
  1758   000CC6                     
  1759                           ;dc_motor.c: 188:     mL->power = 20;
  1760   000CC6  C01E  FFD9         	movff	turnRight135@mL,fsr2l
  1761   000CCA  C01F  FFDA         	movff	turnRight135@mL+1,fsr2h
  1762   000CCE  0E14               	movlw	20
  1763   000CD0  6EDF               	movwf	indf2,c
  1764   000CD2                     
  1765                           ;dc_motor.c: 189:     mR->power = 20;
  1766   000CD2  C020  FFD9         	movff	turnRight135@mR,fsr2l
  1767   000CD6  C021  FFDA         	movff	turnRight135@mR+1,fsr2h
  1768   000CDA  0E14               	movlw	20
  1769   000CDC  6EDF               	movwf	indf2,c
  1770                           
  1771                           ;dc_motor.c: 191:     while (mL->power <= 50 || mR->power <= 50) {
  1772   000CDE  EF8E  F006         	goto	l2065
  1773   000CE2                     l2055:
  1774                           
  1775                           ;dc_motor.c: 192:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1776   000CE2  0ED0               	movlw	208
  1777   000CE4  6E22               	movwf	??_turnRight135^0,c
  1778   000CE6  0ECA               	movlw	202
  1779   000CE8                     u1767:
  1780   000CE8  2EE8               	decfsz	wreg,f,c
  1781   000CEA  D7FE               	bra	u1767
  1782   000CEC  2E22               	decfsz	??_turnRight135^0,f,c
  1783   000CEE  D7FC               	bra	u1767
  1784   000CF0                     
  1785                           ;dc_motor.c: 193:         mL->power++;
  1786   000CF0  C01E  FFD9         	movff	turnRight135@mL,fsr2l
  1787   000CF4  C01F  FFDA         	movff	turnRight135@mL+1,fsr2h
  1788   000CF8  2ADF               	incf	indf2,f,c
  1789   000CFA                     
  1790                           ;dc_motor.c: 194:         mR->power++;
  1791   000CFA  C020  FFD9         	movff	turnRight135@mR,fsr2l
  1792   000CFE  C021  FFDA         	movff	turnRight135@mR+1,fsr2h
  1793   000D02  2ADF               	incf	indf2,f,c
  1794   000D04                     
  1795                           ;dc_motor.c: 195:         setMotorPWM(mL);
  1796   000D04  C01E  F013         	movff	turnRight135@mL,setMotorPWM@m
  1797   000D08  C01F  F014         	movff	turnRight135@mL+1,setMotorPWM@m+1
  1798   000D0C  EC9B  F003         	call	_setMotorPWM	;wreg free
  1799   000D10                     
  1800                           ;dc_motor.c: 196:         setMotorPWM(mR);
  1801   000D10  C020  F013         	movff	turnRight135@mR,setMotorPWM@m
  1802   000D14  C021  F014         	movff	turnRight135@mR+1,setMotorPWM@m+1
  1803   000D18  EC9B  F003         	call	_setMotorPWM	;wreg free
  1804   000D1C                     l2065:
  1805                           
  1806                           ;dc_motor.c: 191:     while (mL->power <= 50 || mR->power <= 50) {
  1807   000D1C  C01E  FFD9         	movff	turnRight135@mL,fsr2l
  1808   000D20  C01F  FFDA         	movff	turnRight135@mL+1,fsr2h
  1809   000D24  0E32               	movlw	50
  1810   000D26  64DF               	cpfsgt	indf2,c
  1811   000D28  EF98  F006         	goto	u1021
  1812   000D2C  EF9A  F006         	goto	u1020
  1813   000D30                     u1021:
  1814   000D30  EF71  F006         	goto	l2055
  1815   000D34                     u1020:
  1816   000D34  C020  FFD9         	movff	turnRight135@mR,fsr2l
  1817   000D38  C021  FFDA         	movff	turnRight135@mR+1,fsr2h
  1818   000D3C  0E32               	movlw	50
  1819   000D3E  64DF               	cpfsgt	indf2,c
  1820   000D40  EFA4  F006         	goto	u1031
  1821   000D44  EFA6  F006         	goto	u1030
  1822   000D48                     u1031:
  1823   000D48  EF71  F006         	goto	l2055
  1824   000D4C                     u1030:
  1825   000D4C                     
  1826                           ;dc_motor.c: 199:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1827   000D4C  0E29               	movlw	41
  1828   000D4E  6E23               	movwf	(??_turnRight135+1)^0,c
  1829   000D50  0E96               	movlw	150
  1830   000D52  6E22               	movwf	??_turnRight135^0,c
  1831   000D54  0E7F               	movlw	127
  1832   000D56                     u1777:
  1833   000D56  2EE8               	decfsz	wreg,f,c
  1834   000D58  D7FE               	bra	u1777
  1835   000D5A  2E22               	decfsz	??_turnRight135^0,f,c
  1836   000D5C  D7FC               	bra	u1777
  1837   000D5E  2E23               	decfsz	(??_turnRight135+1)^0,f,c
  1838   000D60  D7FA               	bra	u1777
  1839   000D62  F000               	nop	
  1840   000D64                     
  1841                           ;dc_motor.c: 200:     stop(mL, mR);
  1842   000D64  C01E  F019         	movff	turnRight135@mL,stop@mL
  1843   000D68  C01F  F01A         	movff	turnRight135@mL+1,stop@mL+1
  1844   000D6C  C020  F01B         	movff	turnRight135@mR,stop@mR
  1845   000D70  C021  F01C         	movff	turnRight135@mR+1,stop@mR+1
  1846   000D74  EC4F  F009         	call	_stop	;wreg free
  1847   000D78  0012               	return		;funcret
  1848   000D7A                     __end_of_turnRight135:
  1849                           	callstack 0
  1850                           
  1851 ;; *************** function _turnLeft90 *****************
  1852 ;; Defined at:
  1853 ;;		line 110 in file "dc_motor.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  1856 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1857 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  1858 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;		None
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1872 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1873 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1874 ;;Total ram usage:        6 bytes
  1875 ;; Hardware stack levels used: 1
  1876 ;; Hardware stack levels required when called: 4
  1877 ;; This function calls:
  1878 ;;		_setMotorPWM
  1879 ;;		_stop
  1880 ;; This function is called by:
  1881 ;;		_returnstep
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text8
  1887   0009CE                     __ptext8:
  1888                           	callstack 0
  1889   0009CE                     _turnLeft90:
  1890                           	callstack 26
  1891   0009CE                     
  1892                           ;dc_motor.c: 110: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 111: { stop(mL
      +                          , mR);
  1893   0009CE  C01E  F019         	movff	turnLeft90@mL,stop@mL
  1894   0009D2  C01F  F01A         	movff	turnLeft90@mL+1,stop@mL+1
  1895   0009D6  C020  F01B         	movff	turnLeft90@mR,stop@mR
  1896   0009DA  C021  F01C         	movff	turnLeft90@mR+1,stop@mR+1
  1897   0009DE  EC4F  F009         	call	_stop	;wreg free
  1898   0009E2                     
  1899                           ;dc_motor.c: 113:     mL->direction = 0;
  1900   0009E2  EE20 F001          	lfsr	2,1
  1901   0009E6  501E               	movf	turnLeft90@mL^0,w,c
  1902   0009E8  26D9               	addwf	fsr2l,f,c
  1903   0009EA  501F               	movf	(turnLeft90@mL+1)^0,w,c
  1904   0009EC  22DA               	addwfc	fsr2h,f,c
  1905   0009EE  0E00               	movlw	0
  1906   0009F0  6EDF               	movwf	indf2,c
  1907   0009F2                     
  1908                           ;dc_motor.c: 114:     mR->direction = 1;
  1909   0009F2  EE20 F001          	lfsr	2,1
  1910   0009F6  5020               	movf	turnLeft90@mR^0,w,c
  1911   0009F8  26D9               	addwf	fsr2l,f,c
  1912   0009FA  5021               	movf	(turnLeft90@mR+1)^0,w,c
  1913   0009FC  22DA               	addwfc	fsr2h,f,c
  1914   0009FE  0E01               	movlw	1
  1915   000A00  6EDF               	movwf	indf2,c
  1916   000A02                     
  1917                           ;dc_motor.c: 116:     mL->power = 20;
  1918   000A02  C01E  FFD9         	movff	turnLeft90@mL,fsr2l
  1919   000A06  C01F  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1920   000A0A  0E14               	movlw	20
  1921   000A0C  6EDF               	movwf	indf2,c
  1922   000A0E                     
  1923                           ;dc_motor.c: 117:     mR->power = 20;
  1924   000A0E  C020  FFD9         	movff	turnLeft90@mR,fsr2l
  1925   000A12  C021  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1926   000A16  0E14               	movlw	20
  1927   000A18  6EDF               	movwf	indf2,c
  1928                           
  1929                           ;dc_motor.c: 119:     while (mL->power != 50 || mR->power != 50 ) {
  1930   000A1A  EF2D  F005         	goto	l1981
  1931   000A1E                     l1971:
  1932                           
  1933                           ;dc_motor.c: 120:         _delay((unsigned long)((5)*(64000000/4000.0)));
  1934   000A1E  0E68               	movlw	104
  1935   000A20  6E22               	movwf	??_turnLeft90^0,c
  1936   000A22  0EE4               	movlw	228
  1937   000A24                     u1787:
  1938   000A24  2EE8               	decfsz	wreg,f,c
  1939   000A26  D7FE               	bra	u1787
  1940   000A28  2E22               	decfsz	??_turnLeft90^0,f,c
  1941   000A2A  D7FC               	bra	u1787
  1942   000A2C  D000               	nop2	
  1943   000A2E                     
  1944                           ;dc_motor.c: 121:         mL->power++;
  1945   000A2E  C01E  FFD9         	movff	turnLeft90@mL,fsr2l
  1946   000A32  C01F  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1947   000A36  2ADF               	incf	indf2,f,c
  1948   000A38                     
  1949                           ;dc_motor.c: 122:         mR->power++;
  1950   000A38  C020  FFD9         	movff	turnLeft90@mR,fsr2l
  1951   000A3C  C021  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1952   000A40  2ADF               	incf	indf2,f,c
  1953   000A42                     
  1954                           ;dc_motor.c: 123:         setMotorPWM(mL);
  1955   000A42  C01E  F013         	movff	turnLeft90@mL,setMotorPWM@m
  1956   000A46  C01F  F014         	movff	turnLeft90@mL+1,setMotorPWM@m+1
  1957   000A4A  EC9B  F003         	call	_setMotorPWM	;wreg free
  1958   000A4E                     
  1959                           ;dc_motor.c: 124:         setMotorPWM(mR);
  1960   000A4E  C020  F013         	movff	turnLeft90@mR,setMotorPWM@m
  1961   000A52  C021  F014         	movff	turnLeft90@mR+1,setMotorPWM@m+1
  1962   000A56  EC9B  F003         	call	_setMotorPWM	;wreg free
  1963   000A5A                     l1981:
  1964                           
  1965                           ;dc_motor.c: 119:     while (mL->power != 50 || mR->power != 50 ) {
  1966   000A5A  C01E  FFD9         	movff	turnLeft90@mL,fsr2l
  1967   000A5E  C01F  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1968   000A62  0E32               	movlw	50
  1969   000A64  18DE               	xorwf	postinc2,w,c
  1970   000A66  A4D8               	btfss	status,2,c
  1971   000A68  EF38  F005         	goto	u961
  1972   000A6C  EF3A  F005         	goto	u960
  1973   000A70                     u961:
  1974   000A70  EF0F  F005         	goto	l1971
  1975   000A74                     u960:
  1976   000A74  C020  FFD9         	movff	turnLeft90@mR,fsr2l
  1977   000A78  C021  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1978   000A7C  0E32               	movlw	50
  1979   000A7E  18DE               	xorwf	postinc2,w,c
  1980   000A80  A4D8               	btfss	status,2,c
  1981   000A82  EF45  F005         	goto	u971
  1982   000A86  EF47  F005         	goto	u970
  1983   000A8A                     u971:
  1984   000A8A  EF0F  F005         	goto	l1971
  1985   000A8E                     u970:
  1986   000A8E                     
  1987                           ;dc_motor.c: 127:     _delay((unsigned long)((160)*(64000000/4000.0)));
  1988   000A8E  0E0D               	movlw	13
  1989   000A90  6E23               	movwf	(??_turnLeft90+1)^0,c
  1990   000A92  0EFD               	movlw	253
  1991   000A94  6E22               	movwf	??_turnLeft90^0,c
  1992   000A96  0EA2               	movlw	162
  1993   000A98                     u1797:
  1994   000A98  2EE8               	decfsz	wreg,f,c
  1995   000A9A  D7FE               	bra	u1797
  1996   000A9C  2E22               	decfsz	??_turnLeft90^0,f,c
  1997   000A9E  D7FC               	bra	u1797
  1998   000AA0  2E23               	decfsz	(??_turnLeft90+1)^0,f,c
  1999   000AA2  D7FA               	bra	u1797
  2000   000AA4  D000               	nop2	
  2001   000AA6                     
  2002                           ;dc_motor.c: 129:     stop(mL, mR);
  2003   000AA6  C01E  F019         	movff	turnLeft90@mL,stop@mL
  2004   000AAA  C01F  F01A         	movff	turnLeft90@mL+1,stop@mL+1
  2005   000AAE  C020  F01B         	movff	turnLeft90@mR,stop@mR
  2006   000AB2  C021  F01C         	movff	turnLeft90@mR+1,stop@mR+1
  2007   000AB6  EC4F  F009         	call	_stop	;wreg free
  2008   000ABA  0012               	return		;funcret
  2009   000ABC                     __end_of_turnLeft90:
  2010                           	callstack 0
  2011                           
  2012 ;; *************** function _turnLeft135 *****************
  2013 ;; Defined at:
  2014 ;;		line 156 in file "dc_motor.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2017 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  2018 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2019 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;		None
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2031 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2033 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2034 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;Total ram usage:        6 bytes
  2036 ;; Hardware stack levels used: 1
  2037 ;; Hardware stack levels required when called: 4
  2038 ;; This function calls:
  2039 ;;		_setMotorPWM
  2040 ;;		_stop
  2041 ;; This function is called by:
  2042 ;;		_returnstep
  2043 ;;		_main
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text9
  2048   000D7A                     __ptext9:
  2049                           	callstack 0
  2050   000D7A                     _turnLeft135:
  2051                           	callstack 26
  2052   000D7A                     
  2053                           ;dc_motor.c: 156: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 157: {;dc_mot
      +                          or.c: 158:     stop(mL, mR);
  2054   000D7A  C01E  F019         	movff	turnLeft135@mL,stop@mL
  2055   000D7E  C01F  F01A         	movff	turnLeft135@mL+1,stop@mL+1
  2056   000D82  C020  F01B         	movff	turnLeft135@mR,stop@mR
  2057   000D86  C021  F01C         	movff	turnLeft135@mR+1,stop@mR+1
  2058   000D8A  EC4F  F009         	call	_stop	;wreg free
  2059   000D8E                     
  2060                           ;dc_motor.c: 161:     mL->direction = 0;
  2061   000D8E  EE20 F001          	lfsr	2,1
  2062   000D92  501E               	movf	turnLeft135@mL^0,w,c
  2063   000D94  26D9               	addwf	fsr2l,f,c
  2064   000D96  501F               	movf	(turnLeft135@mL+1)^0,w,c
  2065   000D98  22DA               	addwfc	fsr2h,f,c
  2066   000D9A  0E00               	movlw	0
  2067   000D9C  6EDF               	movwf	indf2,c
  2068   000D9E                     
  2069                           ;dc_motor.c: 162:     mR->direction = 1;
  2070   000D9E  EE20 F001          	lfsr	2,1
  2071   000DA2  5020               	movf	turnLeft135@mR^0,w,c
  2072   000DA4  26D9               	addwf	fsr2l,f,c
  2073   000DA6  5021               	movf	(turnLeft135@mR+1)^0,w,c
  2074   000DA8  22DA               	addwfc	fsr2h,f,c
  2075   000DAA  0E01               	movlw	1
  2076   000DAC  6EDF               	movwf	indf2,c
  2077   000DAE                     
  2078                           ;dc_motor.c: 164:     mL->power = 20;
  2079   000DAE  C01E  FFD9         	movff	turnLeft135@mL,fsr2l
  2080   000DB2  C01F  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2081   000DB6  0E14               	movlw	20
  2082   000DB8  6EDF               	movwf	indf2,c
  2083   000DBA                     
  2084                           ;dc_motor.c: 165:     mR->power = 20;
  2085   000DBA  C020  FFD9         	movff	turnLeft135@mR,fsr2l
  2086   000DBE  C021  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2087   000DC2  0E14               	movlw	20
  2088   000DC4  6EDF               	movwf	indf2,c
  2089                           
  2090                           ;dc_motor.c: 167:     while (mL->power <= 50 || mR->power <= 50 ) {
  2091   000DC6  EF02  F007         	goto	l2037
  2092   000DCA                     l2027:
  2093                           
  2094                           ;dc_motor.c: 168:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2095   000DCA  0ED0               	movlw	208
  2096   000DCC  6E22               	movwf	??_turnLeft135^0,c
  2097   000DCE  0ECA               	movlw	202
  2098   000DD0                     u1807:
  2099   000DD0  2EE8               	decfsz	wreg,f,c
  2100   000DD2  D7FE               	bra	u1807
  2101   000DD4  2E22               	decfsz	??_turnLeft135^0,f,c
  2102   000DD6  D7FC               	bra	u1807
  2103   000DD8                     
  2104                           ;dc_motor.c: 169:         mL->power++;
  2105   000DD8  C01E  FFD9         	movff	turnLeft135@mL,fsr2l
  2106   000DDC  C01F  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2107   000DE0  2ADF               	incf	indf2,f,c
  2108   000DE2                     
  2109                           ;dc_motor.c: 170:         mR->power++;
  2110   000DE2  C020  FFD9         	movff	turnLeft135@mR,fsr2l
  2111   000DE6  C021  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2112   000DEA  2ADF               	incf	indf2,f,c
  2113   000DEC                     
  2114                           ;dc_motor.c: 171:         setMotorPWM(mL);
  2115   000DEC  C01E  F013         	movff	turnLeft135@mL,setMotorPWM@m
  2116   000DF0  C01F  F014         	movff	turnLeft135@mL+1,setMotorPWM@m+1
  2117   000DF4  EC9B  F003         	call	_setMotorPWM	;wreg free
  2118   000DF8                     
  2119                           ;dc_motor.c: 172:         setMotorPWM(mR);
  2120   000DF8  C020  F013         	movff	turnLeft135@mR,setMotorPWM@m
  2121   000DFC  C021  F014         	movff	turnLeft135@mR+1,setMotorPWM@m+1
  2122   000E00  EC9B  F003         	call	_setMotorPWM	;wreg free
  2123   000E04                     l2037:
  2124                           
  2125                           ;dc_motor.c: 167:     while (mL->power <= 50 || mR->power <= 50 ) {
  2126   000E04  C01E  FFD9         	movff	turnLeft135@mL,fsr2l
  2127   000E08  C01F  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2128   000E0C  0E32               	movlw	50
  2129   000E0E  64DF               	cpfsgt	indf2,c
  2130   000E10  EF0C  F007         	goto	u1001
  2131   000E14  EF0E  F007         	goto	u1000
  2132   000E18                     u1001:
  2133   000E18  EFE5  F006         	goto	l2027
  2134   000E1C                     u1000:
  2135   000E1C  C020  FFD9         	movff	turnLeft135@mR,fsr2l
  2136   000E20  C021  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2137   000E24  0E32               	movlw	50
  2138   000E26  64DF               	cpfsgt	indf2,c
  2139   000E28  EF18  F007         	goto	u1011
  2140   000E2C  EF1A  F007         	goto	u1010
  2141   000E30                     u1011:
  2142   000E30  EFE5  F006         	goto	l2027
  2143   000E34                     u1010:
  2144   000E34                     
  2145                           ;dc_motor.c: 175:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2146   000E34  0E29               	movlw	41
  2147   000E36  6E23               	movwf	(??_turnLeft135+1)^0,c
  2148   000E38  0E96               	movlw	150
  2149   000E3A  6E22               	movwf	??_turnLeft135^0,c
  2150   000E3C  0E7F               	movlw	127
  2151   000E3E                     u1817:
  2152   000E3E  2EE8               	decfsz	wreg,f,c
  2153   000E40  D7FE               	bra	u1817
  2154   000E42  2E22               	decfsz	??_turnLeft135^0,f,c
  2155   000E44  D7FC               	bra	u1817
  2156   000E46  2E23               	decfsz	(??_turnLeft135+1)^0,f,c
  2157   000E48  D7FA               	bra	u1817
  2158   000E4A  F000               	nop	
  2159   000E4C                     
  2160                           ;dc_motor.c: 176:     stop(mL, mR);
  2161   000E4C  C01E  F019         	movff	turnLeft135@mL,stop@mL
  2162   000E50  C01F  F01A         	movff	turnLeft135@mL+1,stop@mL+1
  2163   000E54  C020  F01B         	movff	turnLeft135@mR,stop@mR
  2164   000E58  C021  F01C         	movff	turnLeft135@mR+1,stop@mR+1
  2165   000E5C  EC4F  F009         	call	_stop	;wreg free
  2166   000E60  0012               	return		;funcret
  2167   000E62                     __end_of_turnLeft135:
  2168                           	callstack 0
  2169                           
  2170 ;; *************** function _turn180 *****************
  2171 ;; Defined at:
  2172 ;;		line 203 in file "dc_motor.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2175 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  2176 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2177 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2192 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2193 ;;Total ram usage:        6 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; Hardware stack levels required when called: 4
  2196 ;; This function calls:
  2197 ;;		_setMotorPWM
  2198 ;;		_stop
  2199 ;; This function is called by:
  2200 ;;		_returnstep
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text10
  2206   000E62                     __ptext10:
  2207                           	callstack 0
  2208   000E62                     _turn180:
  2209                           	callstack 26
  2210   000E62                     
  2211                           ;dc_motor.c: 203: void turn180(DC_motor *mL, DC_motor *mR);dc_motor.c: 204: {;dc_motor.c
      +                          : 205:     stop(mL, mR);
  2212   000E62  C01E  F019         	movff	turn180@mL,stop@mL
  2213   000E66  C01F  F01A         	movff	turn180@mL+1,stop@mL+1
  2214   000E6A  C020  F01B         	movff	turn180@mR,stop@mR
  2215   000E6E  C021  F01C         	movff	turn180@mR+1,stop@mR+1
  2216   000E72  EC4F  F009         	call	_stop	;wreg free
  2217   000E76                     
  2218                           ;dc_motor.c: 206:     mL->direction = 1;
  2219   000E76  EE20 F001          	lfsr	2,1
  2220   000E7A  501E               	movf	turn180@mL^0,w,c
  2221   000E7C  26D9               	addwf	fsr2l,f,c
  2222   000E7E  501F               	movf	(turn180@mL+1)^0,w,c
  2223   000E80  22DA               	addwfc	fsr2h,f,c
  2224   000E82  0E01               	movlw	1
  2225   000E84  6EDF               	movwf	indf2,c
  2226   000E86                     
  2227                           ;dc_motor.c: 207:     mR->direction = 0;
  2228   000E86  EE20 F001          	lfsr	2,1
  2229   000E8A  5020               	movf	turn180@mR^0,w,c
  2230   000E8C  26D9               	addwf	fsr2l,f,c
  2231   000E8E  5021               	movf	(turn180@mR+1)^0,w,c
  2232   000E90  22DA               	addwfc	fsr2h,f,c
  2233   000E92  0E00               	movlw	0
  2234   000E94  6EDF               	movwf	indf2,c
  2235   000E96                     
  2236                           ;dc_motor.c: 209:     mL->power = 20;
  2237   000E96  C01E  FFD9         	movff	turn180@mL,fsr2l
  2238   000E9A  C01F  FFDA         	movff	turn180@mL+1,fsr2h
  2239   000E9E  0E14               	movlw	20
  2240   000EA0  6EDF               	movwf	indf2,c
  2241   000EA2                     
  2242                           ;dc_motor.c: 210:     mR->power = 20;
  2243   000EA2  C020  FFD9         	movff	turn180@mR,fsr2l
  2244   000EA6  C021  FFDA         	movff	turn180@mR+1,fsr2h
  2245   000EAA  0E14               	movlw	20
  2246   000EAC  6EDF               	movwf	indf2,c
  2247                           
  2248                           ;dc_motor.c: 212:     while (mL->power <= 50 || mR->power <= 50 ) {
  2249   000EAE  EF76  F007         	goto	l2093
  2250   000EB2                     l2083:
  2251                           
  2252                           ;dc_motor.c: 213:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2253   000EB2  0ED0               	movlw	208
  2254   000EB4  6E22               	movwf	??_turn180^0,c
  2255   000EB6  0ECA               	movlw	202
  2256   000EB8                     u1827:
  2257   000EB8  2EE8               	decfsz	wreg,f,c
  2258   000EBA  D7FE               	bra	u1827
  2259   000EBC  2E22               	decfsz	??_turn180^0,f,c
  2260   000EBE  D7FC               	bra	u1827
  2261   000EC0                     
  2262                           ;dc_motor.c: 214:         mL->power++;
  2263   000EC0  C01E  FFD9         	movff	turn180@mL,fsr2l
  2264   000EC4  C01F  FFDA         	movff	turn180@mL+1,fsr2h
  2265   000EC8  2ADF               	incf	indf2,f,c
  2266   000ECA                     
  2267                           ;dc_motor.c: 215:         mR->power++;
  2268   000ECA  C020  FFD9         	movff	turn180@mR,fsr2l
  2269   000ECE  C021  FFDA         	movff	turn180@mR+1,fsr2h
  2270   000ED2  2ADF               	incf	indf2,f,c
  2271   000ED4                     
  2272                           ;dc_motor.c: 216:         setMotorPWM(mL);
  2273   000ED4  C01E  F013         	movff	turn180@mL,setMotorPWM@m
  2274   000ED8  C01F  F014         	movff	turn180@mL+1,setMotorPWM@m+1
  2275   000EDC  EC9B  F003         	call	_setMotorPWM	;wreg free
  2276   000EE0                     
  2277                           ;dc_motor.c: 217:         setMotorPWM(mR);
  2278   000EE0  C020  F013         	movff	turn180@mR,setMotorPWM@m
  2279   000EE4  C021  F014         	movff	turn180@mR+1,setMotorPWM@m+1
  2280   000EE8  EC9B  F003         	call	_setMotorPWM	;wreg free
  2281   000EEC                     l2093:
  2282                           
  2283                           ;dc_motor.c: 212:     while (mL->power <= 50 || mR->power <= 50 ) {
  2284   000EEC  C01E  FFD9         	movff	turn180@mL,fsr2l
  2285   000EF0  C01F  FFDA         	movff	turn180@mL+1,fsr2h
  2286   000EF4  0E32               	movlw	50
  2287   000EF6  64DF               	cpfsgt	indf2,c
  2288   000EF8  EF80  F007         	goto	u1041
  2289   000EFC  EF82  F007         	goto	u1040
  2290   000F00                     u1041:
  2291   000F00  EF59  F007         	goto	l2083
  2292   000F04                     u1040:
  2293   000F04  C020  FFD9         	movff	turn180@mR,fsr2l
  2294   000F08  C021  FFDA         	movff	turn180@mR+1,fsr2h
  2295   000F0C  0E32               	movlw	50
  2296   000F0E  64DF               	cpfsgt	indf2,c
  2297   000F10  EF8C  F007         	goto	u1051
  2298   000F14  EF8E  F007         	goto	u1050
  2299   000F18                     u1051:
  2300   000F18  EF59  F007         	goto	l2083
  2301   000F1C                     u1050:
  2302   000F1C                     
  2303                           ;dc_motor.c: 219:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2304   000F1C  0E19               	movlw	25
  2305   000F1E  6E23               	movwf	(??_turn180+1)^0,c
  2306   000F20  0E5A               	movlw	90
  2307   000F22  6E22               	movwf	??_turn180^0,c
  2308   000F24  0EB2               	movlw	178
  2309   000F26                     u1837:
  2310   000F26  2EE8               	decfsz	wreg,f,c
  2311   000F28  D7FE               	bra	u1837
  2312   000F2A  2E22               	decfsz	??_turn180^0,f,c
  2313   000F2C  D7FC               	bra	u1837
  2314   000F2E  2E23               	decfsz	(??_turn180+1)^0,f,c
  2315   000F30  D7FA               	bra	u1837
  2316   000F32                     
  2317                           ;dc_motor.c: 220:     stop(mL, mR);
  2318   000F32  C01E  F019         	movff	turn180@mL,stop@mL
  2319   000F36  C01F  F01A         	movff	turn180@mL+1,stop@mL+1
  2320   000F3A  C020  F01B         	movff	turn180@mR,stop@mR
  2321   000F3E  C021  F01C         	movff	turn180@mR+1,stop@mR+1
  2322   000F42  EC4F  F009         	call	_stop	;wreg free
  2323   000F46  0012               	return		;funcret
  2324   000F48                     __end_of_turn180:
  2325                           	callstack 0
  2326                           
  2327 ;; *************** function _square *****************
  2328 ;; Defined at:
  2329 ;;		line 247 in file "dc_motor.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2332 ;;		 -> main@motorL(9), returnstep@motorL(9), returnhome@motorL(9), 
  2333 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2334 ;;		 -> main@motorR(9), returnstep@motorR(9), returnhome@motorR(9), 
  2335 ;;  dir             1   33[COMRAM] unsigned char 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;		None
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2347 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;Total ram usage:        7 bytes
  2352 ;; Hardware stack levels used: 1
  2353 ;; Hardware stack levels required when called: 4
  2354 ;; This function calls:
  2355 ;;		_setMotorPWM
  2356 ;;		_stop
  2357 ;; This function is called by:
  2358 ;;		_returnhome
  2359 ;;		_returnstep
  2360 ;;		_main
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text11
  2365   000F48                     __ptext11:
  2366                           	callstack 0
  2367   000F48                     _square:
  2368                           	callstack 26
  2369   000F48                     
  2370                           ;dc_motor.c: 247: void square(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 248: {;d
      +                          c_motor.c: 249:     mL->direction = dir;
  2371   000F48  EE20 F001          	lfsr	2,1
  2372   000F4C  501E               	movf	square@mL^0,w,c
  2373   000F4E  26D9               	addwf	fsr2l,f,c
  2374   000F50  501F               	movf	(square@mL+1)^0,w,c
  2375   000F52  22DA               	addwfc	fsr2h,f,c
  2376   000F54  C022  FFDF         	movff	square@dir,indf2
  2377                           
  2378                           ;dc_motor.c: 250:     mR->direction = dir;
  2379   000F58  EE20 F001          	lfsr	2,1
  2380   000F5C  5020               	movf	square@mR^0,w,c
  2381   000F5E  26D9               	addwf	fsr2l,f,c
  2382   000F60  5021               	movf	(square@mR+1)^0,w,c
  2383   000F62  22DA               	addwfc	fsr2h,f,c
  2384   000F64  C022  FFDF         	movff	square@dir,indf2
  2385                           
  2386                           ;dc_motor.c: 252:     while (mL->power <= 50 || mR->power <= 50 ) {
  2387   000F68  EFDF  F007         	goto	l2117
  2388   000F6C                     l2103:
  2389                           
  2390                           ;dc_motor.c: 253:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2391   000F6C  0ED0               	movlw	208
  2392   000F6E  6E23               	movwf	??_square^0,c
  2393   000F70  0ECA               	movlw	202
  2394   000F72                     u1847:
  2395   000F72  2EE8               	decfsz	wreg,f,c
  2396   000F74  D7FE               	bra	u1847
  2397   000F76  2E23               	decfsz	??_square^0,f,c
  2398   000F78  D7FC               	bra	u1847
  2399   000F7A                     
  2400                           ;dc_motor.c: 254:         mL->power++;
  2401   000F7A  C01E  FFD9         	movff	square@mL,fsr2l
  2402   000F7E  C01F  FFDA         	movff	square@mL+1,fsr2h
  2403   000F82  2ADF               	incf	indf2,f,c
  2404   000F84                     
  2405                           ;dc_motor.c: 255:         mR->power++;
  2406   000F84  C020  FFD9         	movff	square@mR,fsr2l
  2407   000F88  C021  FFDA         	movff	square@mR+1,fsr2h
  2408   000F8C  2ADF               	incf	indf2,f,c
  2409   000F8E                     
  2410                           ;dc_motor.c: 256:         setMotorPWM(mL);
  2411   000F8E  C01E  F013         	movff	square@mL,setMotorPWM@m
  2412   000F92  C01F  F014         	movff	square@mL+1,setMotorPWM@m+1
  2413   000F96  EC9B  F003         	call	_setMotorPWM	;wreg free
  2414   000F9A                     
  2415                           ;dc_motor.c: 257:         setMotorPWM(mR);
  2416   000F9A  C020  F013         	movff	square@mR,setMotorPWM@m
  2417   000F9E  C021  F014         	movff	square@mR+1,setMotorPWM@m+1
  2418   000FA2  EC9B  F003         	call	_setMotorPWM	;wreg free
  2419   000FA6                     
  2420                           ;dc_motor.c: 259:     setMotorPWM(mL);
  2421   000FA6  C01E  F013         	movff	square@mL,setMotorPWM@m
  2422   000FAA  C01F  F014         	movff	square@mL+1,setMotorPWM@m+1
  2423   000FAE  EC9B  F003         	call	_setMotorPWM	;wreg free
  2424   000FB2                     
  2425                           ;dc_motor.c: 260:     setMotorPWM(mR);
  2426   000FB2  C020  F013         	movff	square@mR,setMotorPWM@m
  2427   000FB6  C021  F014         	movff	square@mR+1,setMotorPWM@m+1
  2428   000FBA  EC9B  F003         	call	_setMotorPWM	;wreg free
  2429   000FBE                     l2117:
  2430                           
  2431                           ;dc_motor.c: 252:     while (mL->power <= 50 || mR->power <= 50 ) {
  2432   000FBE  C01E  FFD9         	movff	square@mL,fsr2l
  2433   000FC2  C01F  FFDA         	movff	square@mL+1,fsr2h
  2434   000FC6  0E32               	movlw	50
  2435   000FC8  64DF               	cpfsgt	indf2,c
  2436   000FCA  EFE9  F007         	goto	u1061
  2437   000FCE  EFEB  F007         	goto	u1060
  2438   000FD2                     u1061:
  2439   000FD2  EFB6  F007         	goto	l2103
  2440   000FD6                     u1060:
  2441   000FD6  C020  FFD9         	movff	square@mR,fsr2l
  2442   000FDA  C021  FFDA         	movff	square@mR+1,fsr2h
  2443   000FDE  0E32               	movlw	50
  2444   000FE0  64DF               	cpfsgt	indf2,c
  2445   000FE2  EFF5  F007         	goto	u1071
  2446   000FE6  EFF7  F007         	goto	u1070
  2447   000FEA                     u1071:
  2448   000FEA  EFB6  F007         	goto	l2103
  2449   000FEE                     u1070:
  2450   000FEE                     
  2451                           ;dc_motor.c: 263:     _delay((unsigned long)((200)*(64000000/4000.0)));
  2452   000FEE  0E11               	movlw	17
  2453   000FF0  6E24               	movwf	(??_square+1)^0,c
  2454   000FF2  0E3C               	movlw	60
  2455   000FF4  6E23               	movwf	??_square^0,c
  2456   000FF6  0ECB               	movlw	203
  2457   000FF8                     u1857:
  2458   000FF8  2EE8               	decfsz	wreg,f,c
  2459   000FFA  D7FE               	bra	u1857
  2460   000FFC  2E23               	decfsz	??_square^0,f,c
  2461   000FFE  D7FC               	bra	u1857
  2462   001000  2E24               	decfsz	(??_square+1)^0,f,c
  2463   001002  D7FA               	bra	u1857
  2464   001004  F000               	nop	
  2465   001006                     
  2466                           ;dc_motor.c: 264:     stop(mL, mR);
  2467   001006  C01E  F019         	movff	square@mL,stop@mL
  2468   00100A  C01F  F01A         	movff	square@mL+1,stop@mL+1
  2469   00100E  C020  F01B         	movff	square@mR,stop@mR
  2470   001012  C021  F01C         	movff	square@mR+1,stop@mR+1
  2471   001016  EC4F  F009         	call	_stop	;wreg free
  2472   00101A  0012               	return		;funcret
  2473   00101C                     __end_of_square:
  2474                           	callstack 0
  2475                           
  2476 ;; *************** function _stop *****************
  2477 ;; Defined at:
  2478 ;;		line 96 in file "dc_motor.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  2481 ;;		 -> main@motorL(9), returnstep@motorL(9), returnhome@motorL(9), 
  2482 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  2483 ;;		 -> main@motorR(9), returnstep@motorR(9), returnhome@motorR(9), 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;		None
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  1    wreg      void 
  2488 ;; Registers used:
  2489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2498 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2499 ;;Total ram usage:        5 bytes
  2500 ;; Hardware stack levels used: 1
  2501 ;; Hardware stack levels required when called: 3
  2502 ;; This function calls:
  2503 ;;		_setMotorPWM
  2504 ;; This function is called by:
  2505 ;;		_turnLeft90
  2506 ;;		_turnRight90
  2507 ;;		_turnLeft135
  2508 ;;		_turnRight135
  2509 ;;		_turn180
  2510 ;;		_square
  2511 ;;		_smallmovement
  2512 ;;		_returnhome
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text12
  2517   00129E                     __ptext12:
  2518                           	callstack 0
  2519   00129E                     _stop:
  2520                           	callstack 26
  2521   00129E                     
  2522                           ;dc_motor.c: 96: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 97: {;dc_motor.c: 99:
      +                               while (mL->power > 0 && mR->power > 0) {
  2523   00129E  EF6F  F009         	goto	l1945
  2524   0012A2                     l1937:
  2525                           
  2526                           ;dc_motor.c: 100:     mL->power--;
  2527   0012A2  C019  FFD9         	movff	stop@mL,fsr2l
  2528   0012A6  C01A  FFDA         	movff	stop@mL+1,fsr2h
  2529   0012AA  06DF               	decf	indf2,f,c
  2530                           
  2531                           ;dc_motor.c: 101:     mR->power--;
  2532   0012AC  C01B  FFD9         	movff	stop@mR,fsr2l
  2533   0012B0  C01C  FFDA         	movff	stop@mR+1,fsr2h
  2534   0012B4  06DF               	decf	indf2,f,c
  2535   0012B6                     
  2536                           ;dc_motor.c: 102:     _delay((unsigned long)((1)*(64000000/4000.0)));
  2537   0012B6  0E15               	movlw	21
  2538   0012B8  6E1D               	movwf	??_stop^0,c
  2539   0012BA  0EC6               	movlw	198
  2540   0012BC                     u1867:
  2541   0012BC  2EE8               	decfsz	wreg,f,c
  2542   0012BE  D7FE               	bra	u1867
  2543   0012C0  2E1D               	decfsz	??_stop^0,f,c
  2544   0012C2  D7FC               	bra	u1867
  2545   0012C4  D000               	nop2	
  2546   0012C6                     
  2547                           ;dc_motor.c: 103:     setMotorPWM(mL);
  2548   0012C6  C019  F013         	movff	stop@mL,setMotorPWM@m
  2549   0012CA  C01A  F014         	movff	stop@mL+1,setMotorPWM@m+1
  2550   0012CE  EC9B  F003         	call	_setMotorPWM	;wreg free
  2551   0012D2                     
  2552                           ;dc_motor.c: 104:     setMotorPWM(mR);
  2553   0012D2  C01B  F013         	movff	stop@mR,setMotorPWM@m
  2554   0012D6  C01C  F014         	movff	stop@mR+1,setMotorPWM@m+1
  2555   0012DA  EC9B  F003         	call	_setMotorPWM	;wreg free
  2556   0012DE                     l1945:
  2557                           
  2558                           ;dc_motor.c: 99:     while (mL->power > 0 && mR->power > 0) {
  2559   0012DE  C019  FFD9         	movff	stop@mL,fsr2l
  2560   0012E2  C01A  FFDA         	movff	stop@mL+1,fsr2h
  2561   0012E6  50DF               	movf	indf2,w,c
  2562   0012E8  B4D8               	btfsc	status,2,c
  2563   0012EA  EF79  F009         	goto	u941
  2564   0012EE  EF7B  F009         	goto	u940
  2565   0012F2                     u941:
  2566   0012F2  EF87  F009         	goto	l130
  2567   0012F6                     u940:
  2568   0012F6  C01B  FFD9         	movff	stop@mR,fsr2l
  2569   0012FA  C01C  FFDA         	movff	stop@mR+1,fsr2h
  2570   0012FE  50DF               	movf	indf2,w,c
  2571   001300  A4D8               	btfss	status,2,c
  2572   001302  EF85  F009         	goto	u951
  2573   001306  EF87  F009         	goto	u950
  2574   00130A                     u951:
  2575   00130A  EF51  F009         	goto	l1937
  2576   00130E                     u950:
  2577   00130E                     l130:
  2578   00130E  0012               	return		;funcret
  2579   001310                     __end_of_stop:
  2580                           	callstack 0
  2581                           
  2582 ;; *************** function _fullSpeedAhead *****************
  2583 ;; Defined at:
  2584 ;;		line 225 in file "dc_motor.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  2587 ;;		 -> main@motorL(9), returnhome@motorL(9), 
  2588 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  2589 ;;		 -> main@motorR(9), returnhome@motorR(9), 
  2590 ;;  dir             1   28[COMRAM] unsigned char 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      void 
  2595 ;; Registers used:
  2596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2602 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2605 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2606 ;;Total ram usage:        6 bytes
  2607 ;; Hardware stack levels used: 1
  2608 ;; Hardware stack levels required when called: 3
  2609 ;; This function calls:
  2610 ;;		_setMotorPWM
  2611 ;; This function is called by:
  2612 ;;		_returnhome
  2613 ;;		_main
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text13
  2618   00101C                     __ptext13:
  2619                           	callstack 0
  2620   00101C                     _fullSpeedAhead:
  2621                           	callstack 26
  2622   00101C                     
  2623                           ;dc_motor.c: 225: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 
      +                          226: {;dc_motor.c: 227:     mL->brakemode=1;
  2624   00101C  EE20 F002          	lfsr	2,2
  2625   001020  5019               	movf	fullSpeedAhead@mL^0,w,c
  2626   001022  26D9               	addwf	fsr2l,f,c
  2627   001024  501A               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2628   001026  22DA               	addwfc	fsr2h,f,c
  2629   001028  0E01               	movlw	1
  2630   00102A  6EDF               	movwf	indf2,c
  2631                           
  2632                           ;dc_motor.c: 228:     mR->brakemode=1;
  2633   00102C  EE20 F002          	lfsr	2,2
  2634   001030  501B               	movf	fullSpeedAhead@mR^0,w,c
  2635   001032  26D9               	addwf	fsr2l,f,c
  2636   001034  501C               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2637   001036  22DA               	addwfc	fsr2h,f,c
  2638   001038  0E01               	movlw	1
  2639   00103A  6EDF               	movwf	indf2,c
  2640                           
  2641                           ;dc_motor.c: 229:     mL->direction = dir;
  2642   00103C  EE20 F001          	lfsr	2,1
  2643   001040  5019               	movf	fullSpeedAhead@mL^0,w,c
  2644   001042  26D9               	addwf	fsr2l,f,c
  2645   001044  501A               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2646   001046  22DA               	addwfc	fsr2h,f,c
  2647   001048  C01D  FFDF         	movff	fullSpeedAhead@dir,indf2
  2648                           
  2649                           ;dc_motor.c: 230:     mR->direction = dir;
  2650   00104C  EE20 F001          	lfsr	2,1
  2651   001050  501B               	movf	fullSpeedAhead@mR^0,w,c
  2652   001052  26D9               	addwf	fsr2l,f,c
  2653   001054  501C               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2654   001056  22DA               	addwfc	fsr2h,f,c
  2655   001058  C01D  FFDF         	movff	fullSpeedAhead@dir,indf2
  2656                           
  2657                           ;dc_motor.c: 234:     while (mL->power <= 30 && mR->power <= 30 ) {
  2658   00105C  EF4D  F008         	goto	l2167
  2659   001060                     l2157:
  2660                           
  2661                           ;dc_motor.c: 235:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2662   001060  0ED0               	movlw	208
  2663   001062  6E1E               	movwf	??_fullSpeedAhead^0,c
  2664   001064  0ECA               	movlw	202
  2665   001066                     u1877:
  2666   001066  2EE8               	decfsz	wreg,f,c
  2667   001068  D7FE               	bra	u1877
  2668   00106A  2E1E               	decfsz	??_fullSpeedAhead^0,f,c
  2669   00106C  D7FC               	bra	u1877
  2670   00106E                     
  2671                           ;dc_motor.c: 236:         mL->power++;
  2672   00106E  C019  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2673   001072  C01A  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2674   001076  2ADF               	incf	indf2,f,c
  2675   001078                     
  2676                           ;dc_motor.c: 237:         mR->power++;
  2677   001078  C01B  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2678   00107C  C01C  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2679   001080  2ADF               	incf	indf2,f,c
  2680   001082                     
  2681                           ;dc_motor.c: 238:         setMotorPWM(mL);
  2682   001082  C019  F013         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2683   001086  C01A  F014         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2684   00108A  EC9B  F003         	call	_setMotorPWM	;wreg free
  2685   00108E                     
  2686                           ;dc_motor.c: 239:         setMotorPWM(mR);
  2687   00108E  C01B  F013         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2688   001092  C01C  F014         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2689   001096  EC9B  F003         	call	_setMotorPWM	;wreg free
  2690   00109A                     l2167:
  2691                           
  2692                           ;dc_motor.c: 234:     while (mL->power <= 30 && mR->power <= 30 ) {
  2693   00109A  C019  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2694   00109E  C01A  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2695   0010A2  0E1F               	movlw	31
  2696   0010A4  60DF               	cpfslt	indf2,c
  2697   0010A6  EF57  F008         	goto	u1101
  2698   0010AA  EF59  F008         	goto	u1100
  2699   0010AE                     u1101:
  2700   0010AE  EF65  F008         	goto	l2171
  2701   0010B2                     u1100:
  2702   0010B2  C01B  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2703   0010B6  C01C  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2704   0010BA  0E1E               	movlw	30
  2705   0010BC  64DF               	cpfsgt	indf2,c
  2706   0010BE  EF63  F008         	goto	u1111
  2707   0010C2  EF65  F008         	goto	u1110
  2708   0010C6                     u1111:
  2709   0010C6  EF30  F008         	goto	l2157
  2710   0010CA                     u1110:
  2711   0010CA                     l2171:
  2712                           
  2713                           ;dc_motor.c: 242:     if (dir == 1 && T0CON0bits.T0EN == 0) {starttimer0;}
  2714   0010CA  041D               	decf	fullSpeedAhead@dir^0,w,c
  2715   0010CC  A4D8               	btfss	status,2,c
  2716   0010CE  EF6B  F008         	goto	u1121
  2717   0010D2  EF6D  F008         	goto	u1120
  2718   0010D6                     u1121:
  2719   0010D6  EF6E  F008         	goto	l171
  2720   0010DA                     u1120:
  2721   0010DA  50D5               	movf	213,w,c	;volatile
  2722   0010DC                     l171:
  2723   0010DC  0012               	return		;funcret
  2724   0010DE                     __end_of_fullSpeedAhead:
  2725                           	callstack 0
  2726                           
  2727 ;; *************** function _setMotorPWM *****************
  2728 ;; Defined at:
  2729 ;;		line 73 in file "dc_motor.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  m               2   18[COMRAM] PTR struct DC_motor
  2732 ;;		 -> main@motorL(9), main@motorR(9), returnstep@motorR(9), returnstep@motorL(9), 
  2733 ;;		 -> returnhome@motorR(9), returnhome@motorL(9), 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  negDuty         1   23[COMRAM] unsigned char 
  2736 ;;  posDuty         1   22[COMRAM] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2750 ;;Total ram usage:        6 bytes
  2751 ;; Hardware stack levels used: 1
  2752 ;; Hardware stack levels required when called: 2
  2753 ;; This function calls:
  2754 ;;		___lwdiv
  2755 ;;		___wmul
  2756 ;; This function is called by:
  2757 ;;		_stop
  2758 ;;		_turnLeft90
  2759 ;;		_turnRight90
  2760 ;;		_turnLeft135
  2761 ;;		_turnRight135
  2762 ;;		_turn180
  2763 ;;		_fullSpeedAhead
  2764 ;;		_square
  2765 ;;		_smallmovement
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text14
  2770   000736                     __ptext14:
  2771                           	callstack 0
  2772   000736                     _setMotorPWM:
  2773                           	callstack 26
  2774   000736                     
  2775                           ;dc_motor.c: 73: void setMotorPWM(DC_motor *m);dc_motor.c: 74: {;dc_motor.c: 75:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 77:     if(m->brakemode) {
  2776   000736  EE20 F002          	lfsr	2,2
  2777   00073A  5013               	movf	setMotorPWM@m^0,w,c
  2778   00073C  26D9               	addwf	fsr2l,f,c
  2779   00073E  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2780   000740  22DA               	addwfc	fsr2h,f,c
  2781   000742  50DF               	movf	indf2,w,c
  2782   000744  B4D8               	btfsc	status,2,c
  2783   000746  EFA7  F003         	goto	u901
  2784   00074A  EFA9  F003         	goto	u900
  2785   00074E                     u901:
  2786   00074E  EFDD  F003         	goto	l1921
  2787   000752                     u900:
  2788   000752                     
  2789                           ;dc_motor.c: 78:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2790   000752  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  2791   000756  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2792   00075A  50DF               	movf	indf2,w,c
  2793   00075C  6E15               	movwf	??_setMotorPWM^0,c
  2794   00075E  5015               	movf	??_setMotorPWM^0,w,c
  2795   000760  6E01               	movwf	___wmul@multiplier^0,c
  2796   000762  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2797   000764  EE20 F003          	lfsr	2,3
  2798   000768  5013               	movf	setMotorPWM@m^0,w,c
  2799   00076A  26D9               	addwf	fsr2l,f,c
  2800   00076C  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2801   00076E  22DA               	addwfc	fsr2h,f,c
  2802   000770  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2803   000774  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2804   000778  ECA6  F00A         	call	___wmul	;wreg free
  2805   00077C  C001  F00C         	movff	?___wmul,___lwdiv@dividend
  2806   000780  C002  F00D         	movff	?___wmul+1,___lwdiv@dividend+1
  2807   000784  0E00               	movlw	0
  2808   000786  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  2809   000788  0E64               	movlw	100
  2810   00078A  6E0E               	movwf	___lwdiv@divisor^0,c
  2811   00078C  EC15  F009         	call	___lwdiv	;wreg free
  2812   000790  EE20 F003          	lfsr	2,3
  2813   000794  5013               	movf	setMotorPWM@m^0,w,c
  2814   000796  26D9               	addwf	fsr2l,f,c
  2815   000798  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2816   00079A  22DA               	addwfc	fsr2h,f,c
  2817   00079C  50DF               	movf	indf2,w,c
  2818   00079E  6E16               	movwf	(??_setMotorPWM+1)^0,c
  2819   0007A0  500C               	movf	?___lwdiv^0,w,c
  2820   0007A2  5C16               	subwf	(??_setMotorPWM+1)^0,w,c
  2821   0007A4  6E17               	movwf	setMotorPWM@posDuty^0,c
  2822   0007A6                     
  2823                           ;dc_motor.c: 79:         negDuty=m->PWMperiod;
  2824   0007A6  EE20 F003          	lfsr	2,3
  2825   0007AA  5013               	movf	setMotorPWM@m^0,w,c
  2826   0007AC  26D9               	addwf	fsr2l,f,c
  2827   0007AE  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2828   0007B0  22DA               	addwfc	fsr2h,f,c
  2829   0007B2  50DF               	movf	indf2,w,c
  2830   0007B4  6E18               	movwf	setMotorPWM@negDuty^0,c
  2831                           
  2832                           ;dc_motor.c: 80:     }
  2833   0007B6  EF00  F004         	goto	l1925
  2834   0007BA                     l1921:
  2835                           
  2836                           ;dc_motor.c: 82:         posDuty=0;
  2837   0007BA  0E00               	movlw	0
  2838   0007BC  6E17               	movwf	setMotorPWM@posDuty^0,c
  2839   0007BE                     
  2840                           ;dc_motor.c: 83:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2841   0007BE  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  2842   0007C2  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2843   0007C6  50DF               	movf	indf2,w,c
  2844   0007C8  6E15               	movwf	??_setMotorPWM^0,c
  2845   0007CA  5015               	movf	??_setMotorPWM^0,w,c
  2846   0007CC  6E01               	movwf	___wmul@multiplier^0,c
  2847   0007CE  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2848   0007D0  EE20 F003          	lfsr	2,3
  2849   0007D4  5013               	movf	setMotorPWM@m^0,w,c
  2850   0007D6  26D9               	addwf	fsr2l,f,c
  2851   0007D8  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2852   0007DA  22DA               	addwfc	fsr2h,f,c
  2853   0007DC  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2854   0007E0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2855   0007E4  ECA6  F00A         	call	___wmul	;wreg free
  2856   0007E8  C001  F00C         	movff	?___wmul,___lwdiv@dividend
  2857   0007EC  C002  F00D         	movff	?___wmul+1,___lwdiv@dividend+1
  2858   0007F0  0E00               	movlw	0
  2859   0007F2  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  2860   0007F4  0E64               	movlw	100
  2861   0007F6  6E0E               	movwf	___lwdiv@divisor^0,c
  2862   0007F8  EC15  F009         	call	___lwdiv	;wreg free
  2863   0007FC  500C               	movf	?___lwdiv^0,w,c
  2864   0007FE  6E18               	movwf	setMotorPWM@negDuty^0,c
  2865   000800                     l1925:
  2866                           
  2867                           ;dc_motor.c: 86:     if (m->direction) {
  2868   000800  EE20 F001          	lfsr	2,1
  2869   000804  5013               	movf	setMotorPWM@m^0,w,c
  2870   000806  26D9               	addwf	fsr2l,f,c
  2871   000808  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2872   00080A  22DA               	addwfc	fsr2h,f,c
  2873   00080C  50DF               	movf	indf2,w,c
  2874   00080E  B4D8               	btfsc	status,2,c
  2875   000810  EF0C  F004         	goto	u911
  2876   000814  EF0E  F004         	goto	u910
  2877   000818                     u911:
  2878   000818  EF30  F004         	goto	l1929
  2879   00081C                     u910:
  2880   00081C                     
  2881                           ;dc_motor.c: 87:         *(m->posDutyHighByte)=posDuty;
  2882   00081C  EE20 F005          	lfsr	2,5
  2883   000820  5013               	movf	setMotorPWM@m^0,w,c
  2884   000822  26D9               	addwf	fsr2l,f,c
  2885   000824  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2886   000826  22DA               	addwfc	fsr2h,f,c
  2887   000828  CFDE F015          	movff	postinc2,??_setMotorPWM
  2888   00082C  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2889   000830  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2890   000834  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2891   000838  C017  FFDF         	movff	setMotorPWM@posDuty,indf2
  2892                           
  2893                           ;dc_motor.c: 88:         *(m->negDutyHighByte)=negDuty;
  2894   00083C  EE20 F007          	lfsr	2,7
  2895   000840  5013               	movf	setMotorPWM@m^0,w,c
  2896   000842  26D9               	addwf	fsr2l,f,c
  2897   000844  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2898   000846  22DA               	addwfc	fsr2h,f,c
  2899   000848  CFDE F015          	movff	postinc2,??_setMotorPWM
  2900   00084C  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2901   000850  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2902   000854  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2903   000858  C018  FFDF         	movff	setMotorPWM@negDuty,indf2
  2904                           
  2905                           ;dc_motor.c: 89:     } else {
  2906   00085C  EF50  F004         	goto	l122
  2907   000860                     l1929:
  2908                           
  2909                           ;dc_motor.c: 90:         *(m->posDutyHighByte)=negDuty;
  2910   000860  EE20 F005          	lfsr	2,5
  2911   000864  5013               	movf	setMotorPWM@m^0,w,c
  2912   000866  26D9               	addwf	fsr2l,f,c
  2913   000868  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2914   00086A  22DA               	addwfc	fsr2h,f,c
  2915   00086C  CFDE F015          	movff	postinc2,??_setMotorPWM
  2916   000870  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2917   000874  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2918   000878  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2919   00087C  C018  FFDF         	movff	setMotorPWM@negDuty,indf2
  2920                           
  2921                           ;dc_motor.c: 91:         *(m->negDutyHighByte)=posDuty;
  2922   000880  EE20 F007          	lfsr	2,7
  2923   000884  5013               	movf	setMotorPWM@m^0,w,c
  2924   000886  26D9               	addwf	fsr2l,f,c
  2925   000888  5014               	movf	(setMotorPWM@m+1)^0,w,c
  2926   00088A  22DA               	addwfc	fsr2h,f,c
  2927   00088C  CFDE F015          	movff	postinc2,??_setMotorPWM
  2928   000890  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  2929   000894  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  2930   000898  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2931   00089C  C017  FFDF         	movff	setMotorPWM@posDuty,indf2
  2932   0008A0                     l122:
  2933   0008A0  0012               	return		;funcret
  2934   0008A2                     __end_of_setMotorPWM:
  2935                           	callstack 0
  2936                           
  2937 ;; *************** function ___wmul *****************
  2938 ;; Defined at:
  2939 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  multiplier      2    0[COMRAM] unsigned int 
  2942 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  product         2    4[COMRAM] unsigned int 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  2    0[COMRAM] unsigned int 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2, status,0, prodl, prodh
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2954 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2955 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2957 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2958 ;;Total ram usage:        6 bytes
  2959 ;; Hardware stack levels used: 1
  2960 ;; Hardware stack levels required when called: 1
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_setMotorPWM
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text15
  2969   00154C                     __ptext15:
  2970                           	callstack 0
  2971   00154C                     ___wmul:
  2972                           	callstack 26
  2973   00154C  5001               	movf	___wmul@multiplier^0,w,c
  2974   00154E  0203               	mulwf	___wmul@multiplicand^0,c
  2975   001550  CFF3 F005          	movff	prodl,___wmul@product
  2976   001554  CFF4 F006          	movff	prodh,___wmul@product+1
  2977   001558  5001               	movf	___wmul@multiplier^0,w,c
  2978   00155A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2979   00155C  50F3               	movf	243,w,c
  2980   00155E  2606               	addwf	(___wmul@product+1)^0,f,c
  2981   001560  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2982   001562  0203               	mulwf	___wmul@multiplicand^0,c
  2983   001564  50F3               	movf	243,w,c
  2984   001566  2606               	addwf	(___wmul@product+1)^0,f,c
  2985   001568  C005  F001         	movff	___wmul@product,?___wmul
  2986   00156C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2987   001570  0012               	return		;funcret
  2988   001572                     __end_of___wmul:
  2989                           	callstack 0
  2990                           
  2991 ;; *************** function _initDCmotorsPWM *****************
  2992 ;; Defined at:
  2993 ;;		line 6 in file "dc_motor.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3007 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3011 ;;Total ram usage:        2 bytes
  3012 ;; Hardware stack levels used: 1
  3013 ;; Hardware stack levels required when called: 1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text16
  3022   00119A                     __ptext16:
  3023                           	callstack 0
  3024   00119A                     _initDCmotorsPWM:
  3025                           	callstack 29
  3026   00119A                     
  3027                           ;dc_motor.c: 9:     LATEbits.LATE2 = 0;
  3028   00119A  947D               	bcf	125,2,c	;volatile
  3029                           
  3030                           ;dc_motor.c: 10:     LATEbits.LATE4 = 0;
  3031   00119C  987D               	bcf	125,4,c	;volatile
  3032                           
  3033                           ;dc_motor.c: 11:     LATCbits.LATC7 = 0;
  3034   00119E  9E7B               	bcf	123,7,c	;volatile
  3035                           
  3036                           ;dc_motor.c: 12:     LATGbits.LATG6 = 0;
  3037   0011A0  9C7F               	bcf	127,6,c	;volatile
  3038                           
  3039                           ;dc_motor.c: 14:     TRISEbits.TRISE2 = 0;
  3040   0011A2  9485               	bcf	133,2,c	;volatile
  3041                           
  3042                           ;dc_motor.c: 15:     TRISEbits.TRISE4 = 0;
  3043   0011A4  9885               	bcf	133,4,c	;volatile
  3044                           
  3045                           ;dc_motor.c: 16:     TRISCbits.TRISC7 = 0;
  3046   0011A6  9E83               	bcf	131,7,c	;volatile
  3047                           
  3048                           ;dc_motor.c: 17:     TRISGbits.TRISG6 = 0;
  3049   0011A8  9C87               	bcf	135,6,c	;volatile
  3050   0011AA                     
  3051                           ;dc_motor.c: 20:     RE2PPS=0x05;
  3052   0011AA  0E05               	movlw	5
  3053   0011AC  010E               	movlb	14	; () banked
  3054   0011AE  6F74               	movwf	116,b	;volatile
  3055                           
  3056                           ;dc_motor.c: 21:     RE4PPS=0x06;
  3057   0011B0  0E06               	movlw	6
  3058   0011B2  6F76               	movwf	118,b	;volatile
  3059                           
  3060                           ;dc_motor.c: 22:     RC7PPS=0x07;
  3061   0011B4  0E07               	movlw	7
  3062   0011B6  6F69               	movwf	105,b	;volatile
  3063                           
  3064                           ;dc_motor.c: 23:     RG6PPS=0x08;
  3065   0011B8  0E08               	movlw	8
  3066   0011BA  6F88               	movwf	136,b	;volatile
  3067                           
  3068                           ;dc_motor.c: 32:     T2CONbits.CKPS=011;
  3069   0011BC  50BD               	movf	189,w,c	;volatile
  3070   0011BE  0B8F               	andlw	-113
  3071   0011C0  0910               	iorlw	16
  3072   0011C2  6EBD               	movwf	189,c	;volatile
  3073                           
  3074                           ;dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  3075   0011C4  0EE0               	movlw	-32
  3076   0011C6  16BE               	andwf	190,f,c	;volatile
  3077                           
  3078                           ;dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  3079   0011C8  50BF               	movf	191,w,c	;volatile
  3080   0011CA  0BF0               	andlw	-16
  3081   0011CC  0901               	iorlw	1
  3082   0011CE  6EBF               	movwf	191,c	;volatile
  3083                           
  3084                           ;dc_motor.c: 38:     T2PR=199;
  3085   0011D0  0EC7               	movlw	199
  3086   0011D2  6EBC               	movwf	188,c	;volatile
  3087   0011D4                     
  3088                           ; BSR set to: 14
  3089                           ;dc_motor.c: 39:     T2CONbits.ON=1;
  3090   0011D4  8EBD               	bsf	189,7,c	;volatile
  3091                           
  3092                           ;dc_motor.c: 43:     CCPR1H=0;
  3093   0011D6  0E00               	movlw	0
  3094   0011D8  6EAA               	movwf	170,c	;volatile
  3095                           
  3096                           ;dc_motor.c: 44:     CCPR2H=0;
  3097   0011DA  0E00               	movlw	0
  3098   0011DC  6EA6               	movwf	166,c	;volatile
  3099                           
  3100                           ;dc_motor.c: 45:     CCPR3H=0;
  3101   0011DE  0E00               	movlw	0
  3102   0011E0  010F               	movlb	15	; () banked
  3103   0011E2  6F25               	movwf	37,b	;volatile
  3104                           
  3105                           ;dc_motor.c: 46:     CCPR4H=0;
  3106   0011E4  0E00               	movlw	0
  3107   0011E6  6F21               	movwf	33,b	;volatile
  3108                           
  3109                           ;dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  3110   0011E8  0EFC               	movlw	-4
  3111   0011EA  16AD               	andwf	173,f,c	;volatile
  3112                           
  3113                           ;dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  3114   0011EC  0EF3               	movlw	-13
  3115   0011EE  16AD               	andwf	173,f,c	;volatile
  3116                           
  3117                           ;dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  3118   0011F0  0ECF               	movlw	-49
  3119   0011F2  16AD               	andwf	173,f,c	;volatile
  3120                           
  3121                           ;dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  3122   0011F4  0E3F               	movlw	-193
  3123   0011F6  16AD               	andwf	173,f,c	;volatile
  3124   0011F8                     
  3125                           ; BSR set to: 15
  3126                           ;dc_motor.c: 55:     CCP1CONbits.FMT=1;
  3127   0011F8  88AB               	bsf	171,4,c	;volatile
  3128                           
  3129                           ;dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  3130   0011FA  50AB               	movf	171,w,c	;volatile
  3131   0011FC  0BF0               	andlw	-16
  3132   0011FE  090C               	iorlw	12
  3133   001200  6EAB               	movwf	171,c	;volatile
  3134   001202                     
  3135                           ; BSR set to: 15
  3136                           ;dc_motor.c: 57:     CCP1CONbits.EN=1;
  3137   001202  8EAB               	bsf	171,7,c	;volatile
  3138   001204                     
  3139                           ; BSR set to: 15
  3140                           ;dc_motor.c: 59:     CCP2CONbits.FMT=1;
  3141   001204  88A7               	bsf	167,4,c	;volatile
  3142                           
  3143                           ;dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  3144   001206  50A7               	movf	167,w,c	;volatile
  3145   001208  0BF0               	andlw	-16
  3146   00120A  090C               	iorlw	12
  3147   00120C  6EA7               	movwf	167,c	;volatile
  3148   00120E                     
  3149                           ; BSR set to: 15
  3150                           ;dc_motor.c: 61:     CCP2CONbits.EN=1;
  3151   00120E  8EA7               	bsf	167,7,c	;volatile
  3152   001210                     
  3153                           ; BSR set to: 15
  3154                           ;dc_motor.c: 63:     CCP3CONbits.FMT=1;
  3155   001210  8926               	bsf	38,4,b	;volatile
  3156                           
  3157                           ;dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  3158   001212  5126               	movf	38,w,b	;volatile
  3159   001214  0BF0               	andlw	-16
  3160   001216  090C               	iorlw	12
  3161   001218  6F26               	movwf	38,b	;volatile
  3162   00121A                     
  3163                           ; BSR set to: 15
  3164                           ;dc_motor.c: 65:     CCP3CONbits.EN=1;
  3165   00121A  8F26               	bsf	38,7,b	;volatile
  3166   00121C                     
  3167                           ; BSR set to: 15
  3168                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  3169   00121C  8922               	bsf	34,4,b	;volatile
  3170                           
  3171                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  3172   00121E  5122               	movf	34,w,b	;volatile
  3173   001220  0BF0               	andlw	-16
  3174   001222  090C               	iorlw	12
  3175   001224  6F22               	movwf	34,b	;volatile
  3176   001226                     
  3177                           ; BSR set to: 15
  3178                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  3179   001226  8F22               	bsf	34,7,b	;volatile
  3180   001228                     
  3181                           ; BSR set to: 15
  3182   001228  0012               	return		;funcret
  3183   00122A                     __end_of_initDCmotorsPWM:
  3184                           	callstack 0
  3185                           
  3186 ;; *************** function _decide_color *****************
  3187 ;; Defined at:
  3188 ;;		line 103 in file "color.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  mx              2   18[COMRAM] PTR struct colors
  3191 ;;		 -> main@reading(8), 
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;  br              2   28[COMRAM] unsigned int 
  3194 ;;  rr              2   26[COMRAM] unsigned int 
  3195 ;;  gr              2   24[COMRAM] unsigned int 
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      unsigned char 
  3198 ;; Registers used:
  3199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3205 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3206 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3208 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3209 ;;Total ram usage:       12 bytes
  3210 ;; Hardware stack levels used: 1
  3211 ;; Hardware stack levels required when called: 2
  3212 ;; This function calls:
  3213 ;;		___lwdiv
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text17
  3220   000028                     __ptext17:
  3221                           	callstack 0
  3222   000028                     _decide_color:
  3223                           	callstack 28
  3224   000028                     
  3225                           ;color.c: 103: char decide_color(colors *mx);color.c: 104: {;color.c: 106:     unsigned 
      +                          int rr = mx->red/(mx->clear/100);
  3226   000028  0E00               	movlw	0
  3227   00002A  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  3228   00002C  0E64               	movlw	100
  3229   00002E  6E0E               	movwf	___lwdiv@divisor^0,c
  3230   000030  EE20 F006          	lfsr	2,6
  3231   000034  5013               	movf	decide_color@mx^0,w,c
  3232   000036  26D9               	addwf	fsr2l,f,c
  3233   000038  5014               	movf	(decide_color@mx+1)^0,w,c
  3234   00003A  22DA               	addwfc	fsr2h,f,c
  3235   00003C  CFDE F00C          	movff	postinc2,___lwdiv@dividend
  3236   000040  CFDD F00D          	movff	postdec2,___lwdiv@dividend+1
  3237   000044  EC15  F009         	call	___lwdiv	;wreg free
  3238   000048  C00C  F017         	movff	?___lwdiv,_decide_color$2742
  3239   00004C  C00D  F018         	movff	?___lwdiv+1,_decide_color$2742+1
  3240                           
  3241                           ;color.c: 103: char decide_color(colors *mx);color.c: 104: {;color.c: 106:     unsigned 
      +                          int rr = mx->red/(mx->clear/100);
  3242   000050  C013  FFD9         	movff	decide_color@mx,fsr2l
  3243   000054  C014  FFDA         	movff	decide_color@mx+1,fsr2h
  3244   000058  CFDE F00C          	movff	postinc2,___lwdiv@dividend
  3245   00005C  CFDD F00D          	movff	postdec2,___lwdiv@dividend+1
  3246   000060  C017  F00E         	movff	_decide_color$2742,___lwdiv@divisor
  3247   000064  C018  F00F         	movff	_decide_color$2742+1,___lwdiv@divisor+1
  3248   000068  EC15  F009         	call	___lwdiv	;wreg free
  3249   00006C  C00C  F01B         	movff	?___lwdiv,decide_color@rr
  3250   000070  C00D  F01C         	movff	?___lwdiv+1,decide_color@rr+1
  3251                           
  3252                           ;color.c: 107:     unsigned int br = mx->blue/(mx->clear/100);
  3253   000074  0E00               	movlw	0
  3254   000076  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  3255   000078  0E64               	movlw	100
  3256   00007A  6E0E               	movwf	___lwdiv@divisor^0,c
  3257   00007C  EE20 F006          	lfsr	2,6
  3258   000080  5013               	movf	decide_color@mx^0,w,c
  3259   000082  26D9               	addwf	fsr2l,f,c
  3260   000084  5014               	movf	(decide_color@mx+1)^0,w,c
  3261   000086  22DA               	addwfc	fsr2h,f,c
  3262   000088  CFDE F00C          	movff	postinc2,___lwdiv@dividend
  3263   00008C  CFDD F00D          	movff	postdec2,___lwdiv@dividend+1
  3264   000090  EC15  F009         	call	___lwdiv	;wreg free
  3265   000094  C00C  F017         	movff	?___lwdiv,_decide_color$2742
  3266   000098  C00D  F018         	movff	?___lwdiv+1,_decide_color$2742+1
  3267                           
  3268                           ;color.c: 107:     unsigned int br = mx->blue/(mx->clear/100);
  3269   00009C  EE20 F002          	lfsr	2,2
  3270   0000A0  5013               	movf	decide_color@mx^0,w,c
  3271   0000A2  26D9               	addwf	fsr2l,f,c
  3272   0000A4  5014               	movf	(decide_color@mx+1)^0,w,c
  3273   0000A6  22DA               	addwfc	fsr2h,f,c
  3274   0000A8  CFDE F00C          	movff	postinc2,___lwdiv@dividend
  3275   0000AC  CFDD F00D          	movff	postdec2,___lwdiv@dividend+1
  3276   0000B0  C017  F00E         	movff	_decide_color$2742,___lwdiv@divisor
  3277   0000B4  C018  F00F         	movff	_decide_color$2742+1,___lwdiv@divisor+1
  3278   0000B8  EC15  F009         	call	___lwdiv	;wreg free
  3279   0000BC  C00C  F01D         	movff	?___lwdiv,decide_color@br
  3280   0000C0  C00D  F01E         	movff	?___lwdiv+1,decide_color@br+1
  3281                           
  3282                           ;color.c: 108:     unsigned int gr = mx->green/(mx->clear/100);
  3283   0000C4  0E00               	movlw	0
  3284   0000C6  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  3285   0000C8  0E64               	movlw	100
  3286   0000CA  6E0E               	movwf	___lwdiv@divisor^0,c
  3287   0000CC  EE20 F006          	lfsr	2,6
  3288   0000D0  5013               	movf	decide_color@mx^0,w,c
  3289   0000D2  26D9               	addwf	fsr2l,f,c
  3290   0000D4  5014               	movf	(decide_color@mx+1)^0,w,c
  3291   0000D6  22DA               	addwfc	fsr2h,f,c
  3292   0000D8  CFDE F00C          	movff	postinc2,___lwdiv@dividend
  3293   0000DC  CFDD F00D          	movff	postdec2,___lwdiv@dividend+1
  3294   0000E0  EC15  F009         	call	___lwdiv	;wreg free
  3295   0000E4  C00C  F017         	movff	?___lwdiv,_decide_color$2742
  3296   0000E8  C00D  F018         	movff	?___lwdiv+1,_decide_color$2742+1
  3297                           
  3298                           ;color.c: 108:     unsigned int gr = mx->green/(mx->clear/100);
  3299   0000EC  EE20 F004          	lfsr	2,4
  3300   0000F0  5013               	movf	decide_color@mx^0,w,c
  3301   0000F2  26D9               	addwf	fsr2l,f,c
  3302   0000F4  5014               	movf	(decide_color@mx+1)^0,w,c
  3303   0000F6  22DA               	addwfc	fsr2h,f,c
  3304   0000F8  CFDE F00C          	movff	postinc2,___lwdiv@dividend
  3305   0000FC  CFDD F00D          	movff	postdec2,___lwdiv@dividend+1
  3306   000100  C017  F00E         	movff	_decide_color$2742,___lwdiv@divisor
  3307   000104  C018  F00F         	movff	_decide_color$2742+1,___lwdiv@divisor+1
  3308   000108  EC15  F009         	call	___lwdiv	;wreg free
  3309   00010C  C00C  F019         	movff	?___lwdiv,decide_color@gr
  3310   000110  C00D  F01A         	movff	?___lwdiv+1,decide_color@gr+1
  3311   000114                     
  3312                           ;color.c: 110:     if ((150<rr) & (40<br && br<80) & (0<gr && gr<40) & (200<mx->clear &&
      +                           mx->clear<400)) {return 2;}
  3313   000114  501C               	movf	(decide_color@rr+1)^0,w,c
  3314   000116  E109               	bnz	u1280
  3315   000118  0E97               	movlw	151
  3316   00011A  5C1B               	subwf	decide_color@rr^0,w,c
  3317   00011C  A0D8               	btfss	status,0,c
  3318   00011E  EF93  F000         	goto	u1281
  3319   000122  EF95  F000         	goto	u1280
  3320   000126                     u1281:
  3321   000126  EFE5  F000         	goto	l2365
  3322   00012A                     u1280:
  3323   00012A  501E               	movf	(decide_color@br+1)^0,w,c
  3324   00012C  E109               	bnz	u1290
  3325   00012E  0E29               	movlw	41
  3326   000130  5C1D               	subwf	decide_color@br^0,w,c
  3327   000132  A0D8               	btfss	status,0,c
  3328   000134  EF9E  F000         	goto	u1291
  3329   000138  EFA0  F000         	goto	u1290
  3330   00013C                     u1291:
  3331   00013C  EFE5  F000         	goto	l2365
  3332   000140                     u1290:
  3333   000140  501E               	movf	(decide_color@br+1)^0,w,c
  3334   000142  E107               	bnz	u1301
  3335   000144  0E50               	movlw	80
  3336   000146  5C1D               	subwf	decide_color@br^0,w,c
  3337   000148  B0D8               	btfsc	status,0,c
  3338   00014A  EFA9  F000         	goto	u1301
  3339   00014E  EFAB  F000         	goto	u1300
  3340   000152                     u1301:
  3341   000152  EFE5  F000         	goto	l2365
  3342   000156                     u1300:
  3343   000156  5019               	movf	decide_color@gr^0,w,c
  3344   000158  101A               	iorwf	(decide_color@gr+1)^0,w,c
  3345   00015A  B4D8               	btfsc	status,2,c
  3346   00015C  EFB2  F000         	goto	u1311
  3347   000160  EFB4  F000         	goto	u1310
  3348   000164                     u1311:
  3349   000164  EFE5  F000         	goto	l2365
  3350   000168                     u1310:
  3351   000168  501A               	movf	(decide_color@gr+1)^0,w,c
  3352   00016A  E107               	bnz	u1321
  3353   00016C  0E28               	movlw	40
  3354   00016E  5C19               	subwf	decide_color@gr^0,w,c
  3355   000170  B0D8               	btfsc	status,0,c
  3356   000172  EFBD  F000         	goto	u1321
  3357   000176  EFBF  F000         	goto	u1320
  3358   00017A                     u1321:
  3359   00017A  EFE5  F000         	goto	l2365
  3360   00017E                     u1320:
  3361   00017E  EE20 F006          	lfsr	2,6
  3362   000182  5013               	movf	decide_color@mx^0,w,c
  3363   000184  26D9               	addwf	fsr2l,f,c
  3364   000186  5014               	movf	(decide_color@mx+1)^0,w,c
  3365   000188  22DA               	addwfc	fsr2h,f,c
  3366   00018A  0E01               	movlw	1
  3367   00018C  50DB               	movf	plusw2,w,c
  3368   00018E  E109               	bnz	u1330
  3369   000190  0EC9               	movlw	201
  3370   000192  5CDE               	subwf	postinc2,w,c
  3371   000194  A0D8               	btfss	status,0,c
  3372   000196  EFCF  F000         	goto	u1331
  3373   00019A  EFD1  F000         	goto	u1330
  3374   00019E                     u1331:
  3375   00019E  EFE5  F000         	goto	l2365
  3376   0001A2                     u1330:
  3377   0001A2  EE20 F006          	lfsr	2,6
  3378   0001A6  5013               	movf	decide_color@mx^0,w,c
  3379   0001A8  26D9               	addwf	fsr2l,f,c
  3380   0001AA  5014               	movf	(decide_color@mx+1)^0,w,c
  3381   0001AC  22DA               	addwfc	fsr2h,f,c
  3382   0001AE  0E90               	movlw	144
  3383   0001B0  5CDE               	subwf	postinc2,w,c
  3384   0001B2  0E01               	movlw	1
  3385   0001B4  58DE               	subwfb	postinc2,w,c
  3386   0001B6  B0D8               	btfsc	status,0,c
  3387   0001B8  EFE0  F000         	goto	u1341
  3388   0001BC  EFE2  F000         	goto	u1340
  3389   0001C0                     u1341:
  3390   0001C0  EFE5  F000         	goto	l2365
  3391   0001C4                     u1340:
  3392   0001C4  0E02               	movlw	2
  3393   0001C6  EFAC  F002         	goto	l408
  3394   0001CA                     l2365:
  3395                           
  3396                           ;color.c: 112:     if ((60<rr && rr<100) & (60<br && br<100) & (110<gr) & (mx->clear<550
      +                          )) {return 3;}
  3397   0001CA  501C               	movf	(decide_color@rr+1)^0,w,c
  3398   0001CC  E109               	bnz	u1350
  3399   0001CE  0E3D               	movlw	61
  3400   0001D0  5C1B               	subwf	decide_color@rr^0,w,c
  3401   0001D2  A0D8               	btfss	status,0,c
  3402   0001D4  EFEE  F000         	goto	u1351
  3403   0001D8  EFF0  F000         	goto	u1350
  3404   0001DC                     u1351:
  3405   0001DC  EF30  F001         	goto	l2381
  3406   0001E0                     u1350:
  3407   0001E0  501C               	movf	(decide_color@rr+1)^0,w,c
  3408   0001E2  E107               	bnz	u1361
  3409   0001E4  0E64               	movlw	100
  3410   0001E6  5C1B               	subwf	decide_color@rr^0,w,c
  3411   0001E8  B0D8               	btfsc	status,0,c
  3412   0001EA  EFF9  F000         	goto	u1361
  3413   0001EE  EFFB  F000         	goto	u1360
  3414   0001F2                     u1361:
  3415   0001F2  EF30  F001         	goto	l2381
  3416   0001F6                     u1360:
  3417   0001F6  501E               	movf	(decide_color@br+1)^0,w,c
  3418   0001F8  E109               	bnz	u1370
  3419   0001FA  0E3D               	movlw	61
  3420   0001FC  5C1D               	subwf	decide_color@br^0,w,c
  3421   0001FE  A0D8               	btfss	status,0,c
  3422   000200  EF04  F001         	goto	u1371
  3423   000204  EF06  F001         	goto	u1370
  3424   000208                     u1371:
  3425   000208  EF30  F001         	goto	l2381
  3426   00020C                     u1370:
  3427   00020C  501E               	movf	(decide_color@br+1)^0,w,c
  3428   00020E  E107               	bnz	u1381
  3429   000210  0E64               	movlw	100
  3430   000212  5C1D               	subwf	decide_color@br^0,w,c
  3431   000214  B0D8               	btfsc	status,0,c
  3432   000216  EF0F  F001         	goto	u1381
  3433   00021A  EF11  F001         	goto	u1380
  3434   00021E                     u1381:
  3435   00021E  EF30  F001         	goto	l2381
  3436   000222                     u1380:
  3437   000222  501A               	movf	(decide_color@gr+1)^0,w,c
  3438   000224  E109               	bnz	u1390
  3439   000226  0E6F               	movlw	111
  3440   000228  5C19               	subwf	decide_color@gr^0,w,c
  3441   00022A  A0D8               	btfss	status,0,c
  3442   00022C  EF1A  F001         	goto	u1391
  3443   000230  EF1C  F001         	goto	u1390
  3444   000234                     u1391:
  3445   000234  EF30  F001         	goto	l2381
  3446   000238                     u1390:
  3447   000238  EE20 F006          	lfsr	2,6
  3448   00023C  5013               	movf	decide_color@mx^0,w,c
  3449   00023E  26D9               	addwf	fsr2l,f,c
  3450   000240  5014               	movf	(decide_color@mx+1)^0,w,c
  3451   000242  22DA               	addwfc	fsr2h,f,c
  3452   000244  0E26               	movlw	38
  3453   000246  5CDE               	subwf	postinc2,w,c
  3454   000248  0E02               	movlw	2
  3455   00024A  58DE               	subwfb	postinc2,w,c
  3456   00024C  B0D8               	btfsc	status,0,c
  3457   00024E  EF2B  F001         	goto	u1401
  3458   000252  EF2D  F001         	goto	u1400
  3459   000256                     u1401:
  3460   000256  EF30  F001         	goto	l2381
  3461   00025A                     u1400:
  3462   00025A  0E03               	movlw	3
  3463   00025C  EFAC  F002         	goto	l408
  3464   000260                     l2381:
  3465                           
  3466                           ;color.c: 114:     if ((45<rr && rr<55) & (160<br && br<180) & (90<gr && gr<110) & (100<
      +                          mx->clear && mx->clear<200)) {return 4;}
  3467   000260  501C               	movf	(decide_color@rr+1)^0,w,c
  3468   000262  E109               	bnz	u1410
  3469   000264  0E2E               	movlw	46
  3470   000266  5C1B               	subwf	decide_color@rr^0,w,c
  3471   000268  A0D8               	btfss	status,0,c
  3472   00026A  EF39  F001         	goto	u1411
  3473   00026E  EF3B  F001         	goto	u1410
  3474   000272                     u1411:
  3475   000272  EF99  F001         	goto	l2401
  3476   000276                     u1410:
  3477   000276  501C               	movf	(decide_color@rr+1)^0,w,c
  3478   000278  E107               	bnz	u1421
  3479   00027A  0E37               	movlw	55
  3480   00027C  5C1B               	subwf	decide_color@rr^0,w,c
  3481   00027E  B0D8               	btfsc	status,0,c
  3482   000280  EF44  F001         	goto	u1421
  3483   000284  EF46  F001         	goto	u1420
  3484   000288                     u1421:
  3485   000288  EF99  F001         	goto	l2401
  3486   00028C                     u1420:
  3487   00028C  501E               	movf	(decide_color@br+1)^0,w,c
  3488   00028E  E109               	bnz	u1430
  3489   000290  0EA1               	movlw	161
  3490   000292  5C1D               	subwf	decide_color@br^0,w,c
  3491   000294  A0D8               	btfss	status,0,c
  3492   000296  EF4F  F001         	goto	u1431
  3493   00029A  EF51  F001         	goto	u1430
  3494   00029E                     u1431:
  3495   00029E  EF99  F001         	goto	l2401
  3496   0002A2                     u1430:
  3497   0002A2  501E               	movf	(decide_color@br+1)^0,w,c
  3498   0002A4  E107               	bnz	u1441
  3499   0002A6  0EB4               	movlw	180
  3500   0002A8  5C1D               	subwf	decide_color@br^0,w,c
  3501   0002AA  B0D8               	btfsc	status,0,c
  3502   0002AC  EF5A  F001         	goto	u1441
  3503   0002B0  EF5C  F001         	goto	u1440
  3504   0002B4                     u1441:
  3505   0002B4  EF99  F001         	goto	l2401
  3506   0002B8                     u1440:
  3507   0002B8  501A               	movf	(decide_color@gr+1)^0,w,c
  3508   0002BA  E109               	bnz	u1450
  3509   0002BC  0E5B               	movlw	91
  3510   0002BE  5C19               	subwf	decide_color@gr^0,w,c
  3511   0002C0  A0D8               	btfss	status,0,c
  3512   0002C2  EF65  F001         	goto	u1451
  3513   0002C6  EF67  F001         	goto	u1450
  3514   0002CA                     u1451:
  3515   0002CA  EF99  F001         	goto	l2401
  3516   0002CE                     u1450:
  3517   0002CE  501A               	movf	(decide_color@gr+1)^0,w,c
  3518   0002D0  E107               	bnz	u1461
  3519   0002D2  0E6E               	movlw	110
  3520   0002D4  5C19               	subwf	decide_color@gr^0,w,c
  3521   0002D6  B0D8               	btfsc	status,0,c
  3522   0002D8  EF70  F001         	goto	u1461
  3523   0002DC  EF72  F001         	goto	u1460
  3524   0002E0                     u1461:
  3525   0002E0  EF99  F001         	goto	l2401
  3526   0002E4                     u1460:
  3527   0002E4  EE20 F006          	lfsr	2,6
  3528   0002E8  5013               	movf	decide_color@mx^0,w,c
  3529   0002EA  26D9               	addwf	fsr2l,f,c
  3530   0002EC  5014               	movf	(decide_color@mx+1)^0,w,c
  3531   0002EE  22DA               	addwfc	fsr2h,f,c
  3532   0002F0  0E01               	movlw	1
  3533   0002F2  50DB               	movf	plusw2,w,c
  3534   0002F4  E109               	bnz	u1470
  3535   0002F6  0E65               	movlw	101
  3536   0002F8  5CDE               	subwf	postinc2,w,c
  3537   0002FA  A0D8               	btfss	status,0,c
  3538   0002FC  EF82  F001         	goto	u1471
  3539   000300  EF84  F001         	goto	u1470
  3540   000304                     u1471:
  3541   000304  EF99  F001         	goto	l2401
  3542   000308                     u1470:
  3543   000308  EE20 F006          	lfsr	2,6
  3544   00030C  5013               	movf	decide_color@mx^0,w,c
  3545   00030E  26D9               	addwf	fsr2l,f,c
  3546   000310  5014               	movf	(decide_color@mx+1)^0,w,c
  3547   000312  22DA               	addwfc	fsr2h,f,c
  3548   000314  0E01               	movlw	1
  3549   000316  50DB               	movf	plusw2,w,c
  3550   000318  E107               	bnz	u1481
  3551   00031A  0EC8               	movlw	200
  3552   00031C  5CDE               	subwf	postinc2,w,c
  3553   00031E  B0D8               	btfsc	status,0,c
  3554   000320  EF94  F001         	goto	u1481
  3555   000324  EF96  F001         	goto	u1480
  3556   000328                     u1481:
  3557   000328  EF99  F001         	goto	l2401
  3558   00032C                     u1480:
  3559   00032C  0E04               	movlw	4
  3560   00032E  EFAC  F002         	goto	l408
  3561   000332                     l2401:
  3562                           
  3563                           ;color.c: 116:     if ((105<rr) & (br<80) & (95<gr) & (600<mx->clear && mx->clear<800)) 
      +                          {return 5;}
  3564   000332  501C               	movf	(decide_color@rr+1)^0,w,c
  3565   000334  E109               	bnz	u1490
  3566   000336  0E6A               	movlw	106
  3567   000338  5C1B               	subwf	decide_color@rr^0,w,c
  3568   00033A  A0D8               	btfss	status,0,c
  3569   00033C  EFA2  F001         	goto	u1491
  3570   000340  EFA4  F001         	goto	u1490
  3571   000344                     u1491:
  3572   000344  EFDF  F001         	goto	l2415
  3573   000348                     u1490:
  3574   000348  501E               	movf	(decide_color@br+1)^0,w,c
  3575   00034A  E107               	bnz	u1501
  3576   00034C  0E50               	movlw	80
  3577   00034E  5C1D               	subwf	decide_color@br^0,w,c
  3578   000350  B0D8               	btfsc	status,0,c
  3579   000352  EFAD  F001         	goto	u1501
  3580   000356  EFAF  F001         	goto	u1500
  3581   00035A                     u1501:
  3582   00035A  EFDF  F001         	goto	l2415
  3583   00035E                     u1500:
  3584   00035E  501A               	movf	(decide_color@gr+1)^0,w,c
  3585   000360  E109               	bnz	u1510
  3586   000362  0E60               	movlw	96
  3587   000364  5C19               	subwf	decide_color@gr^0,w,c
  3588   000366  A0D8               	btfss	status,0,c
  3589   000368  EFB8  F001         	goto	u1511
  3590   00036C  EFBA  F001         	goto	u1510
  3591   000370                     u1511:
  3592   000370  EFDF  F001         	goto	l2415
  3593   000374                     u1510:
  3594   000374  EE20 F006          	lfsr	2,6
  3595   000378  5013               	movf	decide_color@mx^0,w,c
  3596   00037A  26D9               	addwf	fsr2l,f,c
  3597   00037C  5014               	movf	(decide_color@mx+1)^0,w,c
  3598   00037E  22DA               	addwfc	fsr2h,f,c
  3599   000380  0E59               	movlw	89
  3600   000382  5CDE               	subwf	postinc2,w,c
  3601   000384  0E02               	movlw	2
  3602   000386  58DE               	subwfb	postinc2,w,c
  3603   000388  A0D8               	btfss	status,0,c
  3604   00038A  EFC9  F001         	goto	u1521
  3605   00038E  EFCB  F001         	goto	u1520
  3606   000392                     u1521:
  3607   000392  EFDF  F001         	goto	l2415
  3608   000396                     u1520:
  3609   000396  EE20 F006          	lfsr	2,6
  3610   00039A  5013               	movf	decide_color@mx^0,w,c
  3611   00039C  26D9               	addwf	fsr2l,f,c
  3612   00039E  5014               	movf	(decide_color@mx+1)^0,w,c
  3613   0003A0  22DA               	addwfc	fsr2h,f,c
  3614   0003A2  0E20               	movlw	32
  3615   0003A4  5CDE               	subwf	postinc2,w,c
  3616   0003A6  0E03               	movlw	3
  3617   0003A8  58DE               	subwfb	postinc2,w,c
  3618   0003AA  B0D8               	btfsc	status,0,c
  3619   0003AC  EFDA  F001         	goto	u1531
  3620   0003B0  EFDC  F001         	goto	u1530
  3621   0003B4                     u1531:
  3622   0003B4  EFDF  F001         	goto	l2415
  3623   0003B8                     u1530:
  3624   0003B8  0E05               	movlw	5
  3625   0003BA  EFAC  F002         	goto	l408
  3626   0003BE                     l2415:
  3627                           
  3628                           ;color.c: 118:     if ((100<rr && rr<120) & (br>80) & (gr<100) & (550<mx->clear && mx->c
      +                          lear<750)) {return 6;}
  3629   0003BE  501C               	movf	(decide_color@rr+1)^0,w,c
  3630   0003C0  E109               	bnz	u1540
  3631   0003C2  0E65               	movlw	101
  3632   0003C4  5C1B               	subwf	decide_color@rr^0,w,c
  3633   0003C6  A0D8               	btfss	status,0,c
  3634   0003C8  EFE8  F001         	goto	u1541
  3635   0003CC  EFEA  F001         	goto	u1540
  3636   0003D0                     u1541:
  3637   0003D0  EF30  F002         	goto	l2431
  3638   0003D4                     u1540:
  3639   0003D4  501C               	movf	(decide_color@rr+1)^0,w,c
  3640   0003D6  E107               	bnz	u1551
  3641   0003D8  0E78               	movlw	120
  3642   0003DA  5C1B               	subwf	decide_color@rr^0,w,c
  3643   0003DC  B0D8               	btfsc	status,0,c
  3644   0003DE  EFF3  F001         	goto	u1551
  3645   0003E2  EFF5  F001         	goto	u1550
  3646   0003E6                     u1551:
  3647   0003E6  EF30  F002         	goto	l2431
  3648   0003EA                     u1550:
  3649   0003EA  501E               	movf	(decide_color@br+1)^0,w,c
  3650   0003EC  E109               	bnz	u1560
  3651   0003EE  0E51               	movlw	81
  3652   0003F0  5C1D               	subwf	decide_color@br^0,w,c
  3653   0003F2  A0D8               	btfss	status,0,c
  3654   0003F4  EFFE  F001         	goto	u1561
  3655   0003F8  EF00  F002         	goto	u1560
  3656   0003FC                     u1561:
  3657   0003FC  EF30  F002         	goto	l2431
  3658   000400                     u1560:
  3659   000400  501A               	movf	(decide_color@gr+1)^0,w,c
  3660   000402  E107               	bnz	u1571
  3661   000404  0E64               	movlw	100
  3662   000406  5C19               	subwf	decide_color@gr^0,w,c
  3663   000408  B0D8               	btfsc	status,0,c
  3664   00040A  EF09  F002         	goto	u1571
  3665   00040E  EF0B  F002         	goto	u1570
  3666   000412                     u1571:
  3667   000412  EF30  F002         	goto	l2431
  3668   000416                     u1570:
  3669   000416  EE20 F006          	lfsr	2,6
  3670   00041A  5013               	movf	decide_color@mx^0,w,c
  3671   00041C  26D9               	addwf	fsr2l,f,c
  3672   00041E  5014               	movf	(decide_color@mx+1)^0,w,c
  3673   000420  22DA               	addwfc	fsr2h,f,c
  3674   000422  0E27               	movlw	39
  3675   000424  5CDE               	subwf	postinc2,w,c
  3676   000426  0E02               	movlw	2
  3677   000428  58DE               	subwfb	postinc2,w,c
  3678   00042A  A0D8               	btfss	status,0,c
  3679   00042C  EF1A  F002         	goto	u1581
  3680   000430  EF1C  F002         	goto	u1580
  3681   000434                     u1581:
  3682   000434  EF30  F002         	goto	l2431
  3683   000438                     u1580:
  3684   000438  EE20 F006          	lfsr	2,6
  3685   00043C  5013               	movf	decide_color@mx^0,w,c
  3686   00043E  26D9               	addwf	fsr2l,f,c
  3687   000440  5014               	movf	(decide_color@mx+1)^0,w,c
  3688   000442  22DA               	addwfc	fsr2h,f,c
  3689   000444  0EEE               	movlw	238
  3690   000446  5CDE               	subwf	postinc2,w,c
  3691   000448  0E02               	movlw	2
  3692   00044A  58DE               	subwfb	postinc2,w,c
  3693   00044C  B0D8               	btfsc	status,0,c
  3694   00044E  EF2B  F002         	goto	u1591
  3695   000452  EF2D  F002         	goto	u1590
  3696   000456                     u1591:
  3697   000456  EF30  F002         	goto	l2431
  3698   00045A                     u1590:
  3699   00045A  0E06               	movlw	6
  3700   00045C  EFAC  F002         	goto	l408
  3701   000460                     l2431:
  3702                           
  3703                           ;color.c: 120:     if ((140<rr) & (br<85) & (gr<85) & (mx->clear<600)) {return 7;}
  3704   000460  501C               	movf	(decide_color@rr+1)^0,w,c
  3705   000462  E109               	bnz	u1600
  3706   000464  0E8D               	movlw	141
  3707   000466  5C1B               	subwf	decide_color@rr^0,w,c
  3708   000468  A0D8               	btfss	status,0,c
  3709   00046A  EF39  F002         	goto	u1601
  3710   00046E  EF3B  F002         	goto	u1600
  3711   000472                     u1601:
  3712   000472  EF65  F002         	goto	l2443
  3713   000476                     u1600:
  3714   000476  501E               	movf	(decide_color@br+1)^0,w,c
  3715   000478  E107               	bnz	u1611
  3716   00047A  0E55               	movlw	85
  3717   00047C  5C1D               	subwf	decide_color@br^0,w,c
  3718   00047E  B0D8               	btfsc	status,0,c
  3719   000480  EF44  F002         	goto	u1611
  3720   000484  EF46  F002         	goto	u1610
  3721   000488                     u1611:
  3722   000488  EF65  F002         	goto	l2443
  3723   00048C                     u1610:
  3724   00048C  501A               	movf	(decide_color@gr+1)^0,w,c
  3725   00048E  E107               	bnz	u1621
  3726   000490  0E55               	movlw	85
  3727   000492  5C19               	subwf	decide_color@gr^0,w,c
  3728   000494  B0D8               	btfsc	status,0,c
  3729   000496  EF4F  F002         	goto	u1621
  3730   00049A  EF51  F002         	goto	u1620
  3731   00049E                     u1621:
  3732   00049E  EF65  F002         	goto	l2443
  3733   0004A2                     u1620:
  3734   0004A2  EE20 F006          	lfsr	2,6
  3735   0004A6  5013               	movf	decide_color@mx^0,w,c
  3736   0004A8  26D9               	addwf	fsr2l,f,c
  3737   0004AA  5014               	movf	(decide_color@mx+1)^0,w,c
  3738   0004AC  22DA               	addwfc	fsr2h,f,c
  3739   0004AE  0E58               	movlw	88
  3740   0004B0  5CDE               	subwf	postinc2,w,c
  3741   0004B2  0E02               	movlw	2
  3742   0004B4  58DE               	subwfb	postinc2,w,c
  3743   0004B6  B0D8               	btfsc	status,0,c
  3744   0004B8  EF60  F002         	goto	u1631
  3745   0004BC  EF62  F002         	goto	u1630
  3746   0004C0                     u1631:
  3747   0004C0  EF65  F002         	goto	l2443
  3748   0004C4                     u1630:
  3749   0004C4  0E07               	movlw	7
  3750   0004C6  EFAC  F002         	goto	l408
  3751   0004CA                     l2443:
  3752                           
  3753                           ;color.c: 122:     if ((rr<90) & (110<br) & (120<gr) & (400<mx->clear && mx->clear<700))
      +                           {return 8;}
  3754   0004CA  501C               	movf	(decide_color@rr+1)^0,w,c
  3755   0004CC  E107               	bnz	u1641
  3756   0004CE  0E5A               	movlw	90
  3757   0004D0  5C1B               	subwf	decide_color@rr^0,w,c
  3758   0004D2  B0D8               	btfsc	status,0,c
  3759   0004D4  EF6E  F002         	goto	u1641
  3760   0004D8  EF70  F002         	goto	u1640
  3761   0004DC                     u1641:
  3762   0004DC  EFAB  F002         	goto	l2457
  3763   0004E0                     u1640:
  3764   0004E0  501E               	movf	(decide_color@br+1)^0,w,c
  3765   0004E2  E109               	bnz	u1650
  3766   0004E4  0E6F               	movlw	111
  3767   0004E6  5C1D               	subwf	decide_color@br^0,w,c
  3768   0004E8  A0D8               	btfss	status,0,c
  3769   0004EA  EF79  F002         	goto	u1651
  3770   0004EE  EF7B  F002         	goto	u1650
  3771   0004F2                     u1651:
  3772   0004F2  EFAB  F002         	goto	l2457
  3773   0004F6                     u1650:
  3774   0004F6  501A               	movf	(decide_color@gr+1)^0,w,c
  3775   0004F8  E109               	bnz	u1660
  3776   0004FA  0E79               	movlw	121
  3777   0004FC  5C19               	subwf	decide_color@gr^0,w,c
  3778   0004FE  A0D8               	btfss	status,0,c
  3779   000500  EF84  F002         	goto	u1661
  3780   000504  EF86  F002         	goto	u1660
  3781   000508                     u1661:
  3782   000508  EFAB  F002         	goto	l2457
  3783   00050C                     u1660:
  3784   00050C  EE20 F006          	lfsr	2,6
  3785   000510  5013               	movf	decide_color@mx^0,w,c
  3786   000512  26D9               	addwf	fsr2l,f,c
  3787   000514  5014               	movf	(decide_color@mx+1)^0,w,c
  3788   000516  22DA               	addwfc	fsr2h,f,c
  3789   000518  0E91               	movlw	145
  3790   00051A  5CDE               	subwf	postinc2,w,c
  3791   00051C  0E01               	movlw	1
  3792   00051E  58DE               	subwfb	postinc2,w,c
  3793   000520  A0D8               	btfss	status,0,c
  3794   000522  EF95  F002         	goto	u1671
  3795   000526  EF97  F002         	goto	u1670
  3796   00052A                     u1671:
  3797   00052A  EFAB  F002         	goto	l2457
  3798   00052E                     u1670:
  3799   00052E  EE20 F006          	lfsr	2,6
  3800   000532  5013               	movf	decide_color@mx^0,w,c
  3801   000534  26D9               	addwf	fsr2l,f,c
  3802   000536  5014               	movf	(decide_color@mx+1)^0,w,c
  3803   000538  22DA               	addwfc	fsr2h,f,c
  3804   00053A  0EBC               	movlw	188
  3805   00053C  5CDE               	subwf	postinc2,w,c
  3806   00053E  0E02               	movlw	2
  3807   000540  58DE               	subwfb	postinc2,w,c
  3808   000542  B0D8               	btfsc	status,0,c
  3809   000544  EFA6  F002         	goto	u1681
  3810   000548  EFA8  F002         	goto	u1680
  3811   00054C                     u1681:
  3812   00054C  EFAB  F002         	goto	l2457
  3813   000550                     u1680:
  3814   000550  0E08               	movlw	8
  3815   000552  EFAC  F002         	goto	l408
  3816   000556                     l2457:
  3817   000556  0E09               	movlw	9
  3818   000558                     l408:
  3819   000558  0012               	return		;funcret
  3820   00055A                     __end_of_decide_color:
  3821                           	callstack 0
  3822                           
  3823 ;; *************** function ___lwdiv *****************
  3824 ;; Defined at:
  3825 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  dividend        2   11[COMRAM] unsigned int 
  3828 ;;  divisor         2   13[COMRAM] unsigned int 
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  quotient        2   15[COMRAM] unsigned int 
  3831 ;;  counter         1   17[COMRAM] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  2   11[COMRAM] unsigned int 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3841 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3842 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3844 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3845 ;;Total ram usage:        7 bytes
  3846 ;; Hardware stack levels used: 1
  3847 ;; Hardware stack levels required when called: 1
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_setMotorPWM
  3852 ;;		_main
  3853 ;;		_decide_color
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text18
  3858   00122A                     __ptext18:
  3859                           	callstack 0
  3860   00122A                     ___lwdiv:
  3861                           	callstack 26
  3862   00122A  0E00               	movlw	0
  3863   00122C  6E11               	movwf	(___lwdiv@quotient+1)^0,c
  3864   00122E  0E00               	movlw	0
  3865   001230  6E10               	movwf	___lwdiv@quotient^0,c
  3866   001232  500E               	movf	___lwdiv@divisor^0,w,c
  3867   001234  100F               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3868   001236  B4D8               	btfsc	status,2,c
  3869   001238  EF20  F009         	goto	u871
  3870   00123C  EF22  F009         	goto	u870
  3871   001240                     u871:
  3872   001240  EF4A  F009         	goto	l931
  3873   001244                     u870:
  3874   001244  0E01               	movlw	1
  3875   001246  6E12               	movwf	___lwdiv@counter^0,c
  3876   001248  EF2A  F009         	goto	l1901
  3877   00124C                     l1899:
  3878   00124C  90D8               	bcf	status,0,c
  3879   00124E  360E               	rlcf	___lwdiv@divisor^0,f,c
  3880   001250  360F               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3881   001252  2A12               	incf	___lwdiv@counter^0,f,c
  3882   001254                     l1901:
  3883   001254  AE0F               	btfss	(___lwdiv@divisor+1)^0,7,c
  3884   001256  EF2F  F009         	goto	u881
  3885   00125A  EF31  F009         	goto	u880
  3886   00125E                     u881:
  3887   00125E  EF26  F009         	goto	l1899
  3888   001262                     u880:
  3889   001262                     l1903:
  3890   001262  90D8               	bcf	status,0,c
  3891   001264  3610               	rlcf	___lwdiv@quotient^0,f,c
  3892   001266  3611               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3893   001268  500E               	movf	___lwdiv@divisor^0,w,c
  3894   00126A  5C0C               	subwf	___lwdiv@dividend^0,w,c
  3895   00126C  500F               	movf	(___lwdiv@divisor+1)^0,w,c
  3896   00126E  580D               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3897   001270  A0D8               	btfss	status,0,c
  3898   001272  EF3D  F009         	goto	u891
  3899   001276  EF3F  F009         	goto	u890
  3900   00127A                     u891:
  3901   00127A  EF44  F009         	goto	l1911
  3902   00127E                     u890:
  3903   00127E  500E               	movf	___lwdiv@divisor^0,w,c
  3904   001280  5E0C               	subwf	___lwdiv@dividend^0,f,c
  3905   001282  500F               	movf	(___lwdiv@divisor+1)^0,w,c
  3906   001284  5A0D               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3907   001286  8010               	bsf	___lwdiv@quotient^0,0,c
  3908   001288                     l1911:
  3909   001288  90D8               	bcf	status,0,c
  3910   00128A  320F               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3911   00128C  320E               	rrcf	___lwdiv@divisor^0,f,c
  3912   00128E  2E12               	decfsz	___lwdiv@counter^0,f,c
  3913   001290  EF31  F009         	goto	l1903
  3914   001294                     l931:
  3915   001294  C010  F00C         	movff	___lwdiv@quotient,?___lwdiv
  3916   001298  C011  F00D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3917   00129C  0012               	return		;funcret
  3918   00129E                     __end_of___lwdiv:
  3919                           	callstack 0
  3920                           
  3921 ;; *************** function _color_read_Red *****************
  3922 ;; Defined at:
  3923 ;;		line 46 in file "color.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;		None
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  tmp             2    9[COMRAM] unsigned int 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  2    4[COMRAM] unsigned int 
  3930 ;; Registers used:
  3931 ;;		wreg, status,2, status,0, cstack
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3938 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3939 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3940 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3941 ;;Total ram usage:        7 bytes
  3942 ;; Hardware stack levels used: 1
  3943 ;; Hardware stack levels required when called: 3
  3944 ;; This function calls:
  3945 ;;		_I2C_2_Master_Read
  3946 ;;		_I2C_2_Master_RepStart
  3947 ;;		_I2C_2_Master_Start
  3948 ;;		_I2C_2_Master_Stop
  3949 ;;		_I2C_2_Master_Write
  3950 ;; This function is called by:
  3951 ;;		_main
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text19
  3956   001310                     __ptext19:
  3957                           	callstack 0
  3958   001310                     _color_read_Red:
  3959                           	callstack 27
  3960   001310                     
  3961                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
  3962   001310  EC1F  F00B         	call	_I2C_2_Master_Start	;wreg free
  3963                           
  3964                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  3965   001314  0E52               	movlw	82
  3966   001316  EC09  F00B         	call	_I2C_2_Master_Write
  3967                           
  3968                           ;color.c: 51:  I2C_2_Master_Write(0xA0 | 0x16);
  3969   00131A  0EB6               	movlw	182
  3970   00131C  EC09  F00B         	call	_I2C_2_Master_Write
  3971                           
  3972                           ;color.c: 53:  I2C_2_Master_RepStart();
  3973   001320  EC15  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  3974                           
  3975                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  3976   001324  0E53               	movlw	83
  3977   001326  EC09  F00B         	call	_I2C_2_Master_Write
  3978                           
  3979                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  3980   00132A  0E01               	movlw	1
  3981   00132C  EC28  F00A         	call	_I2C_2_Master_Read
  3982   001330  6E07               	movwf	??_color_read_Red^0,c
  3983   001332  5007               	movf	??_color_read_Red^0,w,c
  3984   001334  6E0A               	movwf	color_read_Red@tmp^0,c
  3985   001336  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3986                           
  3987                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3988   001338  0E00               	movlw	0
  3989   00133A  EC28  F00A         	call	_I2C_2_Master_Read
  3990   00133E  6E07               	movwf	??_color_read_Red^0,c
  3991   001340  5007               	movf	??_color_read_Red^0,w,c
  3992   001342  6E09               	movwf	(??_color_read_Red+2)^0,c
  3993   001344  6A08               	clrf	(??_color_read_Red+1)^0,c
  3994   001346  500A               	movf	color_read_Red@tmp^0,w,c
  3995   001348  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3996   00134A  6E0A               	movwf	color_read_Red@tmp^0,c
  3997   00134C  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3998   00134E  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3999   001350  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  4000                           
  4001                           ;color.c: 57:  I2C_2_Master_Stop();
  4002   001352  EC1A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  4003   001356                     
  4004                           ;color.c: 58:  return tmp;
  4005   001356  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  4006   00135A  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4007   00135E  0012               	return		;funcret
  4008   001360                     __end_of_color_read_Red:
  4009                           	callstack 0
  4010                           
  4011 ;; *************** function _color_read_Green *****************
  4012 ;; Defined at:
  4013 ;;		line 61 in file "color.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  tmp             2    9[COMRAM] unsigned int 
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  2    4[COMRAM] unsigned int 
  4020 ;; Registers used:
  4021 ;;		wreg, status,2, status,0, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4027 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4028 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4029 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4030 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4031 ;;Total ram usage:        7 bytes
  4032 ;; Hardware stack levels used: 1
  4033 ;; Hardware stack levels required when called: 3
  4034 ;; This function calls:
  4035 ;;		_I2C_2_Master_Read
  4036 ;;		_I2C_2_Master_RepStart
  4037 ;;		_I2C_2_Master_Start
  4038 ;;		_I2C_2_Master_Stop
  4039 ;;		_I2C_2_Master_Write
  4040 ;; This function is called by:
  4041 ;;		_main
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text20
  4046   001360                     __ptext20:
  4047                           	callstack 0
  4048   001360                     _color_read_Green:
  4049                           	callstack 27
  4050   001360                     
  4051                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  4052   001360  EC1F  F00B         	call	_I2C_2_Master_Start	;wreg free
  4053                           
  4054                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  4055   001364  0E52               	movlw	82
  4056   001366  EC09  F00B         	call	_I2C_2_Master_Write
  4057                           
  4058                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x18);
  4059   00136A  0EB8               	movlw	184
  4060   00136C  EC09  F00B         	call	_I2C_2_Master_Write
  4061                           
  4062                           ;color.c: 67:  I2C_2_Master_RepStart();
  4063   001370  EC15  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  4064                           
  4065                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
  4066   001374  0E53               	movlw	83
  4067   001376  EC09  F00B         	call	_I2C_2_Master_Write
  4068                           
  4069                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
  4070   00137A  0E01               	movlw	1
  4071   00137C  EC28  F00A         	call	_I2C_2_Master_Read
  4072   001380  6E07               	movwf	??_color_read_Green^0,c
  4073   001382  5007               	movf	??_color_read_Green^0,w,c
  4074   001384  6E0A               	movwf	color_read_Green@tmp^0,c
  4075   001386  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  4076                           
  4077                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4078   001388  0E00               	movlw	0
  4079   00138A  EC28  F00A         	call	_I2C_2_Master_Read
  4080   00138E  6E07               	movwf	??_color_read_Green^0,c
  4081   001390  5007               	movf	??_color_read_Green^0,w,c
  4082   001392  6E09               	movwf	(??_color_read_Green+2)^0,c
  4083   001394  6A08               	clrf	(??_color_read_Green+1)^0,c
  4084   001396  500A               	movf	color_read_Green@tmp^0,w,c
  4085   001398  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  4086   00139A  6E0A               	movwf	color_read_Green@tmp^0,c
  4087   00139C  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  4088   00139E  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  4089   0013A0  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  4090                           
  4091                           ;color.c: 71:  I2C_2_Master_Stop();
  4092   0013A2  EC1A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  4093   0013A6                     
  4094                           ;color.c: 72:  return tmp;
  4095   0013A6  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  4096   0013AA  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  4097   0013AE  0012               	return		;funcret
  4098   0013B0                     __end_of_color_read_Green:
  4099                           	callstack 0
  4100                           
  4101 ;; *************** function _color_read_Clear *****************
  4102 ;; Defined at:
  4103 ;;		line 89 in file "color.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;		None
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;  tmp             2    9[COMRAM] unsigned int 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  2    4[COMRAM] unsigned int 
  4110 ;; Registers used:
  4111 ;;		wreg, status,2, status,0, cstack
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4117 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4118 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4119 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4120 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4121 ;;Total ram usage:        7 bytes
  4122 ;; Hardware stack levels used: 1
  4123 ;; Hardware stack levels required when called: 3
  4124 ;; This function calls:
  4125 ;;		_I2C_2_Master_Read
  4126 ;;		_I2C_2_Master_RepStart
  4127 ;;		_I2C_2_Master_Start
  4128 ;;		_I2C_2_Master_Stop
  4129 ;;		_I2C_2_Master_Write
  4130 ;; This function is called by:
  4131 ;;		_main
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text21
  4136   0013B0                     __ptext21:
  4137                           	callstack 0
  4138   0013B0                     _color_read_Clear:
  4139                           	callstack 27
  4140   0013B0                     
  4141                           ;color.c: 91:  unsigned int tmp;;color.c: 92:  I2C_2_Master_Start();
  4142   0013B0  EC1F  F00B         	call	_I2C_2_Master_Start	;wreg free
  4143                           
  4144                           ;color.c: 93:  I2C_2_Master_Write(0x52 | 0x00);
  4145   0013B4  0E52               	movlw	82
  4146   0013B6  EC09  F00B         	call	_I2C_2_Master_Write
  4147                           
  4148                           ;color.c: 94:  I2C_2_Master_Write(0xA0 | 0x14);
  4149   0013BA  0EB4               	movlw	180
  4150   0013BC  EC09  F00B         	call	_I2C_2_Master_Write
  4151                           
  4152                           ;color.c: 95:  I2C_2_Master_RepStart();
  4153   0013C0  EC15  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  4154                           
  4155                           ;color.c: 96:  I2C_2_Master_Write(0x52 | 0x01);
  4156   0013C4  0E53               	movlw	83
  4157   0013C6  EC09  F00B         	call	_I2C_2_Master_Write
  4158                           
  4159                           ;color.c: 97:  tmp=I2C_2_Master_Read(1);
  4160   0013CA  0E01               	movlw	1
  4161   0013CC  EC28  F00A         	call	_I2C_2_Master_Read
  4162   0013D0  6E07               	movwf	??_color_read_Clear^0,c
  4163   0013D2  5007               	movf	??_color_read_Clear^0,w,c
  4164   0013D4  6E0A               	movwf	color_read_Clear@tmp^0,c
  4165   0013D6  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  4166                           
  4167                           ;color.c: 98:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4168   0013D8  0E00               	movlw	0
  4169   0013DA  EC28  F00A         	call	_I2C_2_Master_Read
  4170   0013DE  6E07               	movwf	??_color_read_Clear^0,c
  4171   0013E0  5007               	movf	??_color_read_Clear^0,w,c
  4172   0013E2  6E09               	movwf	(??_color_read_Clear+2)^0,c
  4173   0013E4  6A08               	clrf	(??_color_read_Clear+1)^0,c
  4174   0013E6  500A               	movf	color_read_Clear@tmp^0,w,c
  4175   0013E8  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  4176   0013EA  6E0A               	movwf	color_read_Clear@tmp^0,c
  4177   0013EC  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  4178   0013EE  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  4179   0013F0  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  4180                           
  4181                           ;color.c: 99:  I2C_2_Master_Stop();
  4182   0013F2  EC1A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  4183   0013F6                     
  4184                           ;color.c: 100:  return tmp;
  4185   0013F6  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  4186   0013FA  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  4187   0013FE  0012               	return		;funcret
  4188   001400                     __end_of_color_read_Clear:
  4189                           	callstack 0
  4190                           
  4191 ;; *************** function _color_read_Blue *****************
  4192 ;; Defined at:
  4193 ;;		line 75 in file "color.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  tmp             2    9[COMRAM] unsigned int 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  2    4[COMRAM] unsigned int 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4209 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4210 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4211 ;;Total ram usage:        7 bytes
  4212 ;; Hardware stack levels used: 1
  4213 ;; Hardware stack levels required when called: 3
  4214 ;; This function calls:
  4215 ;;		_I2C_2_Master_Read
  4216 ;;		_I2C_2_Master_RepStart
  4217 ;;		_I2C_2_Master_Start
  4218 ;;		_I2C_2_Master_Stop
  4219 ;;		_I2C_2_Master_Write
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text22
  4226   001400                     __ptext22:
  4227                           	callstack 0
  4228   001400                     _color_read_Blue:
  4229                           	callstack 27
  4230   001400                     
  4231                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  4232   001400  EC1F  F00B         	call	_I2C_2_Master_Start	;wreg free
  4233                           
  4234                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  4235   001404  0E52               	movlw	82
  4236   001406  EC09  F00B         	call	_I2C_2_Master_Write
  4237                           
  4238                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x1A);
  4239   00140A  0EBA               	movlw	186
  4240   00140C  EC09  F00B         	call	_I2C_2_Master_Write
  4241                           
  4242                           ;color.c: 81:  I2C_2_Master_RepStart();
  4243   001410  EC15  F00B         	call	_I2C_2_Master_RepStart	;wreg free
  4244                           
  4245                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  4246   001414  0E53               	movlw	83
  4247   001416  EC09  F00B         	call	_I2C_2_Master_Write
  4248                           
  4249                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  4250   00141A  0E01               	movlw	1
  4251   00141C  EC28  F00A         	call	_I2C_2_Master_Read
  4252   001420  6E07               	movwf	??_color_read_Blue^0,c
  4253   001422  5007               	movf	??_color_read_Blue^0,w,c
  4254   001424  6E0A               	movwf	color_read_Blue@tmp^0,c
  4255   001426  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  4256                           
  4257                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4258   001428  0E00               	movlw	0
  4259   00142A  EC28  F00A         	call	_I2C_2_Master_Read
  4260   00142E  6E07               	movwf	??_color_read_Blue^0,c
  4261   001430  5007               	movf	??_color_read_Blue^0,w,c
  4262   001432  6E09               	movwf	(??_color_read_Blue+2)^0,c
  4263   001434  6A08               	clrf	(??_color_read_Blue+1)^0,c
  4264   001436  500A               	movf	color_read_Blue@tmp^0,w,c
  4265   001438  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  4266   00143A  6E0A               	movwf	color_read_Blue@tmp^0,c
  4267   00143C  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  4268   00143E  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  4269   001440  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  4270                           
  4271                           ;color.c: 85:  I2C_2_Master_Stop();
  4272   001442  EC1A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  4273   001446                     
  4274                           ;color.c: 86:  return tmp;
  4275   001446  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  4276   00144A  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  4277   00144E  0012               	return		;funcret
  4278   001450                     __end_of_color_read_Blue:
  4279                           	callstack 0
  4280                           
  4281 ;; *************** function _I2C_2_Master_RepStart *****************
  4282 ;; Defined at:
  4283 ;;		line 33 in file "i2c.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;		None
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;Total ram usage:        0 bytes
  4302 ;; Hardware stack levels used: 1
  4303 ;; Hardware stack levels required when called: 2
  4304 ;; This function calls:
  4305 ;;		_I2C_2_Master_Idle
  4306 ;; This function is called by:
  4307 ;;		_color_read_Red
  4308 ;;		_color_read_Green
  4309 ;;		_color_read_Blue
  4310 ;;		_color_read_Clear
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text23
  4315   00162A                     __ptext23:
  4316                           	callstack 0
  4317   00162A                     _I2C_2_Master_RepStart:
  4318                           	callstack 27
  4319   00162A                     
  4320                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4321   00162A  EC92  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4322   00162E                     
  4323                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4324   00162E  010E               	movlb	14	; () banked
  4325   001630  83DA               	bsf	218,1,b	;volatile
  4326   001632                     
  4327                           ; BSR set to: 14
  4328   001632  0012               	return		;funcret
  4329   001634                     __end_of_I2C_2_Master_RepStart:
  4330                           	callstack 0
  4331                           
  4332 ;; *************** function _I2C_2_Master_Read *****************
  4333 ;; Defined at:
  4334 ;;		line 51 in file "i2c.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;  ack             1    wreg     unsigned char 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  ack             1    2[COMRAM] unsigned char 
  4339 ;;  tmp             1    3[COMRAM] unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      unsigned char 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;Total ram usage:        3 bytes
  4354 ;; Hardware stack levels used: 1
  4355 ;; Hardware stack levels required when called: 2
  4356 ;; This function calls:
  4357 ;;		_I2C_2_Master_Idle
  4358 ;; This function is called by:
  4359 ;;		_color_read_Red
  4360 ;;		_color_read_Green
  4361 ;;		_color_read_Blue
  4362 ;;		_color_read_Clear
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text24
  4367   001450                     __ptext24:
  4368                           	callstack 0
  4369   001450                     _I2C_2_Master_Read:
  4370                           	callstack 27
  4371                           
  4372                           ; BSR set to: 14
  4373                           ;incstack = 0
  4374                           ;I2C_2_Master_Read@ack stored from wreg
  4375   001450  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  4376   001452                     
  4377                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4378   001452  EC92  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4379   001456                     
  4380                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4381   001456  010E               	movlb	14	; () banked
  4382   001458  87DA               	bsf	218,3,b	;volatile
  4383                           
  4384                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4385   00145A  EC92  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4386   00145E                     
  4387                           ;i2c.c: 57:   tmp = SSP2BUF;
  4388   00145E  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4389                           
  4390                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4391   001462  EC92  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4392   001466                     
  4393                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4394   001466  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  4395   001468  B4D8               	btfsc	status,2,c
  4396   00146A  EF39  F00A         	goto	u1081
  4397   00146E  EF3D  F00A         	goto	u1080
  4398   001472                     u1081:
  4399   001472  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4400   001474  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  4401   001476  EF3E  F00A         	goto	u1098
  4402   00147A                     u1080:
  4403   00147A  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4404   00147C                     u1098:
  4405   00147C  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  4406   00147E  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  4407   001480  010E               	movlb	14	; () banked
  4408   001482  51DA               	movf	218,w,b	;volatile
  4409   001484  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4410   001486  0BDF               	andlw	-33
  4411   001488  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4412   00148A  6FDA               	movwf	218,b	;volatile
  4413   00148C                     
  4414                           ; BSR set to: 14
  4415                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4416   00148C  89DA               	bsf	218,4,b	;volatile
  4417   00148E                     
  4418                           ; BSR set to: 14
  4419                           ;i2c.c: 61:   return tmp;
  4420   00148E  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  4421   001490                     
  4422                           ; BSR set to: 14
  4423   001490  0012               	return		;funcret
  4424   001492                     __end_of_I2C_2_Master_Read:
  4425                           	callstack 0
  4426                           
  4427 ;; *************** function _color_click_init *****************
  4428 ;; Defined at:
  4429 ;;		line 6 in file "color.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;		None
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4447 ;;Total ram usage:        1 bytes
  4448 ;; Hardware stack levels used: 1
  4449 ;; Hardware stack levels required when called: 4
  4450 ;; This function calls:
  4451 ;;		_I2C_2_Master_Init
  4452 ;;		_color_writetoaddr
  4453 ;; This function is called by:
  4454 ;;		_main
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text25
  4459   001492                     __ptext25:
  4460                           	callstack 0
  4461   001492                     _color_click_init:
  4462                           	callstack 26
  4463   001492                     
  4464                           ;color.c: 9:     I2C_2_Master_Init();
  4465   001492  EC69  F00A         	call	_I2C_2_Master_Init	;wreg free
  4466   001496                     
  4467                           ;color.c: 12:   color_writetoaddr(0x00, 0x01);
  4468   001496  0E01               	movlw	1
  4469   001498  6E03               	movwf	color_writetoaddr@value^0,c
  4470   00149A  0E00               	movlw	0
  4471   00149C  ECB9  F00A         	call	_color_writetoaddr
  4472   0014A0                     
  4473                           ;color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4474   0014A0  0E3F               	movlw	63
  4475   0014A2  6E05               	movwf	??_color_click_init^0,c
  4476   0014A4  0E55               	movlw	85
  4477   0014A6                     u1887:
  4478   0014A6  2EE8               	decfsz	wreg,f,c
  4479   0014A8  D7FE               	bra	u1887
  4480   0014AA  2E05               	decfsz	??_color_click_init^0,f,c
  4481   0014AC  D7FC               	bra	u1887
  4482   0014AE  F000               	nop	
  4483   0014B0                     
  4484                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  4485   0014B0  0E03               	movlw	3
  4486   0014B2  6E03               	movwf	color_writetoaddr@value^0,c
  4487   0014B4  0E00               	movlw	0
  4488   0014B6  ECB9  F00A         	call	_color_writetoaddr
  4489   0014BA                     
  4490                           ;color.c: 19:  color_writetoaddr(0x01, 0xD5);
  4491   0014BA  0ED5               	movlw	213
  4492   0014BC  6E03               	movwf	color_writetoaddr@value^0,c
  4493   0014BE  0E01               	movlw	1
  4494   0014C0  ECB9  F00A         	call	_color_writetoaddr
  4495   0014C4                     
  4496                           ;color.c: 22:     TRISFbits.TRISF7 = 0;
  4497   0014C4  9E86               	bcf	134,7,c	;volatile
  4498   0014C6                     
  4499                           ;color.c: 23:     TRISGbits.TRISG1 = 0;
  4500   0014C6  9287               	bcf	135,1,c	;volatile
  4501   0014C8                     
  4502                           ;color.c: 24:     TRISAbits.TRISA4 = 0;
  4503   0014C8  9881               	bcf	129,4,c	;volatile
  4504   0014CA                     
  4505                           ;color.c: 26:     LATFbits.LATF7 = 0;
  4506   0014CA  9E7E               	bcf	126,7,c	;volatile
  4507   0014CC                     
  4508                           ;color.c: 27:     LATGbits.LATG1 = 0;
  4509   0014CC  927F               	bcf	127,1,c	;volatile
  4510   0014CE                     
  4511                           ;color.c: 28:     LATAbits.LATA4 = 1;
  4512   0014CE  8879               	bsf	121,4,c	;volatile
  4513   0014D0  0012               	return		;funcret
  4514   0014D2                     __end_of_color_click_init:
  4515                           	callstack 0
  4516                           
  4517 ;; *************** function _color_writetoaddr *****************
  4518 ;; Defined at:
  4519 ;;		line 31 in file "color.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  address         1    wreg     unsigned char 
  4522 ;;  value           1    2[COMRAM] unsigned char 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;  address         1    3[COMRAM] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      void 
  4527 ;; Registers used:
  4528 ;;		wreg, status,2, status,0, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4534 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4537 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4538 ;;Total ram usage:        2 bytes
  4539 ;; Hardware stack levels used: 1
  4540 ;; Hardware stack levels required when called: 3
  4541 ;; This function calls:
  4542 ;;		_I2C_2_Master_Start
  4543 ;;		_I2C_2_Master_Stop
  4544 ;;		_I2C_2_Master_Write
  4545 ;; This function is called by:
  4546 ;;		_color_click_init
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text26
  4551   001572                     __ptext26:
  4552                           	callstack 0
  4553   001572                     _color_writetoaddr:
  4554                           	callstack 26
  4555                           
  4556                           ;incstack = 0
  4557                           ;color_writetoaddr@address stored from wreg
  4558   001572  6E04               	movwf	color_writetoaddr@address^0,c
  4559   001574                     
  4560                           ;color.c: 32:     I2C_2_Master_Start();
  4561   001574  EC1F  F00B         	call	_I2C_2_Master_Start	;wreg free
  4562                           
  4563                           ;color.c: 33:     I2C_2_Master_Write(0x52 | 0x00);
  4564   001578  0E52               	movlw	82
  4565   00157A  EC09  F00B         	call	_I2C_2_Master_Write
  4566                           
  4567                           ;color.c: 34:     I2C_2_Master_Write(0x80 | address);
  4568   00157E  5004               	movf	color_writetoaddr@address^0,w,c
  4569   001580  0980               	iorlw	128
  4570   001582  EC09  F00B         	call	_I2C_2_Master_Write
  4571                           
  4572                           ;color.c: 35:     I2C_2_Master_Write(value);
  4573   001586  5003               	movf	color_writetoaddr@value^0,w,c
  4574   001588  EC09  F00B         	call	_I2C_2_Master_Write
  4575                           
  4576                           ;color.c: 36:     I2C_2_Master_Stop();
  4577   00158C  EC1A  F00B         	call	_I2C_2_Master_Stop	;wreg free
  4578   001590  0012               	return		;funcret
  4579   001592                     __end_of_color_writetoaddr:
  4580                           	callstack 0
  4581                           
  4582 ;; *************** function _I2C_2_Master_Write *****************
  4583 ;; Defined at:
  4584 ;;		line 45 in file "i2c.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  data_byte       1    wreg     unsigned char 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  data_byte       1    1[COMRAM] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4602 ;;Total ram usage:        1 bytes
  4603 ;; Hardware stack levels used: 1
  4604 ;; Hardware stack levels required when called: 2
  4605 ;; This function calls:
  4606 ;;		_I2C_2_Master_Idle
  4607 ;; This function is called by:
  4608 ;;		_color_writetoaddr
  4609 ;;		_color_read_Red
  4610 ;;		_color_read_Green
  4611 ;;		_color_read_Blue
  4612 ;;		_color_read_Clear
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text27
  4617   001612                     __ptext27:
  4618                           	callstack 0
  4619   001612                     _I2C_2_Master_Write:
  4620                           	callstack 27
  4621                           
  4622                           ;incstack = 0
  4623                           ;I2C_2_Master_Write@data_byte stored from wreg
  4624   001612  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4625   001614                     
  4626                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4627   001614  EC92  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4628   001618                     
  4629                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4630   001618  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4631   00161C  0012               	return		;funcret
  4632   00161E                     __end_of_I2C_2_Master_Write:
  4633                           	callstack 0
  4634                           
  4635 ;; *************** function _I2C_2_Master_Stop *****************
  4636 ;; Defined at:
  4637 ;;		line 39 in file "i2c.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4655 ;;Total ram usage:        0 bytes
  4656 ;; Hardware stack levels used: 1
  4657 ;; Hardware stack levels required when called: 2
  4658 ;; This function calls:
  4659 ;;		_I2C_2_Master_Idle
  4660 ;; This function is called by:
  4661 ;;		_color_writetoaddr
  4662 ;;		_color_read_Red
  4663 ;;		_color_read_Green
  4664 ;;		_color_read_Blue
  4665 ;;		_color_read_Clear
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text28
  4670   001634                     __ptext28:
  4671                           	callstack 0
  4672   001634                     _I2C_2_Master_Stop:
  4673                           	callstack 27
  4674   001634                     
  4675                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4676   001634  EC92  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4677   001638                     
  4678                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4679   001638  010E               	movlb	14	; () banked
  4680   00163A  85DA               	bsf	218,2,b	;volatile
  4681   00163C                     
  4682                           ; BSR set to: 14
  4683   00163C  0012               	return		;funcret
  4684   00163E                     __end_of_I2C_2_Master_Stop:
  4685                           	callstack 0
  4686                           
  4687 ;; *************** function _I2C_2_Master_Start *****************
  4688 ;; Defined at:
  4689 ;;		line 27 in file "i2c.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2, status,0, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used: 1
  4709 ;; Hardware stack levels required when called: 2
  4710 ;; This function calls:
  4711 ;;		_I2C_2_Master_Idle
  4712 ;; This function is called by:
  4713 ;;		_color_writetoaddr
  4714 ;;		_color_read_Red
  4715 ;;		_color_read_Green
  4716 ;;		_color_read_Blue
  4717 ;;		_color_read_Clear
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text29
  4722   00163E                     __ptext29:
  4723                           	callstack 0
  4724   00163E                     _I2C_2_Master_Start:
  4725                           	callstack 27
  4726   00163E                     
  4727                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4728   00163E  EC92  F00A         	call	_I2C_2_Master_Idle	;wreg free
  4729   001642                     
  4730                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4731   001642  010E               	movlb	14	; () banked
  4732   001644  81DA               	bsf	218,0,b	;volatile
  4733   001646                     
  4734                           ; BSR set to: 14
  4735   001646  0012               	return		;funcret
  4736   001648                     __end_of_I2C_2_Master_Start:
  4737                           	callstack 0
  4738                           
  4739 ;; *************** function _I2C_2_Master_Idle *****************
  4740 ;; Defined at:
  4741 ;;		line 22 in file "i2c.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;		None
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2, status,0
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4759 ;;Total ram usage:        1 bytes
  4760 ;; Hardware stack levels used: 1
  4761 ;; Hardware stack levels required when called: 1
  4762 ;; This function calls:
  4763 ;;		Nothing
  4764 ;; This function is called by:
  4765 ;;		_I2C_2_Master_Start
  4766 ;;		_I2C_2_Master_RepStart
  4767 ;;		_I2C_2_Master_Stop
  4768 ;;		_I2C_2_Master_Write
  4769 ;;		_I2C_2_Master_Read
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text30
  4774   001524                     __ptext30:
  4775                           	callstack 0
  4776   001524                     _I2C_2_Master_Idle:
  4777                           	callstack 27
  4778   001524                     l30:
  4779   001524  010E               	movlb	14	; () banked
  4780   001526  B5D8               	btfsc	216,2,b	;volatile
  4781   001528  EF98  F00A         	goto	u921
  4782   00152C  EF9A  F00A         	goto	u920
  4783   001530                     u921:
  4784   001530  EF92  F00A         	goto	l30
  4785   001534                     u920:
  4786   001534                     
  4787                           ; BSR set to: 14
  4788   001534  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4789   001538  0E1F               	movlw	31
  4790   00153A  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4791   00153C  A4D8               	btfss	status,2,c
  4792   00153E  EFA3  F00A         	goto	u931
  4793   001542  EFA5  F00A         	goto	u930
  4794   001546                     u931:
  4795   001546  EF92  F00A         	goto	l30
  4796   00154A                     u930:
  4797   00154A                     
  4798                           ; BSR set to: 14
  4799   00154A  0012               	return		;funcret
  4800   00154C                     __end_of_I2C_2_Master_Idle:
  4801                           	callstack 0
  4802                           
  4803 ;; *************** function _I2C_2_Master_Init *****************
  4804 ;; Defined at:
  4805 ;;		line 4 in file "i2c.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;		None
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4823 ;;Total ram usage:        0 bytes
  4824 ;; Hardware stack levels used: 1
  4825 ;; Hardware stack levels required when called: 1
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		_main
  4830 ;;		_color_click_init
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text31
  4835   0014D2                     __ptext31:
  4836                           	callstack 0
  4837   0014D2                     _I2C_2_Master_Init:
  4838                           	callstack 28
  4839   0014D2                     
  4840                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4841   0014D2  010E               	movlb	14	; () banked
  4842   0014D4  51D9               	movf	217,w,b	;volatile
  4843   0014D6  0BF0               	andlw	-16
  4844   0014D8  0908               	iorlw	8
  4845   0014DA  6FD9               	movwf	217,b	;volatile
  4846   0014DC                     
  4847                           ; BSR set to: 14
  4848                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4849   0014DC  8BD9               	bsf	217,5,b	;volatile
  4850                           
  4851                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4852   0014DE  0E9F               	movlw	159
  4853   0014E0  6FD6               	movwf	214,b	;volatile
  4854   0014E2                     
  4855                           ; BSR set to: 14
  4856                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4857   0014E2  8A84               	bsf	132,5,c	;volatile
  4858   0014E4                     
  4859                           ; BSR set to: 14
  4860                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4861   0014E4  8C84               	bsf	132,6,c	;volatile
  4862   0014E6                     
  4863                           ; BSR set to: 14
  4864                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4865   0014E6  9BA7               	bcf	167,5,b	;volatile
  4866   0014E8                     
  4867                           ; BSR set to: 14
  4868                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4869   0014E8  9DA7               	bcf	167,6,b	;volatile
  4870                           
  4871                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4872   0014EA  0E1D               	movlw	29
  4873   0014EC  6F1D               	movwf	29,b	;volatile
  4874                           
  4875                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4876   0014EE  0E1E               	movlw	30
  4877   0014F0  6F1C               	movwf	28,b	;volatile
  4878                           
  4879                           ;i2c.c: 18:   RD5PPS=0x1C;
  4880   0014F2  0E1C               	movlw	28
  4881   0014F4  6F6F               	movwf	111,b	;volatile
  4882                           
  4883                           ;i2c.c: 19:   RD6PPS=0x1B;
  4884   0014F6  0E1B               	movlw	27
  4885   0014F8  6F70               	movwf	112,b	;volatile
  4886   0014FA                     
  4887                           ; BSR set to: 14
  4888   0014FA  0012               	return		;funcret
  4889   0014FC                     __end_of_I2C_2_Master_Init:
  4890                           	callstack 0
  4891                           
  4892 ;; *************** function _Timer0_init *****************
  4893 ;; Defined at:
  4894 ;;		line 20 in file "timer0.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;		None
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4912 ;;Total ram usage:        0 bytes
  4913 ;; Hardware stack levels used: 1
  4914 ;; Hardware stack levels required when called: 1
  4915 ;; This function calls:
  4916 ;;		Nothing
  4917 ;; This function is called by:
  4918 ;;		_main
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text32
  4923   001600                     __ptext32:
  4924                           	callstack 0
  4925   001600                     _Timer0_init:
  4926                           	callstack 29
  4927   001600                     
  4928                           ;timer0.c: 33:     T0CON1bits.T0CS=0b010;
  4929   001600  50D6               	movf	214,w,c	;volatile
  4930   001602  0B1F               	andlw	-225
  4931   001604  0940               	iorlw	64
  4932   001606  6ED6               	movwf	214,c	;volatile
  4933   001608                     
  4934                           ;timer0.c: 34:     T0CON1bits.T0ASYNC=1;
  4935   001608  88D6               	bsf	214,4,c	;volatile
  4936                           
  4937                           ;timer0.c: 35:     T0CON1bits.T0CKPS=0b0000;
  4938   00160A  0EF0               	movlw	-16
  4939   00160C  16D6               	andwf	214,f,c	;volatile
  4940   00160E                     
  4941                           ;timer0.c: 36:     T0CON0bits.T016BIT=1;
  4942   00160E  88D5               	bsf	213,4,c	;volatile
  4943   001610  0012               	return		;funcret
  4944   001612                     __end_of_Timer0_init:
  4945                           	callstack 0
  4946                           
  4947 ;; *************** function _Interrupts_init *****************
  4948 ;; Defined at:
  4949 ;;		line 8 in file "timer0.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;		None
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;		None
  4954 ;; Return value:  Size  Location     Type
  4955 ;;                  1    wreg      void 
  4956 ;; Registers used:
  4957 ;;		None
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4967 ;;Total ram usage:        0 bytes
  4968 ;; Hardware stack levels used: 1
  4969 ;; Hardware stack levels required when called: 1
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_main
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           	psect	text33
  4978   00161E                     __ptext33:
  4979                           	callstack 0
  4980   00161E                     _Interrupts_init:
  4981                           	callstack 29
  4982   00161E                     
  4983                           ;timer0.c: 10:     PIE0bits.TMR0IE=1;
  4984   00161E  010E               	movlb	14	; () banked
  4985   001620  8B29               	bsf	41,5,b	;volatile
  4986                           
  4987                           ;timer0.c: 11:     INTCONbits.PEIE=1;
  4988   001622  8CF2               	bsf	242,6,c	;volatile
  4989                           
  4990                           ;timer0.c: 12:     INTCONbits.IPEN=0;
  4991   001624  9AF2               	bcf	242,5,c	;volatile
  4992                           
  4993                           ;timer0.c: 13:     INTCONbits.GIE=1;
  4994   001626  8EF2               	bsf	242,7,c	;volatile
  4995   001628                     
  4996                           ; BSR set to: 14
  4997   001628  0012               	return		;funcret
  4998   00162A                     __end_of_Interrupts_init:
  4999                           	callstack 0
  5000                           
  5001 ;; *************** function _ADC_init *****************
  5002 ;; Defined at:
  5003 ;;		line 9 in file "ADC.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;		None
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;		None
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  1    wreg      void 
  5010 ;; Registers used:
  5011 ;;		wreg, status,2
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5021 ;;Total ram usage:        0 bytes
  5022 ;; Hardware stack levels used: 1
  5023 ;; Hardware stack levels required when called: 1
  5024 ;; This function calls:
  5025 ;;		Nothing
  5026 ;; This function is called by:
  5027 ;;		_main
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text34
  5032   0015D0                     __ptext34:
  5033                           	callstack 0
  5034   0015D0                     _ADC_init:
  5035                           	callstack 29
  5036   0015D0                     
  5037                           ;ADC.c: 11:     TRISAbits.TRISA4=1;
  5038   0015D0  8881               	bsf	129,4,c	;volatile
  5039                           
  5040                           ;ADC.c: 12:     ANSELAbits.ANSELA4=1;
  5041   0015D2  010E               	movlb	14	; () banked
  5042   0015D4  8992               	bsf	146,4,b	;volatile
  5043                           
  5044                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  5045   0015D6  010F               	movlb	15	; () banked
  5046   0015D8  9958               	bcf	88,4,b	;volatile
  5047   0015DA                     
  5048                           ; BSR set to: 15
  5049                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  5050   0015DA  0EFC               	movlw	-4
  5051   0015DC  1758               	andwf	88,f,b	;volatile
  5052                           
  5053                           ;ADC.c: 17:     ADPCH=0b11;
  5054   0015DE  0E03               	movlw	3
  5055   0015E0  6F5F               	movwf	95,b	;volatile
  5056   0015E2                     
  5057                           ; BSR set to: 15
  5058                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  5059   0015E2  9460               	bcf	96,2,c	;volatile
  5060   0015E4                     
  5061                           ; BSR set to: 15
  5062                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  5063   0015E4  8860               	bsf	96,4,c	;volatile
  5064   0015E6                     
  5065                           ; BSR set to: 15
  5066                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  5067   0015E6  8E60               	bsf	96,7,c	;volatile
  5068   0015E8                     
  5069                           ; BSR set to: 15
  5070   0015E8  0012               	return		;funcret
  5071   0015EA                     __end_of_ADC_init:
  5072                           	callstack 0
  5073                           
  5074 ;; *************** function _ADC_getval *****************
  5075 ;; Defined at:
  5076 ;;		line 23 in file "ADC.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  tmpval          2    2[COMRAM] unsigned int 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  2    0[COMRAM] unsigned int 
  5083 ;; Registers used:
  5084 ;;		None
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5093 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5094 ;;Total ram usage:        4 bytes
  5095 ;; Hardware stack levels used: 1
  5096 ;; Hardware stack levels required when called: 1
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_main
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           	psect	text35
  5105   001592                     __ptext35:
  5106                           	callstack 0
  5107   001592                     _ADC_getval:
  5108                           	callstack 29
  5109   001592                     
  5110                           ;ADC.c: 25:     unsigned int tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
  5111   001592  8060               	bsf	96,0,c	;volatile
  5112   001594                     l434:
  5113   001594  B060               	btfsc	96,0,c	;volatile
  5114   001596  EFCF  F00A         	goto	u1271
  5115   00159A  EFD1  F00A         	goto	u1270
  5116   00159E                     u1271:
  5117   00159E  EFCA  F00A         	goto	l434
  5118   0015A2                     u1270:
  5119   0015A2                     
  5120                           ;ADC.c: 31:     tmpval = ADRESH;
  5121   0015A2  CF64 F003          	movff	3940,ADC_getval@tmpval	;volatile
  5122   0015A6  6A04               	clrf	(ADC_getval@tmpval+1)^0,c
  5123                           
  5124                           ;ADC.c: 33:     return tmpval;
  5125   0015A8  C003  F001         	movff	ADC_getval@tmpval,?_ADC_getval
  5126   0015AC  C004  F002         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
  5127   0015B0  0012               	return		;funcret
  5128   0015B2                     __end_of_ADC_getval:
  5129                           	callstack 0
  5130                           
  5131 ;; *************** function _HighISR *****************
  5132 ;; Defined at:
  5133 ;;		line 216 in file "mainfinal.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  1    wreg      void 
  5140 ;; Registers used:
  5141 ;;		status,2, status,0
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5151 ;;Total ram usage:        0 bytes
  5152 ;; Hardware stack levels used: 1
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		Interrupt level 2
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	intcode
  5161   000008                     __pintcode:
  5162                           	callstack 0
  5163   000008                     _HighISR:
  5164                           	callstack 24
  5165                           
  5166                           ;incstack = 0
  5167   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5168   00000A                     
  5169                           ;mainfinal.c: 218:     if (PIR0bits.TMR0IF)
  5170   00000A  010E               	movlb	14	; () banked
  5171   00000C  AB33               	btfss	51,5,b	;volatile
  5172   00000E  EF0B  F000         	goto	i2u172_41
  5173   000012  EF0D  F000         	goto	i2u172_40
  5174   000016                     i2u172_41:
  5175   000016  EF0F  F000         	goto	i2l2653
  5176   00001A                     i2u172_40:
  5177   00001A                     
  5178                           ; BSR set to: 14
  5179                           ;mainfinal.c: 219:     {;mainfinal.c: 220:         timercount++;
  5180   00001A  4A57               	infsnz	_timercount^0,f,c
  5181   00001C  2A58               	incf	(_timercount+1)^0,f,c
  5182   00001E                     i2l2653:
  5183                           
  5184                           ; BSR set to: 14
  5185                           ;mainfinal.c: 222:     PIR0bits.TMR0IF=0;
  5186   00001E  9B33               	bcf	51,5,b	;volatile
  5187   000020                     
  5188                           ; BSR set to: 14
  5189   000020  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5190   000022  0011               	retfie		f
  5191   000024                     __end_of_HighISR:
  5192                           	callstack 0
  5193   000000                     
  5194                           	psect	rparam
  5195   000000                     
  5196                           	psect	temp
  5197   00005B                     btemp:
  5198                           	callstack 0
  5199   00005B                     	ds	1
  5200   000000                     int$flags	set	btemp
  5201   000000                     wtemp8	set	btemp+1
  5202   000000                     ttemp5	set	btemp+1
  5203   000000                     ttemp6	set	btemp+4
  5204   000000                     ttemp7	set	btemp+8
  5205                           
  5206                           	psect	idloc
  5207                           
  5208                           ;Config register IDLOC0 @ 0x200000
  5209                           ;	unspecified, using default values
  5210   200000                     	org	2097152
  5211   200000  0FFF               	dw	4095
  5212                           
  5213                           ;Config register IDLOC1 @ 0x200002
  5214                           ;	unspecified, using default values
  5215   200002                     	org	2097154
  5216   200002  0FFF               	dw	4095
  5217                           
  5218                           ;Config register IDLOC2 @ 0x200004
  5219                           ;	unspecified, using default values
  5220   200004                     	org	2097156
  5221   200004  0FFF               	dw	4095
  5222                           
  5223                           ;Config register IDLOC3 @ 0x200006
  5224                           ;	unspecified, using default values
  5225   200006                     	org	2097158
  5226   200006  0FFF               	dw	4095
  5227                           
  5228                           ;Config register IDLOC4 @ 0x200008
  5229                           ;	unspecified, using default values
  5230   200008                     	org	2097160
  5231   200008  0FFF               	dw	4095
  5232                           
  5233                           ;Config register IDLOC5 @ 0x20000A
  5234                           ;	unspecified, using default values
  5235   20000A                     	org	2097162
  5236   20000A  0FFF               	dw	4095
  5237                           
  5238                           ;Config register IDLOC6 @ 0x20000C
  5239                           ;	unspecified, using default values
  5240   20000C                     	org	2097164
  5241   20000C  0FFF               	dw	4095
  5242                           
  5243                           ;Config register IDLOC7 @ 0x20000E
  5244                           ;	unspecified, using default values
  5245   20000E                     	org	2097166
  5246   20000E  0FFF               	dw	4095
  5247                           
  5248                           	psect	config
  5249                           
  5250                           ;Config register CONFIG1L @ 0x300000
  5251                           ;	External Oscillator mode Selection bits
  5252                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5253                           ;	Power-up default value for COSC bits
  5254                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5255   300000                     	org	3145728
  5256   300000  AA                 	db	170
  5257                           
  5258                           ;Config register CONFIG1H @ 0x300001
  5259                           ;	unspecified, using default values
  5260                           ;	Clock Out Enable bit
  5261                           ;	CLKOUTEN = 0x1, unprogrammed default
  5262                           ;	Clock Switch Enable bit
  5263                           ;	CSWEN = 0x1, unprogrammed default
  5264                           ;	Fail-Safe Clock Monitor Enable bit
  5265                           ;	FCMEN = 0x1, unprogrammed default
  5266   300001                     	org	3145729
  5267   300001  FF                 	db	255
  5268                           
  5269                           ;Config register CONFIG2L @ 0x300002
  5270                           ;	unspecified, using default values
  5271                           ;	Master Clear Enable bit
  5272                           ;	MCLRE = 0x1, unprogrammed default
  5273                           ;	Power-up Timer Enable bit
  5274                           ;	PWRTE = 0x1, unprogrammed default
  5275                           ;	Low-power BOR enable bit
  5276                           ;	LPBOREN = 0x1, unprogrammed default
  5277                           ;	Brown-out Reset Enable bits
  5278                           ;	BOREN = 0x3, unprogrammed default
  5279   300002                     	org	3145730
  5280   300002  FF                 	db	255
  5281                           
  5282                           ;Config register CONFIG2H @ 0x300003
  5283                           ;	unspecified, using default values
  5284                           ;	Brown Out Reset Voltage selection bits
  5285                           ;	BORV = 0x3, unprogrammed default
  5286                           ;	ZCD Disable bit
  5287                           ;	ZCD = 0x1, unprogrammed default
  5288                           ;	PPSLOCK bit One-Way Set Enable bit
  5289                           ;	PPS1WAY = 0x1, unprogrammed default
  5290                           ;	Stack Full/Underflow Reset Enable bit
  5291                           ;	STVREN = 0x1, unprogrammed default
  5292                           ;	Debugger Enable bit
  5293                           ;	DEBUG = 0x1, unprogrammed default
  5294                           ;	Extended Instruction Set Enable bit
  5295                           ;	XINST = 0x1, unprogrammed default
  5296   300003                     	org	3145731
  5297   300003  FF                 	db	255
  5298                           
  5299                           ;Config register CONFIG3L @ 0x300004
  5300                           ;	WDT Period Select bits
  5301                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5302                           ;	WDT operating mode
  5303                           ;	WDTE = OFF, WDT Disabled
  5304   300004                     	org	3145732
  5305   300004  9F                 	db	159
  5306                           
  5307                           ;Config register CONFIG3H @ 0x300005
  5308                           ;	unspecified, using default values
  5309                           ;	WDT Window Select bits
  5310                           ;	WDTCWS = 0x7, unprogrammed default
  5311                           ;	WDT input clock selector
  5312                           ;	WDTCCS = 0x7, unprogrammed default
  5313   300005                     	org	3145733
  5314   300005  FF                 	db	255
  5315                           
  5316                           ;Config register CONFIG4L @ 0x300006
  5317                           ;	unspecified, using default values
  5318                           ;	Write Protection Block 0
  5319                           ;	WRT0 = 0x1, unprogrammed default
  5320                           ;	Write Protection Block 1
  5321                           ;	WRT1 = 0x1, unprogrammed default
  5322                           ;	Write Protection Block 2
  5323                           ;	WRT2 = 0x1, unprogrammed default
  5324                           ;	Write Protection Block 3
  5325                           ;	WRT3 = 0x1, unprogrammed default
  5326                           ;	Write Protection Block 3
  5327                           ;	WRT4 = 0x1, unprogrammed default
  5328                           ;	Write Protection Block 3
  5329                           ;	WRT5 = 0x1, unprogrammed default
  5330                           ;	Write Protection Block 3
  5331                           ;	WRT6 = 0x1, unprogrammed default
  5332                           ;	Write Protection Block 3
  5333                           ;	WRT7 = 0x1, unprogrammed default
  5334   300006                     	org	3145734
  5335   300006  FF                 	db	255
  5336                           
  5337                           ;Config register CONFIG4H @ 0x300007
  5338                           ;	unspecified, using default values
  5339                           ;	Configuration Register Write Protection bit
  5340                           ;	WRTC = 0x1, unprogrammed default
  5341                           ;	Boot Block Write Protection bit
  5342                           ;	WRTB = 0x1, unprogrammed default
  5343                           ;	Data EEPROM Write Protection bit
  5344                           ;	WRTD = 0x1, unprogrammed default
  5345                           ;	Scanner Enable bit
  5346                           ;	SCANE = 0x1, unprogrammed default
  5347                           ;	Low Voltage Programming Enable bit
  5348                           ;	LVP = 0x1, unprogrammed default
  5349   300007                     	org	3145735
  5350   300007  FF                 	db	255
  5351                           
  5352                           ;Config register CONFIG5L @ 0x300008
  5353                           ;	unspecified, using default values
  5354                           ;	UserNVM Program Memory Code Protection bit
  5355                           ;	CP = 0x1, unprogrammed default
  5356                           ;	DataNVM Memory Code Protection bit
  5357                           ;	CPD = 0x1, unprogrammed default
  5358   300008                     	org	3145736
  5359   300008  FF                 	db	255
  5360                           
  5361                           ;Config register CONFIG5H @ 0x300009
  5362                           ;	unspecified, using default values
  5363   300009                     	org	3145737
  5364   300009  FF                 	db	255
  5365                           
  5366                           ;Config register CONFIG6L @ 0x30000A
  5367                           ;	unspecified, using default values
  5368                           ;	Table Read Protection Block 0
  5369                           ;	EBTR0 = 0x1, unprogrammed default
  5370                           ;	Table Read Protection Block 1
  5371                           ;	EBTR1 = 0x1, unprogrammed default
  5372                           ;	Table Read Protection Block 2
  5373                           ;	EBTR2 = 0x1, unprogrammed default
  5374                           ;	Table Read Protection Block 3
  5375                           ;	EBTR3 = 0x1, unprogrammed default
  5376                           ;	Table Read Protection Block 4
  5377                           ;	EBTR4 = 0x1, unprogrammed default
  5378                           ;	Table Read Protection Block 5
  5379                           ;	EBTR5 = 0x1, unprogrammed default
  5380                           ;	Table Read Protection Block 6
  5381                           ;	EBTR6 = 0x1, unprogrammed default
  5382                           ;	Table Read Protection Block 7
  5383                           ;	EBTR7 = 0x1, unprogrammed default
  5384   30000A                     	org	3145738
  5385   30000A  FF                 	db	255
  5386                           
  5387                           ;Config register CONFIG6H @ 0x30000B
  5388                           ;	unspecified, using default values
  5389                           ;	Boot Block Table Read Protection bit
  5390                           ;	EBTRB = 0x1, unprogrammed default
  5391   30000B                     	org	3145739
  5392   30000B  FF                 	db	255
  5393                           tosu	equ	0xFFF
  5394                           tosh	equ	0xFFE
  5395                           tosl	equ	0xFFD
  5396                           stkptr	equ	0xFFC
  5397                           pclatu	equ	0xFFB
  5398                           pclath	equ	0xFFA
  5399                           pcl	equ	0xFF9
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           indf0	equ	0xFEF
  5407                           postinc0	equ	0xFEE
  5408                           postdec0	equ	0xFED
  5409                           preinc0	equ	0xFEC
  5410                           plusw0	equ	0xFEB
  5411                           fsr0h	equ	0xFEA
  5412                           fsr0l	equ	0xFE9
  5413                           wreg	equ	0xFE8
  5414                           indf1	equ	0xFE7
  5415                           postinc1	equ	0xFE6
  5416                           postdec1	equ	0xFE5
  5417                           preinc1	equ	0xFE4
  5418                           plusw1	equ	0xFE3
  5419                           fsr1h	equ	0xFE2
  5420                           fsr1l	equ	0xFE1
  5421                           bsr	equ	0xFE0
  5422                           indf2	equ	0xFDF
  5423                           postinc2	equ	0xFDE
  5424                           postdec2	equ	0xFDD
  5425                           preinc2	equ	0xFDC
  5426                           plusw2	equ	0xFDB
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     82      90
    BANK0           160      0       0
    BANK1           256    244     244
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    decide_color@mx	PTR struct colors size(2) Largest target is 8
		 -> main@reading(BANK1[8]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    returnhome@timearray	PTR unsigned char  size(2) Largest target is 100
		 -> main@timearray(BANK1[100]), 

    returnhome@path	PTR unsigned char  size(2) Largest target is 100
		 -> main@path(BANK1[100]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    savetime@timearray	PTR unsigned char  size(2) Largest target is 100
		 -> main@timearray(BANK1[100]), 

    savepath@path	PTR unsigned char  size(2) Largest target is 100
		 -> main@path(BANK1[100]), 

    smallmovement@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    smallmovement@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    smallmovement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    smallmovement@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    smallmovement@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    smallmovement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    square@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    square@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    square@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnhome@motorR(COMRAM[9]), 

    square@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    square@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    square@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), returnhome@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnhome@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnhome@motorL(COMRAM[9]), 

    turn180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turn180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turn180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turn180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turn180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turn180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnRight90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnRight90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    turnLeft90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnhome@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), returnhome@motorL(COMRAM[9]), 

    S801DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S801DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnstep@motorL(COMRAM[9]), 
		 -> returnhome@motorR(COMRAM[9]), returnhome@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_returnhome
    _smallmovement->_stop
    _returnhome->_returnstep
    _returnstep->_square
    _turnRight90->_stop
    _turnRight135->_stop
    _turnLeft90->_stop
    _turnLeft135->_stop
    _turn180->_stop
    _square->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    _decide_color->___lwdiv
    ___lwdiv->_color_read_Blue
    ___lwdiv->_color_read_Clear
    ___lwdiv->_color_read_Green
    ___lwdiv->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               247   247      0  205394
                                              0 BANK1    244   244      0
                         _ADC_getval
                           _ADC_init
                  _I2C_2_Master_Init
                    _Interrupts_init
                        _Timer0_init
                            ___lwdiv
                   _color_click_init
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                       _decide_color
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _returnhome
                           _savepath
                           _savetime
                      _smallmovement
                             _square
                            _turn180
                        _turnLeft135
                         _turnLeft90
                       _turnRight135
                        _turnRight90
 ---------------------------------------------------------------------------------
 (1) _smallmovement                                        6     1      5   12514
                                             29 COMRAM     6     1      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _savetime                                             6     2      4     219
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _savepath                                             5     2      3    1564
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _returnhome                                          27     5     22  101826
                                             55 COMRAM    27     5     22
                     _fullSpeedAhead
                         _returnstep
                             _square
                               _stop
 ---------------------------------------------------------------------------------
 (2) _returnstep                                          19     1     18   75742
                                             36 COMRAM    19     1     18
                             _square
                            _turn180
                        _turnLeft135
                         _turnLeft90
                       _turnRight135
                        _turnRight90
 ---------------------------------------------------------------------------------
 (1) _turnRight90                                          6     2      4   12514
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnRight135                                         6     2      4   12362
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft90                                           6     2      4   12514
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft135                                          6     2      4   12362
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turn180                                              6     2      4   12362
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _square                                               7     2      5   12970
                                             29 COMRAM     7     2      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    6929
                                             24 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    5563
                                             24 COMRAM     6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    4821
                                             18 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     631
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _decide_color                                        12    10      2    3520
                                             18 COMRAM    12    10      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    2162
                                             11 COMRAM     7     3      4
                             ___wmul (ARG)
                    _color_read_Blue (ARG)
                   _color_read_Clear (ARG)
                   _color_read_Green (ARG)
                     _color_read_Red (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      23
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _I2C_2_Master_Init
   _Interrupts_init
   _Timer0_init
   ___lwdiv
     ___wmul (ARG)
     _color_read_Blue (ARG)
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear (ARG)
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green (ARG)
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red (ARG)
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_read_Blue
   _color_read_Clear
   _color_read_Green
   _color_read_Red
   _decide_color
     ___lwdiv
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
       ___wmul
   _initDCmotorsPWM
   _returnhome
     _fullSpeedAhead
     _returnstep
       _square
         _setMotorPWM
         _stop
           _setMotorPWM
       _turn180
         _setMotorPWM
         _stop
       _turnLeft135
         _setMotorPWM
         _stop
       _turnLeft90
         _setMotorPWM
         _stop
       _turnRight135
         _setMotorPWM
         _stop
       _turnRight90
         _setMotorPWM
         _stop
     _square
     _stop
   _savepath
   _savetime
   _smallmovement
     _setMotorPWM
     _stop
   _square
   _turn180
   _turnLeft135
   _turnLeft90
   _turnRight135
   _turnRight90

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F4      F4       7       95.3%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     52      5A       1       95.7%
BITBIGSFRhlllll     46      0       0      47        0.0%
BITBIGSFRlllhll     35      0       0      57        0.0%
BITBIGSFRhlllhl     31      0       0      45        0.0%
BITBIGSFRllll       2D      0       0      60        0.0%
BITBIGSFRllhh       20      0       0      49        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhlllhl     14      0       0      42        0.0%
BITBIGSFRlllhhh     14      0       0      51        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      53        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      50        0.0%
BITBIGSFRlllhll      B      0       0      59        0.0%
BITBIGSFRlllhll      9      0       0      58        0.0%
BITBIGSFRlllhhh      9      0       0      52        0.0%
BITBIGSFRhlllhl      6      0       0      44        0.0%
BITBIGSFRlllhlh      5      0       0      56        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhl      3      0       0      43        0.0%
BITBIGSFRlllhhl      3      0       0      55        0.0%
BITBIGSFRhllllh      2      0       0      46        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhlllhh      1      0       0      41        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      54        0.0%
BITBIGSFRhlhh        1      0       0      40        0.0%
BITBIGSFRlh          1      0       0      48        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      61        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 10 17:49:40 2022

               _color_read_Red 1310                _color_read_Blue 1400                ??_smallmovement 0023  
                           l30 1524                             l33 154A                             l42 163C  
                           l27 14FA                             l36 1646                             l45 161C  
                           l39 1632                             l48 1490              fullSpeedAhead@dir 001D  
          ___wmul@multiplicand 0003               _color_read_Clear 13B0               _color_read_Green 1360  
            ??_Interrupts_init 0001                            l201 09CC                            l122 08A0  
                          l130 130E                            l210 0BA6                            l115 1228  
                          l150 0E60                            l303 05F0                            l136 0ABA  
                          l144 0C90                            l304 0650                            l401 144E  
                          l162 0F46                            l306 065E                            l171 10DC  
                          l307 0692                            l404 13FE                            l156 0D78  
                          l309 06A0                            l431 15E8                            l351 1610  
                          l183 1198                            l408 0558                            l440 1570  
                          l177 101A                            l434 1594                            l186 15CE  
                          l436 15A2                            l348 1628                            l437 15B0  
                          l197 0922                            l189 1522                            l392 1590  
                          l395 135E                            l389 14D0                            l398 13AE  
                          l931 1294                            l938 129C                            u900 0752  
                          u901 074E                            u910 081C                            u911 0818  
                          u920 1534                            u921 1530                            u930 154A  
                          u931 1546                            u940 12F6                            u941 12F2  
                          u870 1244                            u950 130E                            u871 1240  
                          u951 130A                            u880 1262                            u960 0A74  
                          u881 125E                            u961 0A70                            u890 127E  
                          u970 0A8E                            u891 127A                            u971 0A8A  
                          u980 0C4C                            u981 0C48                            u990 0C64  
                          u991 0C60                            wreg 000FE8                    main@ambient 01CA  
                         l2001 0C08                           l2011 0C4C                           l2003 0C12  
                         l2101 0F48                           l2021 0D9E                           l2013 0C64  
                         l2005 0C1C                           l2111 0F9A                           l2103 0F6C  
                         l2031 0DE2                           l2023 0DAE                           l2015 0C7C  
                         l2007 0C28                           l2201 119A                           l2121 0FEE  
                         l2113 0FA6                           l2105 0F7A                           l2041 0E34  
                         l2033 0DEC                           l2025 0DBA                           l2017 0D7A  
                         l2009 0C34                           l2131 14E4                           l2211 1204  
                         l2203 11AA                           l2123 1006                           l2115 0FB2  
                         l2107 0F84                           l2043 0E4C                           l2035 0DF8  
                         l2027 0DCA                           l2019 0D8E                           l2051 0CC6  
                         l2133 14E6                           l2125 14D2                           l2301 14C8  
                         l2141 1452                           l2221 1226                           l2213 120E  
                         l2205 11D4                           l2109 0F8E                           l2117 0FBE  
                         l2029 0DD8                           l2037 0E04                           l2061 0D04  
                         l2053 0CD2                           l2045 0C92                           l2311 15DA  
                         l2135 14E8                           l2127 14DC                           l2303 14CA  
                         l2151 148E                           l2143 1456                           l2215 1210  
                         l2207 11F8                           l2119 0FD6                           l2039 0E1C  
                         l2071 0D64                           l2063 0D10                           l2055 0CE2  
                         l2047 0CA6                           l2231 1124                           l2223 10DE  
                         l2313 15E2                           l2129 14E2                           l2305 14CC  
                         l2145 145E                           l2137 162A                           l2321 1310  
                         l2401 0332                           l2217 121A                           l2209 1202  
                         l2161 1078                           l2081 0EA2                           l2073 0E62  
                         l2057 0CF0                           l2065 0D1C                           l2049 0CB6  
                         l2241 116C                           l2233 1130                           l2225 1102  
                         l2315 15E4                           l2307 14CE                           l2147 1466  
                         l2139 162E                           l2323 1356                           l2411 03B8  
                         l2403 0348                           l2219 121C                           l2171 10CA  
                         l2163 1082                           l2155 101C                           l2091 0EE0  
                         l2083 0EB2                           l2075 0E76                           l2067 0D34  
                         l2059 0CFA                           l2251 14FE                           l2243 1184  
                         l2235 113C                           l2227 1110                           l2317 15E6  
                         l2309 15D0                           l2149 148C                           l2341 13F6  
                         l2333 1360                           l2421 0400                           l2405 035E  
                         l2173 10DA                           l2165 108E                           l2157 1060  
                         l2085 0EC0                           l2093 0EEC                           l2077 0E86  
                         l2069 0D4C                           l2181 0AF6                           l2261 08A2  
                         l2245 15B2                           l2253 1518                           l2237 1148  
                         l2229 111A                           l2501 0594                           l2319 1592  
                         l2327 1400                           l2335 13A6                           l2423 0416  
                         l2431 0460                           l2407 0374                           l2415 03BE  
                         l2351 0140                           l2159 106E                           l2167 109A  
                         l2095 0F04                           l2087 0ECA                           l2079 0E96  
                         l2191 0B56                           l2183 0B0A                           l2175 0ABE  
                         l2271 093C                           l2263 08A6                           l2247 15CC  
                         l2255 151A                           l2239 1154                           l2511 05BC  
                         l2503 059C                           l2281 1608                           l2329 1446  
                         l2433 0476                           l2425 0438                           l2417 03D4  
                         l2409 0396                           l2361 01C4                           l2353 0156  
                         l2345 0028                           l2169 10B2                           l2097 0F1C  
                         l2089 0ED4                           l2193 0B68                           l2185 0B1C  
                         l2177 0AD0                           l2273 0962                           l2265 08CE  
                         l2257 151A                           l2249 14FC                           l2521 05C6  
                         l2513 05BE                           l2505 05A4                           l2283 160E  
                         l2291 14A0                           l2339 13B0                           l2451 052E  
                         l2435 048C                           l2443 04CA                           l2427 045A  
                         l2419 03EA                           l2371 020C                           l2355 0168  
                         l2347 0114                           l2099 0F32                           l2195 0B7C  
                         l2187 0B30                           l2179 0AE4                           l2275 09A2  
                         l2267 08E6                           l2531 05EE                           l2523 05C8  
                         l2515 05C0                           l2507 05AC                           l2285 161E  
                         l2293 14B0                           l1901 1254                           l2453 0550  
                         l2445 04E0                           l2437 04A2                           l2373 0222  
                         l2381 0260                           l2357 017E                           l2349 012A  
                         l2365 01CA                           l2197 0B8E                           l2189 0B42  
                         l2269 0924                           l2277 09BE                           l2541 0626  
                         l2533 05FC                           l2525 05CC                           l2517 05C2  
                         l2509 05B4                           l2279 1600                           l2199 1574  
                         l2295 14BA                           l2287 1492                           l1911 1288  
                         l1903 1262                           l2447 04F6                           l2439 04C4  
                         l2391 02CE                           l2383 0276                           l2375 0238  
                         l2367 01E0                           l2359 01A2                           l2551 0644  
                         l2543 062E                           l2535 0606                           l2527 05CE  
                         l2519 05C4                           l2297 14C4                           l2289 1496  
                         l1913 128E                           l1905 1268                           l2473 0556  
                         l2449 050C                           l2457 0556                           l2393 02E4  
                         l2385 028C                           l2377 025A                           l2369 01F6  
                         l1921 07BA                           l2561 064E                           l2553 0646  
                         l2545 0636                           l2537 060E                           l2529 05D4  
                         l1931 1524                           l2299 14C6                           l1907 127E  
                         l2395 0308                           l2387 02A2                           l1923 07BE  
                         l1915 0736                           l2571 06D4                           l2563 0660  
                         l2555 0648                           l2547 063E                           l2539 0616  
                         l2491 0572                           l2483 055A                           l1933 1534  
                         l1909 1286                           l2397 032C                           l2389 02B8  
                         l1925 0800                           l1917 0752                           l1941 12C6  
                         l2573 06EC                           l2565 0690                           l2557 064A  
                         l2549 0640                           l2493 0572                           l2485 055E  
                         l1951 1642                           l1927 081C                           l1919 07A6  
                         l1943 12D2                           l1935 129E                           l2575 0708  
                         l2567 06A2                           l2559 064C                           l2495 057A  
                         l2487 0562                           l1953 1634                           l1929 0860  
                         l1937 12A2                           l1945 12DE                           l1961 09CE  
                         l2569 06D2                           l2497 0584                           l2489 056E  
                         l1955 1638                           l1947 12F6                           l1939 12B6  
                         l1971 0A1E                           l1963 09E2                           l2499 058C  
                         l1949 163E                           l1957 1614                           l1893 122A  
                         l1973 0A2E                           l1981 0A5A                           l1965 09F2  
                         l1959 1618                           l1895 1232                           l1887 154C  
                         l1983 0A74                           l1975 0A38                           l1967 0A02  
                         l1991 0BBC                           l1897 1244                           l1889 1568  
                         l1985 0A8E                           l1977 0A42                           l1969 0A0E  
                         l1993 0BCC                           l1899 124C                           l1987 0AA6  
                         l1979 0A4E                           l1995 0BDC                           l1997 0BE8  
                         l1989 0BA8                           l1999 0BF8                           u1000 0E1C  
                         u1001 0E18                           u1010 0E34                           u1011 0E30  
                         u1100 10B2                           u1020 0D34                           u1101 10AE  
                         u1021 0D30                           u1110 10CA                           u1030 0D4C  
                         u1111 10C6                           u1031 0D48                           u1120 10DA  
                         u1040 0F04                           u1200 1184                           u1121 10D6  
                         u1041 0F00                           u1201 1180                           u1050 0F1C  
                         u1130 0AD0                           u1210 08CE                           u1051 0F18  
                         u1131 0ACC                           u1211 08CA                           u1300 0156  
                         u1060 0FD6                           u1140 0AF6                           u1220 0922  
                         u1301 0152                           u1061 0FD2                           u1141 0AF2  
                         u1221 091E                           u1310 0168                           u1070 0FEE  
                         u1150 0B1C                           u1230 0962                           u1311 0164  
                         u1071 0FEA                           u1151 0B18                           u1231 095E  
                         u1080 147A                           u1400 025A                           u1320 017E  
                         u1160 0B42                           u1081 1472                           u1401 0256  
                         u1321 017A                           u1161 0B3E                           u1241 096C  
                         u1410 0276                           u1330 01A2                           u1170 0B68  
                         u1411 0272                           u1331 019E                           u1171 0B64  
                         u1251 097E                           u1500 035E                           u1420 028C  
                         u1340 01C4                           u1180 0B8E                           u1260 09CC  
                         u1501 035A                           u1421 0288                           u1341 01C0  
                         u1181 0B8A                           u1261 09C8                           u1270 15A2  
                         u1510 0374                           u1430 02A2                           u1350 01E0  
                         u1190 116C                           u1271 159E                           u1511 0370  
                         u1431 029E                           u1351 01DC                           u1191 1168  
                         u1600 0476                           u1520 0396                           u1440 02B8  
                         u1360 01F6                           u1280 012A                           u1601 0472  
                         u1521 0392                           u1441 02B4                           u1361 01F2  
                         u1281 0126                           u1098 147C                           u1610 048C  
                         u1530 03B8                           u1450 02CE                           u1370 020C  
                         u1290 0140                           u1611 0488                           u1531 03B4  
                         u1451 02CA                           u1371 0208                           u1291 013C  
                         u1620 04A2                           u1540 03D4                           u1460 02E4  
                         u1380 0222                           u1700 065E                           u1621 049E  
                         u1541 03D0                           u1461 02E0                           u1381 021E  
                         u1701 065A                           u1630 04C4                           u1550 03EA  
                         u1470 0308                           u1390 0238                           u1710 06A0  
                         u1631 04C0                           u1551 03E6                           u1471 0304  
                         u1391 0234                           u1711 069C                           u1640 04E0  
                         u1560 0400                           u1480 032C                           u1641 04DC  
                         u1561 03FC                           u1481 0328                           u1650 04F6  
                         u1570 0416                           u1490 0348                           _T2PR 000FBC  
                         u1651 04F2                           u1571 0412                           u1491 0344  
                         u1660 050C                           u1580 0438                           u1661 0508  
                         u1581 0434                           u1670 052E                           u1590 045A  
                         u1671 052A                           u1591 0456                           u1807 0DD0  
                         u1680 0550                           u1681 054C                           u1817 0E3E  
                         u1737 1108                           u1690 05EE                           u1827 0EB8  
                         u1747 0BFE                           u1691 05EA                           u1837 0F26  
                         u1757 0C6E                           u1847 0F72                           u1767 0CE8  
                         u1857 0FF8                           u1777 0D56                           u1867 12BC  
                         u1787 0A24                           u1877 1066                           u1797 0A98  
                         u1887 14A6                    main@reading 01DA                           _main 055A  
                         fsr2h 000FDA                           indf2 000FDF                           fsr2l 000FD9  
                         btemp 005B                           _stop 129E                           prodh 000FF4  
                         prodl 000FF3                           start 0024               __end_of_ADC_init 15EA  
       __end_of_color_read_Red 1360                __end_of_HighISR 0024                   ___param_bank 000000  
                  _turnLeft135 0D7A                    _turnRight90 0BA8                          ?_main 0001  
                        _ADPCH 000F5F                          ?_stop 0019                __end_of___lwdiv 129E  
                        i2l329 0020                          _TMR0H 000FD4                          _TMR0L 000FD3  
   __end_of_I2C_2_Master_Start 1648     __end_of_I2C_2_Master_Write 161E                          plusw0 000FEB  
                        plusw2 000FDB                __end_of_turn180 0F48                 returnhome@path 0038  
                        ttemp5 005C                          ttemp6 005F                          ttemp7 0063  
                        status 000FD8                          wtemp8 005C        __end_of_color_read_Blue 1450  
        _I2C_2_Master_RepStart 162A                ?_color_read_Red 0005                __initialization 15EA  
                 __end_of_main 0736                   __end_of_stop 1310                         ??_main 0053  
                       ??_stop 001D                  __activetblptr 000000                   _turnRight135 0C92  
                 ?_setMotorPWM 0013                         _ADRESH 000F64                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RE4PPS 000E76                         _RD6PPS 000E70                         i2l2651 001A  
                       i2l2653 001E                         i2l2649 000A                         _RG6PPS 000E88  
                    ??_HighISR 0001       __end_of_color_click_init 14D2                   ??_ADC_getval 0003  
                ??_Timer0_init 0001                   _CCPTMRS0bits 000FAD          returnstep@instruction 0037  
                       ___wmul 154C                      ??___lwdiv 0010                         clear_0 15F0  
                       isa$std 000001                         _square 0F48                  main@timearray 0100  
             __end_of_savepath 15D0               __end_of_savetime 1524              savetime@timearray 0001  
                    ?_ADC_init 0001                   _decide_color 0028                      ??_turn180 0022  
                       stop@mL 0019                         stop@mR 001B              ??_initDCmotorsPWM 0003  
           __end_of_ADC_getval 15B2                     __accesstop 0060        __end_of__initialization 15F6  
     __end_of_color_read_Clear 1400       __end_of_color_read_Green 13B0         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0005                _Interrupts_init 161E  
               __pcstackCOMRAM 0001            __end_of_Timer0_init 1612               smallmovement@dir 0022  
                   ??_ADC_init 0001              _color_writetoaddr 1572                   _T2CLKCONbits 000FBF  
                 ?_turnLeft135 001E             ?_color_writetoaddr 0003                        ?___wmul 0001  
                 ?_turnRight90 001E          __end_of_smallmovement 119A                        ?_square 001E  
          ??_color_writetoaddr 0004                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
      __end_of_Interrupts_init 162A         color_writetoaddr@value 0003               ??_color_read_Red 0007  
                      _HighISR 0008      __end_of_color_writetoaddr 1592                      _ADREFbits 000F58  
           _I2C_2_Master_Start 163E             _I2C_2_Master_Write 1612                        __Hparam 0000  
                      __Lparam 0000                      ?_savepath 0001              color_read_Red@tmp 000A  
                    ?_savetime 0001                    _Timer0_init 1600                 decide_color@br 001D  
               decide_color@gr 0019            ?_I2C_2_Master_Start 0001                 decide_color@mx 0013  
               decide_color@rr 001B                        ___lwdiv 122A            ?_I2C_2_Master_Write 0001  
                   _off_period 0053                   turnLeft90@mL 001E                   turnLeft90@mR 0020  
                      __pcinit 15EA                        __ramtop 0E00                        __ptext0 055A  
                      __ptext1 10DE                        __ptext2 14FC                        __ptext3 15B2  
                      __ptext4 08A2                        __ptext5 0ABC                        __ptext6 0BA8  
                      __ptext7 0C92                        __ptext8 09CE                        __ptext9 0D7A  
                    _T2CONbits 000FBD                      _T2HLTbits 000FBE                        _turn180 0E62  
                      main@max 01D2           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization 15F6               ADC_getval@tmpval 0003              ?_color_click_init 0001  
            _decide_color$2742 0017             ??_color_click_init 0005                     ??_savepath 0004  
                   ??_savetime 0005             savetime@timercount 0003                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE               returnhome@motorL 003A  
             returnhome@motorR 0043                _initDCmotorsPWM 119A                      _PORTFbits 000F8E  
                   _returnhome 08A2                     _timercount 0057             setMotorPWM@negDuty 0018  
                   _returnstep 0ABC                      _TRISAbits 000F81             setMotorPWM@posDuty 0017  
                    _TRISCbits 000F83                      _TRISDbits 000F84                      _TRISEbits 000F85  
                    _TRISFbits 000F86                      _TRISGbits 000F87                      _TRISHbits 000F88  
             fullSpeedAhead@mL 0019               fullSpeedAhead@mR 001B       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001                    _CCP1CONbits 000FAB  
            ?_color_read_Clear 0005                    _CCP2CONbits 000FA7              ?_color_read_Green 0005  
                  _CCP3CONbits 000F26                    _CCP4CONbits 000F22                     main@motorL 01E2  
                   main@motorR 01EB             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                   _turnLeft90 09CE                 _fullSpeedAhead 101C                 __end_of___wmul 1572  
               __end_of_square 101C            color_read_Clear@tmp 000A            start_initialization 15EA  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 122A         __end_of_fullSpeedAhead 10DE  
                     ??___wmul 0005                    ?_returnhome 0038                       ??_square 0023  
                  ?_returnstep 0025                    __pbssCOMRAM 0053                  __pcstackBANK1 0100  
              smallmovement@mL 001E                smallmovement@mR 0020                       ?_HighISR 0001  
                    _main$2741 01C8               ___lwdiv@dividend 000C                   ?_Timer0_init 0001  
                  ?_turnLeft90 001E                ?_fullSpeedAhead 0019                      __pintcode 0008  
          savepath@instruction 0003                       ?___lwdiv 000C           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004                  ?_turnRight135 001E              _I2C_2_Master_Idle 1524  
            _I2C_2_Master_Init 14D2              _I2C_2_Master_Read 1450               returnstep@motorL 0025  
             returnstep@motorR 002E              _I2C_2_Master_Stop 1634                       _ADC_init 15D0  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0015                       ?_turn180 001E             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 0010       initDCmotorsPWM@PWMperiod 0001            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 000F79            ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B  
                     _LATDbits 000F7C                       _LATEbits 000F7D                       _LATFbits 000F7E  
                    _on_period 0055                       _LATGbits 000F7F                       _LATHbits 000F80  
                     _PIE0bits 000E29                       i2u172_40 001A                       i2u172_41 0016  
                     _PIR0bits 000E33               ?_initDCmotorsPWM 0001                       _SSP2CON2 000EDA  
                     _SSP2STAT 000ED8                     _ADCON0bits 000F60      __end_of_I2C_2_Master_Idle 154C  
    __end_of_I2C_2_Master_Init 14FC      __end_of_I2C_2_Master_Read 1492              ___wmul@multiplier 0001  
               ??_turnRight135 0022      __end_of_I2C_2_Master_Stop 163E                   setMotorPWM@m 0013  
  I2C_2_Master_Write@data_byte 0002                   _pathposition 0059              ??_color_read_Blue 0007  
                ?_decide_color 0013  __end_of_I2C_2_Master_RepStart 1634             color_read_Blue@tmp 000A  
          __end_of_setMotorPWM 08A2                       __Hrparam 0000                     _ADC_getval 1592  
                     __Lrparam 0000                 turnRight135@mL 001E                 turnRight135@mR 0020  
                turnLeft135@mL 001E                  turnLeft135@mR 0020                  _smallmovement 10DE  
                   _ANSELAbits 000E92                     _ANSELDbits 000EA7                     _ANSELFbits 000EB4  
          returnhome@timearray 004C                   savepath@path 0001                 ??_decide_color 0015  
                   _T0CON0bits 000FD5                     _T0CON1bits 000FD6                ___lwdiv@divisor 000E  
              ___lwdiv@counter 0012                       __ptext10 0E62                       __ptext11 0F48  
                     __ptext20 1360                       __ptext12 129E                       __ptext21 13B0  
                     __ptext13 101C                       __ptext30 1524                       __ptext22 1400  
                     __ptext14 0736                       __ptext31 14D2                       __ptext23 162A  
                     __ptext15 154C                       __ptext32 1600                       __ptext24 1450  
                     __ptext16 119A                       __ptext33 161E                       __ptext25 1492  
                     __ptext17 0028                       __ptext34 15D0                       __ptext26 1572  
                     __ptext18 122A                       __ptext35 1592                       __ptext27 1612  
                     __ptext19 1310                       __ptext28 1634                       __ptext29 163E  
                 _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA                       _savepath 15B2  
                ??_turnLeft135 0022                       _savetime 14FC                       isa$xinst 000000  
                     int$flags 005B                  ??_turnRight90 0022                       main@path 0164  
               ?_smallmovement 001E                   ??_returnhome 004E                   ??_returnstep 0037  
                    turn180@mL 001E                      turn180@mR 0020                     _INTCONbits 000FF2  
                  _setMotorPWM 0736                      square@dir 0022                       intlevel2 0000  
                turnRight90@mL 001E                  turnRight90@mR 0020               ??_fullSpeedAhead 001E  
         __end_of_turnRight135 0D7A             __end_of_returnhome 09CE             __end_of_returnstep 0BA8  
                  ?_ADC_getval 0001                   ??_turnLeft90 0022               _color_click_init 1492  
          __end_of_turnLeft135 0E62                       square@mL 001E                       square@mR 0020  
                   _SSP2DATPPS 000E1D                   _timeposition 005A                     _SSP2CLKPPS 000E1C  
          __end_of_turnRight90 0C92             __end_of_turnLeft90 0ABC           __end_of_decide_color 055A  
