

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Dec 03 01:08:09 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    43   000000                     
    44                           ; Version 2.35
    45                           ; Generated 05/05/2021 GMT
    46                           ; 
    47                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F67K40 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79   000000                     _LATDbits	set	3964
    80   000000                     _SSP2CON2bits	set	3802
    81   000000                     _SSP2CLKPPS	set	3612
    82   000000                     _SSP2DATPPS	set	3613
    83   000000                     _ANSELDbits	set	3751
    84   000000                     _SSP2ADD	set	3798
    85   000000                     _SSP2CON1bits	set	3801
    86   000000                     _LATCbits	set	3963
    87   000000                     _LATEbits	set	3965
    88   000000                     _SSP2CON2	set	3802
    89   000000                     _TRISDbits	set	3972
    90   000000                     _CCPR4H	set	3873
    91   000000                     _CCPR3H	set	3877
    92   000000                     _SSP2STAT	set	3800
    93   000000                     _TRISGbits	set	3975
    94   000000                     _TRISEbits	set	3973
    95   000000                     _SSP2BUF	set	3797
    96   000000                     _PIE0bits	set	3625
    97   000000                     _PIR0bits	set	3635
    98   000000                     _RC7PPS	set	3689
    99   000000                     _RD5PPS	set	3695
   100   000000                     _RE2PPS	set	3700
   101   000000                     _RD6PPS	set	3696
   102   000000                     _LATGbits	set	3967
   103   000000                     _LATHbits	set	3968
   104   000000                     _TRISCbits	set	3971
   105   000000                     _TRISHbits	set	3976
   106   000000                     _T2PR	set	4028
   107   000000                     _T2CONbits	set	4029
   108   000000                     _CCPR2H	set	4006
   109   000000                     _CCPR1H	set	4010
   110   000000                     _RE4PPS	set	3702
   111   000000                     _RG6PPS	set	3720
   112   000000                     _TMR0L	set	4051
   113   000000                     _TMR0H	set	4052
   114   000000                     _T0CON0bits	set	4053
   115   000000                     _T2CLKCONbits	set	4031
   116   000000                     _T2HLTbits	set	4030
   117   000000                     _CCP1CONbits	set	4011
   118   000000                     _CCPTMRS0bits	set	4013
   119   000000                     _CCP2CONbits	set	4007
   120   000000                     _CCP3CONbits	set	3878
   121   000000                     _CCP4CONbits	set	3874
   122   000000                     _T0CON1bits	set	4054
   123   000000                     _INTCONbits	set	4082
   124                           
   125                           ; #config settings
   126                           
   127                           	psect	cinit
   128   000F48                     __pcinit:
   129                           	callstack 0
   130   000F48                     start_initialization:
   131                           	callstack 0
   132   000F48                     __initialization:
   133                           	callstack 0
   134                           
   135                           ; Clear objects allocated to BANK1 (2 bytes)
   136   000F48  0101               	movlb	1
   137   000F4A  6BDB               	clrf	(__pbssBANK1+1)& (0+255),b
   138   000F4C  6BDA               	clrf	__pbssBANK1& (0+255),b
   139                           
   140                           ; Clear objects allocated to COMRAM (6 bytes)
   141   000F4E  6A4F               	clrf	(__pbssCOMRAM+5)& (0+255),c
   142   000F50  6A4E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   143   000F52  6A4D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   144   000F54  6A4C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   145   000F56  6A4B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   146   000F58  6A4A               	clrf	__pbssCOMRAM& (0+255),c
   147   000F5A                     end_of_initialization:
   148                           	callstack 0
   149   000F5A                     __end_of__initialization:
   150                           	callstack 0
   151   000F5A  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   152   000F5C  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   153   000F5E  0100               	movlb	0
   154   000F60  EF16  F000         	goto	_main	;jump to C main() function
   155                           
   156                           	psect	bssCOMRAM
   157   00004A                     __pbssCOMRAM:
   158                           	callstack 0
   159   00004A                     _off_period:
   160                           	callstack 0
   161   00004A                     	ds	2
   162   00004C                     _on_period:
   163                           	callstack 0
   164   00004C                     	ds	2
   165   00004E                     _pathposition:
   166                           	callstack 0
   167   00004E                     	ds	1
   168   00004F                     _timeposition:
   169                           	callstack 0
   170   00004F                     	ds	1
   171                           
   172                           	psect	bssBANK1
   173   0001DA                     __pbssBANK1:
   174                           	callstack 0
   175   0001DA                     _timercount:
   176                           	callstack 0
   177   0001DA                     	ds	2
   178                           
   179                           	psect	cstackBANK1
   180   000100                     __pcstackBANK1:
   181                           	callstack 0
   182   000100                     main@timearray:
   183                           	callstack 0
   184                           
   185                           ; 100 bytes @ 0x0
   186   000100                     	ds	100
   187   000164                     main@path:
   188                           	callstack 0
   189                           
   190                           ; 100 bytes @ 0x64
   191   000164                     	ds	100
   192   0001C8                     main@motorL:
   193                           	callstack 0
   194                           
   195                           ; 9 bytes @ 0xC8
   196   0001C8                     	ds	9
   197   0001D1                     main@motorR:
   198                           	callstack 0
   199                           
   200                           ; 9 bytes @ 0xD1
   201   0001D1                     	ds	9
   202                           
   203                           	psect	cstackCOMRAM
   204   000001                     __pcstackCOMRAM:
   205                           	callstack 0
   206   000001                     ??_I2C_2_Master_Idle:
   207   000001                     ?_savetime:
   208                           	callstack 0
   209   000001                     ?___wmul:
   210                           	callstack 0
   211   000001                     initDCmotorsPWM@PWMperiod:
   212                           	callstack 0
   213   000001                     savepath@path:
   214                           	callstack 0
   215   000001                     savetime@timearray:
   216                           	callstack 0
   217   000001                     ___wmul@multiplier:
   218                           	callstack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221   000001                     	ds	1
   222   000002                     I2C_2_Master_Write@data_byte:
   223                           	callstack 0
   224                           
   225                           ; 1 bytes @ 0x1
   226   000002                     	ds	1
   227   000003                     color_writetoaddr@value:
   228                           	callstack 0
   229   000003                     savepath@instruction:
   230                           	callstack 0
   231   000003                     savetime@timercount:
   232                           	callstack 0
   233   000003                     ___wmul@multiplicand:
   234                           	callstack 0
   235                           
   236                           ; 2 bytes @ 0x2
   237   000003                     	ds	1
   238   000004                     ??_savepath:
   239   000004                     color_writetoaddr@address:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x3
   243   000004                     	ds	1
   244   000005                     ??_color_click_init:
   245   000005                     ??_savetime:
   246   000005                     ___wmul@product:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0x4
   250   000005                     	ds	2
   251   000007                     ?___lwdiv:
   252                           	callstack 0
   253   000007                     ___lwdiv@dividend:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x6
   257   000007                     	ds	2
   258   000009                     ___lwdiv@divisor:
   259                           	callstack 0
   260                           
   261                           ; 2 bytes @ 0x8
   262   000009                     	ds	2
   263   00000B                     ___lwdiv@quotient:
   264                           	callstack 0
   265                           
   266                           ; 2 bytes @ 0xA
   267   00000B                     	ds	2
   268   00000D                     ___lwdiv@counter:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0xC
   272   00000D                     	ds	1
   273   00000E                     setMotorPWM@m:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0xD
   277   00000E                     	ds	2
   278   000010                     ??_setMotorPWM:
   279                           
   280                           ; 1 bytes @ 0xF
   281   000010                     	ds	2
   282   000012                     setMotorPWM@posDuty:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x11
   286   000012                     	ds	1
   287   000013                     setMotorPWM@negDuty:
   288                           	callstack 0
   289                           
   290                           ; 1 bytes @ 0x12
   291   000013                     	ds	1
   292   000014                     stop@mL:
   293                           	callstack 0
   294   000014                     fullSpeedAhead@mL:
   295                           	callstack 0
   296   000014                     reversesquare@mL:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x13
   300   000014                     	ds	2
   301   000016                     stop@mR:
   302                           	callstack 0
   303   000016                     fullSpeedAhead@mR:
   304                           	callstack 0
   305   000016                     reversesquare@mR:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0x15
   309   000016                     	ds	2
   310   000018                     ??_stop:
   311   000018                     ??_reversesquare:
   312   000018                     fullSpeedAhead@dir:
   313                           	callstack 0
   314                           
   315                           ; 1 bytes @ 0x17
   316   000018                     	ds	1
   317   000019                     ??_fullSpeedAhead:
   318   000019                     turnLeft90@mL:
   319                           	callstack 0
   320   000019                     turnRight90@mL:
   321                           	callstack 0
   322   000019                     turnLeft135@mL:
   323                           	callstack 0
   324   000019                     turnRight135@mL:
   325                           	callstack 0
   326   000019                     turn180@mL:
   327                           	callstack 0
   328                           
   329                           ; 2 bytes @ 0x18
   330   000019                     	ds	1
   331   00001A                     reversesquare@setpower:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x19
   335   00001A                     	ds	1
   336   00001B                     turnLeft90@mR:
   337                           	callstack 0
   338   00001B                     turnRight90@mR:
   339                           	callstack 0
   340   00001B                     turnLeft135@mR:
   341                           	callstack 0
   342   00001B                     turnRight135@mR:
   343                           	callstack 0
   344   00001B                     turn180@mR:
   345                           	callstack 0
   346   00001B                     fullSpeedAhead@setpower:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0x1A
   350   00001B                     	ds	2
   351   00001D                     ??_turnLeft90:
   352   00001D                     ??_turnRight90:
   353   00001D                     ??_turnLeft135:
   354   00001D                     ??_turnRight135:
   355   00001D                     ??_turn180:
   356                           
   357                           ; 1 bytes @ 0x1C
   358   00001D                     	ds	2
   359   00001F                     turnLeft90@setpower:
   360                           	callstack 0
   361   00001F                     turnRight90@setpower:
   362                           	callstack 0
   363   00001F                     turnLeft135@setpower:
   364                           	callstack 0
   365   00001F                     turnRight135@setpower:
   366                           	callstack 0
   367   00001F                     turn180@setpower:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x1E
   371   00001F                     	ds	2
   372   000021                     returnstep@motorL:
   373                           	callstack 0
   374                           
   375                           ; 9 bytes @ 0x20
   376   000021                     	ds	9
   377   00002A                     returnstep@motorR:
   378                           	callstack 0
   379                           
   380                           ; 9 bytes @ 0x29
   381   00002A                     	ds	9
   382   000033                     returnstep@instruction:
   383                           	callstack 0
   384                           
   385                           ; 1 bytes @ 0x32
   386   000033                     	ds	1
   387   000034                     returnhome@path:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x33
   391   000034                     	ds	2
   392   000036                     returnhome@motorL:
   393                           	callstack 0
   394                           
   395                           ; 9 bytes @ 0x35
   396   000036                     	ds	9
   397   00003F                     returnhome@motorR:
   398                           	callstack 0
   399                           
   400                           ; 9 bytes @ 0x3E
   401   00003F                     	ds	9
   402   000048                     ??_returnhome:
   403                           
   404                           ; 1 bytes @ 0x47
   405   000048                     	ds	2
   406   00004A                     
   407                           ; 1 bytes @ 0x49
   408 ;;
   409 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   410 ;;
   411 ;; *************** function _main *****************
   412 ;; Defined at:
   413 ;;		line 21 in file "mainfinal.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;		None
   416 ;; Auto vars:     Size  Location     Type
   417 ;;  path          100  100[BANK1 ] unsigned char [100]
   418 ;;  timearray     100    0[BANK1 ] unsigned char [100]
   419 ;;  motorR          9  209[BANK1 ] struct DC_motor
   420 ;;  motorL          9  200[BANK1 ] struct DC_motor
   421 ;;  PWMcycle        2    0        unsigned int 
   422 ;;  degree          2    0        int 
   423 ;; Return value:  Size  Location     Type
   424 ;;                  1    wreg      void 
   425 ;; Registers used:
   426 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   427 ;; Tracked objects:
   428 ;;		On entry : 0/0
   429 ;;		On exit  : 0/0
   430 ;;		Unchanged: 0/0
   431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   433 ;;      Locals:         0       0     218       0       0       0       0       0       0       0       0       0       
      +0       0       0
   434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   435 ;;      Totals:         0       0     218       0       0       0       0       0       0       0       0       0       
      +0       0       0
   436 ;;Total ram usage:      218 bytes
   437 ;; Hardware stack levels required when called: 7
   438 ;; This function calls:
   439 ;;		_Interrupts_init
   440 ;;		_Timer0_init
   441 ;;		_color_click_init
   442 ;;		_fullSpeedAhead
   443 ;;		_initDCmotorsPWM
   444 ;;		_returnhome
   445 ;;		_reversesquare
   446 ;;		_savepath
   447 ;;		_savetime
   448 ;;		_starttimer0
   449 ;;		_turn180
   450 ;;		_turnLeft135
   451 ;;		_turnLeft90
   452 ;;		_turnRight135
   453 ;;		_turnRight90
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text0
   460   00002C                     __ptext0:
   461                           	callstack 0
   462   00002C                     _main:
   463                           	callstack 24
   464   00002C                     
   465                           ;mainfinal.c: 26:     Timer0_init();
   466   00002C  ECB2  F007         	call	_Timer0_init	;wreg free
   467                           
   468                           ;mainfinal.c: 27:     Interrupts_init();
   469   000030  ECC1  F007         	call	_Interrupts_init	;wreg free
   470   000034                     
   471                           ;mainfinal.c: 28:     initDCmotorsPWM(199);
   472   000034  0E00               	movlw	0
   473   000036  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   474   000038  0EC7               	movlw	199
   475   00003A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   476   00003C  EC6E  F006         	call	_initDCmotorsPWM	;wreg free
   477   000040                     
   478                           ;mainfinal.c: 29:     color_click_init();
   479   000040  EC1B  F007         	call	_color_click_init	;wreg free
   480   000044                     
   481                           ;mainfinal.c: 37:     LATHbits.LATH1=0;
   482   000044  9280               	bcf	128,1,c	;volatile
   483   000046                     
   484                           ;mainfinal.c: 38:     TRISHbits.TRISH1 = 0;
   485   000046  9288               	bcf	136,1,c	;volatile
   486   000048                     
   487                           ;mainfinal.c: 41:     LATDbits.LATD3=0;
   488   000048  967C               	bcf	124,3,c	;volatile
   489   00004A                     
   490                           ;mainfinal.c: 42:     TRISDbits.TRISD3 = 0;
   491   00004A  9684               	bcf	132,3,c	;volatile
   492   00004C                     
   493                           ;mainfinal.c: 45:     LATDbits.LATD4=0;
   494   00004C  987C               	bcf	124,4,c	;volatile
   495   00004E                     
   496                           ;mainfinal.c: 46:     TRISDbits.TRISD4 = 0;
   497   00004E  9884               	bcf	132,4,c	;volatile
   498   000050                     
   499                           ;mainfinal.c: 49:     struct DC_motor motorL, motorR;;mainfinal.c: 51:     motorR.power 
      +                          = 0;
   500   000050  0E00               	movlw	0
   501   000052  0101               	movlb	1	; () banked
   502   000054  6FD1               	movwf	main@motorR& (0+255),b
   503   000056                     
   504                           ; BSR set to: 1
   505                           ;mainfinal.c: 52:     motorL.direction = 1;
   506   000056  0E01               	movlw	1
   507   000058  6FC9               	movwf	(main@motorL+1)& (0+255),b
   508   00005A                     
   509                           ; BSR set to: 1
   510                           ;mainfinal.c: 53:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   511   00005A  0EAA               	movlw	170
   512   00005C  6FCD               	movwf	(main@motorL+5)& (0+255),b
   513   00005E  0E0F               	movlw	15
   514   000060  6FCE               	movwf	(main@motorL+6)& (0+255),b
   515   000062                     
   516                           ; BSR set to: 1
   517                           ;mainfinal.c: 54:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   518   000062  0EA6               	movlw	166
   519   000064  6FCF               	movwf	(main@motorL+7)& (0+255),b
   520   000066  0E0F               	movlw	15
   521   000068  6FD0               	movwf	(main@motorL+8)& (0+255),b
   522   00006A                     
   523                           ; BSR set to: 1
   524                           ;mainfinal.c: 55:     motorL.PWMperiod=PWMcycle;
   525   00006A  0E00               	movlw	0
   526   00006C  6FCC               	movwf	(main@motorL+4)& (0+255),b
   527   00006E  0EC7               	movlw	199
   528   000070  6FCB               	movwf	(main@motorL+3)& (0+255),b
   529   000072                     
   530                           ; BSR set to: 1
   531                           ;mainfinal.c: 57:     motorL.power = 0;
   532   000072  0E00               	movlw	0
   533   000074  6FC8               	movwf	main@motorL& (0+255),b
   534   000076                     
   535                           ; BSR set to: 1
   536                           ;mainfinal.c: 58:     motorR.direction = 1;
   537   000076  0E01               	movlw	1
   538   000078  6FD2               	movwf	(main@motorR+1)& (0+255),b
   539   00007A                     
   540                           ; BSR set to: 1
   541                           ;mainfinal.c: 59:     motorR.PWMperiod=PWMcycle;
   542   00007A  0E00               	movlw	0
   543   00007C  6FD5               	movwf	(main@motorR+4)& (0+255),b
   544   00007E  0EC7               	movlw	199
   545   000080  6FD4               	movwf	(main@motorR+3)& (0+255),b
   546   000082                     
   547                           ; BSR set to: 1
   548                           ;mainfinal.c: 60:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   549   000082  0E25               	movlw	37
   550   000084  6FD6               	movwf	(main@motorR+5)& (0+255),b
   551   000086  0E0F               	movlw	15
   552   000088  6FD7               	movwf	(main@motorR+6)& (0+255),b
   553   00008A                     
   554                           ; BSR set to: 1
   555                           ;mainfinal.c: 61:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   556   00008A  0E21               	movlw	33
   557   00008C  6FD8               	movwf	(main@motorR+7)& (0+255),b
   558   00008E  0E0F               	movlw	15
   559   000090  6FD9               	movwf	(main@motorR+8)& (0+255),b
   560   000092                     l1963:
   561                           
   562                           ;mainfinal.c: 74:     starttimer0();
   563   000092  ECC7  F007         	call	_starttimer0	;wreg free
   564   000096                     
   565                           ;mainfinal.c: 75:     fullSpeedAhead(&motorL,&motorR, 1);
   566   000096  0EC8               	movlw	low main@motorL
   567   000098  6E14               	movwf	fullSpeedAhead@mL^0,c
   568   00009A  0E01               	movlw	high main@motorL
   569   00009C  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   570   00009E  0ED1               	movlw	low main@motorR
   571   0000A0  6E16               	movwf	fullSpeedAhead@mR^0,c
   572   0000A2  0E01               	movlw	high main@motorR
   573   0000A4  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   574   0000A6  0E01               	movlw	1
   575   0000A8  6E18               	movwf	fullSpeedAhead@dir^0,c
   576   0000AA  EC5A  F005         	call	_fullSpeedAhead	;wreg free
   577   0000AE                     
   578                           ;mainfinal.c: 78:     if (1){
   579   0000AE  0E64               	movlw	low main@path
   580   0000B0  6E01               	movwf	savepath@path^0,c
   581   0000B2  0E01               	movlw	high main@path
   582   0000B4  6E02               	movwf	(savepath@path+1)^0,c
   583   0000B6  0E01               	movlw	1
   584   0000B8  6E03               	movwf	savepath@instruction^0,c
   585   0000BA  EC95  F007         	call	_savepath	;wreg free
   586   0000BE                     
   587                           ;mainfinal.c: 79:     timercount = savetime(timearray, timercount);
   588   0000BE  0E00               	movlw	low main@timearray
   589   0000C0  6E01               	movwf	savetime@timearray^0,c
   590   0000C2  0E01               	movlw	high main@timearray
   591   0000C4  6E02               	movwf	(savetime@timearray+1)^0,c
   592   0000C6  C1DA  F003         	movff	_timercount,savetime@timercount
   593   0000CA  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   594   0000CE  EC4A  F007         	call	_savetime	;wreg free
   595   0000D2  C001  F1DA         	movff	?_savetime,_timercount
   596   0000D6  C002  F1DB         	movff	?_savetime+1,_timercount+1
   597   0000DA                     
   598                           ;mainfinal.c: 80:     turnRight90(&motorL,&motorR);}
   599   0000DA  0EC8               	movlw	low main@motorL
   600   0000DC  6E19               	movwf	turnRight90@mL^0,c
   601   0000DE  0E01               	movlw	high main@motorL
   602   0000E0  6E1A               	movwf	(turnRight90@mL+1)^0,c
   603   0000E2  0ED1               	movlw	low main@motorR
   604   0000E4  6E1B               	movwf	turnRight90@mR^0,c
   605   0000E6  0E01               	movlw	high main@motorR
   606   0000E8  6E1C               	movwf	(turnRight90@mR+1)^0,c
   607   0000EA  EC55  F003         	call	_turnRight90	;wreg free
   608   0000EE                     
   609                           ;mainfinal.c: 83:     if (1){
   610   0000EE  0E64               	movlw	low main@path
   611   0000F0  6E01               	movwf	savepath@path^0,c
   612   0000F2  0E01               	movlw	high main@path
   613   0000F4  6E02               	movwf	(savepath@path+1)^0,c
   614   0000F6  0E02               	movlw	2
   615   0000F8  6E03               	movwf	savepath@instruction^0,c
   616   0000FA  EC95  F007         	call	_savepath	;wreg free
   617   0000FE                     
   618                           ;mainfinal.c: 84:     timercount = savetime(timearray, timercount);
   619   0000FE  0E00               	movlw	low main@timearray
   620   000100  6E01               	movwf	savetime@timearray^0,c
   621   000102  0E01               	movlw	high main@timearray
   622   000104  6E02               	movwf	(savetime@timearray+1)^0,c
   623   000106  C1DA  F003         	movff	_timercount,savetime@timercount
   624   00010A  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   625   00010E  EC4A  F007         	call	_savetime	;wreg free
   626   000112  C001  F1DA         	movff	?_savetime,_timercount
   627   000116  C002  F1DB         	movff	?_savetime+1,_timercount+1
   628   00011A                     
   629                           ;mainfinal.c: 85:     turnLeft90(&motorL,&motorR);}
   630   00011A  0EC8               	movlw	low main@motorL
   631   00011C  6E19               	movwf	turnLeft90@mL^0,c
   632   00011E  0E01               	movlw	high main@motorL
   633   000120  6E1A               	movwf	(turnLeft90@mL+1)^0,c
   634   000122  0ED1               	movlw	low main@motorR
   635   000124  6E1B               	movwf	turnLeft90@mR^0,c
   636   000126  0E01               	movlw	high main@motorR
   637   000128  6E1C               	movwf	(turnLeft90@mR+1)^0,c
   638   00012A  EC33  F002         	call	_turnLeft90	;wreg free
   639   00012E                     
   640                           ;mainfinal.c: 89:     if (1){
   641   00012E  0E64               	movlw	low main@path
   642   000130  6E01               	movwf	savepath@path^0,c
   643   000132  0E01               	movlw	high main@path
   644   000134  6E02               	movwf	(savepath@path+1)^0,c
   645   000136  0E03               	movlw	3
   646   000138  6E03               	movwf	savepath@instruction^0,c
   647   00013A  EC95  F007         	call	_savepath	;wreg free
   648   00013E                     
   649                           ;mainfinal.c: 90:     timercount = savetime(timearray, timercount);
   650   00013E  0E00               	movlw	low main@timearray
   651   000140  6E01               	movwf	savetime@timearray^0,c
   652   000142  0E01               	movlw	high main@timearray
   653   000144  6E02               	movwf	(savetime@timearray+1)^0,c
   654   000146  C1DA  F003         	movff	_timercount,savetime@timercount
   655   00014A  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   656   00014E  EC4A  F007         	call	_savetime	;wreg free
   657   000152  C001  F1DA         	movff	?_savetime,_timercount
   658   000156  C002  F1DB         	movff	?_savetime+1,_timercount+1
   659   00015A                     
   660                           ;mainfinal.c: 91:     turn180(&motorL,&motorR);}
   661   00015A  0EC8               	movlw	low main@motorL
   662   00015C  6E19               	movwf	turn180@mL^0,c
   663   00015E  0E01               	movlw	high main@motorL
   664   000160  6E1A               	movwf	(turn180@mL+1)^0,c
   665   000162  0ED1               	movlw	low main@motorR
   666   000164  6E1B               	movwf	turn180@mR^0,c
   667   000166  0E01               	movlw	high main@motorR
   668   000168  6E1C               	movwf	(turn180@mR+1)^0,c
   669   00016A  EC5F  F004         	call	_turn180	;wreg free
   670   00016E                     
   671                           ;mainfinal.c: 94:     if (1){
   672   00016E  0E64               	movlw	low main@path
   673   000170  6E01               	movwf	savepath@path^0,c
   674   000172  0E01               	movlw	high main@path
   675   000174  6E02               	movwf	(savepath@path+1)^0,c
   676   000176  0E04               	movlw	4
   677   000178  6E03               	movwf	savepath@instruction^0,c
   678   00017A  EC95  F007         	call	_savepath	;wreg free
   679   00017E                     
   680                           ;mainfinal.c: 95:     timercount = savetime(timearray, timercount);
   681   00017E  0E00               	movlw	low main@timearray
   682   000180  6E01               	movwf	savetime@timearray^0,c
   683   000182  0E01               	movlw	high main@timearray
   684   000184  6E02               	movwf	(savetime@timearray+1)^0,c
   685   000186  C1DA  F003         	movff	_timercount,savetime@timercount
   686   00018A  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   687   00018E  EC4A  F007         	call	_savetime	;wreg free
   688   000192  C001  F1DA         	movff	?_savetime,_timercount
   689   000196  C002  F1DB         	movff	?_savetime+1,_timercount+1
   690   00019A                     
   691                           ;mainfinal.c: 96:     reversesquare(&motorL,&motorR);
   692   00019A  0EC8               	movlw	low main@motorL
   693   00019C  6E14               	movwf	reversesquare@mL^0,c
   694   00019E  0E01               	movlw	high main@motorL
   695   0001A0  6E15               	movwf	(reversesquare@mL+1)^0,c
   696   0001A2  0ED1               	movlw	low main@motorR
   697   0001A4  6E16               	movwf	reversesquare@mR^0,c
   698   0001A6  0E01               	movlw	high main@motorR
   699   0001A8  6E17               	movwf	(reversesquare@mR+1)^0,c
   700   0001AA  ECE4  F004         	call	_reversesquare	;wreg free
   701   0001AE                     
   702                           ;mainfinal.c: 97:     turnRight90(&motorL,&motorR);
   703   0001AE  0EC8               	movlw	low main@motorL
   704   0001B0  6E19               	movwf	turnRight90@mL^0,c
   705   0001B2  0E01               	movlw	high main@motorL
   706   0001B4  6E1A               	movwf	(turnRight90@mL+1)^0,c
   707   0001B6  0ED1               	movlw	low main@motorR
   708   0001B8  6E1B               	movwf	turnRight90@mR^0,c
   709   0001BA  0E01               	movlw	high main@motorR
   710   0001BC  6E1C               	movwf	(turnRight90@mR+1)^0,c
   711   0001BE  EC55  F003         	call	_turnRight90	;wreg free
   712   0001C2                     
   713                           ;mainfinal.c: 98:     savepath(path, 2);
   714   0001C2  0E64               	movlw	low main@path
   715   0001C4  6E01               	movwf	savepath@path^0,c
   716   0001C6  0E01               	movlw	high main@path
   717   0001C8  6E02               	movwf	(savepath@path+1)^0,c
   718   0001CA  0E02               	movlw	2
   719   0001CC  6E03               	movwf	savepath@instruction^0,c
   720   0001CE  EC95  F007         	call	_savepath	;wreg free
   721   0001D2                     
   722                           ;mainfinal.c: 102:     timercount = savetime(timearray, timercount);
   723   0001D2  0E00               	movlw	low main@timearray
   724   0001D4  6E01               	movwf	savetime@timearray^0,c
   725   0001D6  0E01               	movlw	high main@timearray
   726   0001D8  6E02               	movwf	(savetime@timearray+1)^0,c
   727   0001DA  C1DA  F003         	movff	_timercount,savetime@timercount
   728   0001DE  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   729   0001E2  EC4A  F007         	call	_savetime	;wreg free
   730   0001E6  C001  F1DA         	movff	?_savetime,_timercount
   731   0001EA  C002  F1DB         	movff	?_savetime+1,_timercount+1
   732   0001EE                     
   733                           ;mainfinal.c: 103:     reversesquare(&motorL,&motorR);
   734   0001EE  0EC8               	movlw	low main@motorL
   735   0001F0  6E14               	movwf	reversesquare@mL^0,c
   736   0001F2  0E01               	movlw	high main@motorL
   737   0001F4  6E15               	movwf	(reversesquare@mL+1)^0,c
   738   0001F6  0ED1               	movlw	low main@motorR
   739   0001F8  6E16               	movwf	reversesquare@mR^0,c
   740   0001FA  0E01               	movlw	high main@motorR
   741   0001FC  6E17               	movwf	(reversesquare@mR+1)^0,c
   742   0001FE  ECE4  F004         	call	_reversesquare	;wreg free
   743   000202                     
   744                           ;mainfinal.c: 104:     turnLeft90(&motorL,&motorR);
   745   000202  0EC8               	movlw	low main@motorL
   746   000204  6E19               	movwf	turnLeft90@mL^0,c
   747   000206  0E01               	movlw	high main@motorL
   748   000208  6E1A               	movwf	(turnLeft90@mL+1)^0,c
   749   00020A  0ED1               	movlw	low main@motorR
   750   00020C  6E1B               	movwf	turnLeft90@mR^0,c
   751   00020E  0E01               	movlw	high main@motorR
   752   000210  6E1C               	movwf	(turnLeft90@mR+1)^0,c
   753   000212  EC33  F002         	call	_turnLeft90	;wreg free
   754   000216                     
   755                           ;mainfinal.c: 105:     savepath(path, 3);
   756   000216  0E64               	movlw	low main@path
   757   000218  6E01               	movwf	savepath@path^0,c
   758   00021A  0E01               	movlw	high main@path
   759   00021C  6E02               	movwf	(savepath@path+1)^0,c
   760   00021E  0E03               	movlw	3
   761   000220  6E03               	movwf	savepath@instruction^0,c
   762   000222  EC95  F007         	call	_savepath	;wreg free
   763   000226                     
   764                           ;mainfinal.c: 109:     timercount = savetime(timearray, timercount);
   765   000226  0E00               	movlw	low main@timearray
   766   000228  6E01               	movwf	savetime@timearray^0,c
   767   00022A  0E01               	movlw	high main@timearray
   768   00022C  6E02               	movwf	(savetime@timearray+1)^0,c
   769   00022E  C1DA  F003         	movff	_timercount,savetime@timercount
   770   000232  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   771   000236  EC4A  F007         	call	_savetime	;wreg free
   772   00023A  C001  F1DA         	movff	?_savetime,_timercount
   773   00023E  C002  F1DB         	movff	?_savetime+1,_timercount+1
   774   000242                     
   775                           ;mainfinal.c: 110:     turnRight135(&motorL,&motorR);
   776   000242  0EC8               	movlw	low main@motorL
   777   000244  6E19               	movwf	turnRight135@mL^0,c
   778   000246  0E01               	movlw	high main@motorL
   779   000248  6E1A               	movwf	(turnRight135@mL+1)^0,c
   780   00024A  0ED1               	movlw	low main@motorR
   781   00024C  6E1B               	movwf	turnRight135@mR^0,c
   782   00024E  0E01               	movlw	high main@motorR
   783   000250  6E1C               	movwf	(turnRight135@mR+1)^0,c
   784   000252  ECDA  F003         	call	_turnRight135	;wreg free
   785   000256                     
   786                           ;mainfinal.c: 111:     savepath(path, 5);
   787   000256  0E64               	movlw	low main@path
   788   000258  6E01               	movwf	savepath@path^0,c
   789   00025A  0E01               	movlw	high main@path
   790   00025C  6E02               	movwf	(savepath@path+1)^0,c
   791   00025E  0E05               	movlw	5
   792   000260  6E03               	movwf	savepath@instruction^0,c
   793   000262  EC95  F007         	call	_savepath	;wreg free
   794   000266                     
   795                           ;mainfinal.c: 115:     timercount = savetime(timearray, timercount);
   796   000266  0E00               	movlw	low main@timearray
   797   000268  6E01               	movwf	savetime@timearray^0,c
   798   00026A  0E01               	movlw	high main@timearray
   799   00026C  6E02               	movwf	(savetime@timearray+1)^0,c
   800   00026E  C1DA  F003         	movff	_timercount,savetime@timercount
   801   000272  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   802   000276  EC4A  F007         	call	_savetime	;wreg free
   803   00027A  C001  F1DA         	movff	?_savetime,_timercount
   804   00027E  C002  F1DB         	movff	?_savetime+1,_timercount+1
   805   000282                     
   806                           ;mainfinal.c: 116:     turnLeft135(&motorL,&motorR);
   807   000282  0EC8               	movlw	low main@motorL
   808   000284  6E19               	movwf	turnLeft135@mL^0,c
   809   000286  0E01               	movlw	high main@motorL
   810   000288  6E1A               	movwf	(turnLeft135@mL+1)^0,c
   811   00028A  0ED1               	movlw	low main@motorR
   812   00028C  6E1B               	movwf	turnLeft135@mR^0,c
   813   00028E  0E01               	movlw	high main@motorR
   814   000290  6E1C               	movwf	(turnLeft135@mR+1)^0,c
   815   000292  ECC4  F002         	call	_turnLeft135	;wreg free
   816   000296                     
   817                           ;mainfinal.c: 117:     savepath(path, 6);
   818   000296  0E64               	movlw	low main@path
   819   000298  6E01               	movwf	savepath@path^0,c
   820   00029A  0E01               	movlw	high main@path
   821   00029C  6E02               	movwf	(savepath@path+1)^0,c
   822   00029E  0E06               	movlw	6
   823   0002A0  6E03               	movwf	savepath@instruction^0,c
   824   0002A2  EC95  F007         	call	_savepath	;wreg free
   825   0002A6                     
   826                           ;mainfinal.c: 126:         timercount = savetime(timearray, timercount);
   827   0002A6  0E00               	movlw	low main@timearray
   828   0002A8  6E01               	movwf	savetime@timearray^0,c
   829   0002AA  0E01               	movlw	high main@timearray
   830   0002AC  6E02               	movwf	(savetime@timearray+1)^0,c
   831   0002AE  C1DA  F003         	movff	_timercount,savetime@timercount
   832   0002B2  C1DB  F004         	movff	_timercount+1,savetime@timercount+1
   833   0002B6  EC4A  F007         	call	_savetime	;wreg free
   834   0002BA  C001  F1DA         	movff	?_savetime,_timercount
   835   0002BE  C002  F1DB         	movff	?_savetime+1,_timercount+1
   836   0002C2                     
   837                           ;mainfinal.c: 127:         returnhome(path, motorL, motorR);
   838   0002C2  0E64               	movlw	low main@path
   839   0002C4  6E34               	movwf	returnhome@path^0,c
   840   0002C6  0E01               	movlw	high main@path
   841   0002C8  6E35               	movwf	(returnhome@path+1)^0,c
   842   0002CA  EE21  F0C8         	lfsr	2,main@motorL
   843   0002CE  EE00  F036         	lfsr	0,returnhome@motorL
   844   0002D2  0E08               	movlw	8
   845   0002D4                     u701:
   846   0002D4  CFDB FFEB          	movff	plusw2,plusw0
   847   0002D8  06E8               	decf	wreg,f,c
   848   0002DA  E2FC               	bc	u701
   849   0002DC  EE21  F0D1         	lfsr	2,main@motorR
   850   0002E0  EE00  F03F         	lfsr	0,returnhome@motorR
   851   0002E4  0E08               	movlw	8
   852   0002E6                     u711:
   853   0002E6  CFDB FFEB          	movff	plusw2,plusw0
   854   0002EA  06E8               	decf	wreg,f,c
   855   0002EC  E2FC               	bc	u711
   856   0002EE  ECF0  F006         	call	_returnhome	;wreg free
   857   0002F2  EF49  F000         	goto	l1963
   858   0002F6  EF14  F000         	goto	start
   859   0002FA                     __end_of_main:
   860                           	callstack 0
   861                           
   862 ;; *************** function _starttimer0 *****************
   863 ;; Defined at:
   864 ;;		line 40 in file "timer0.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;		None
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		wreg, status,2
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   882 ;;Total ram usage:        0 bytes
   883 ;; Hardware stack levels used: 1
   884 ;; Hardware stack levels required when called: 1
   885 ;; This function calls:
   886 ;;		Nothing
   887 ;; This function is called by:
   888 ;;		_main
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           	psect	text1
   893   000F8E                     __ptext1:
   894                           	callstack 0
   895   000F8E                     _starttimer0:
   896                           	callstack 29
   897   000F8E                     
   898                           ;timer0.c: 41:     TMR0H=1535>>8;
   899   000F8E  0E05               	movlw	5
   900   000F90  6ED4               	movwf	212,c	;volatile
   901   000F92                     
   902                           ;timer0.c: 42:     TMR0L=1535;
   903   000F92  68D3               	setf	211,c	;volatile
   904   000F94                     
   905                           ;timer0.c: 43:     T0CON0bits.T0EN=1;
   906   000F94  8ED5               	bsf	213,7,c	;volatile
   907   000F96  0012               	return		;funcret
   908   000F98                     __end_of_starttimer0:
   909                           	callstack 0
   910                           
   911 ;; *************** function _savetime *****************
   912 ;; Defined at:
   913 ;;		line 295 in file "dc_motor.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;  timearray       2    0[COMRAM] PTR unsigned char 
   916 ;;		 -> main@timearray(100), 
   917 ;;  timercount      2    2[COMRAM] int 
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  2    0[COMRAM] int 
   922 ;; Registers used:
   923 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   929 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   931 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   932 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;Total ram usage:        6 bytes
   934 ;; Hardware stack levels used: 1
   935 ;; Hardware stack levels required when called: 1
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text2
   944   000E94                     __ptext2:
   945                           	callstack 0
   946   000E94                     _savetime:
   947                           	callstack 29
   948   000E94                     
   949                           ;dc_motor.c: 295: int savetime(char timearray[100], int timercount);dc_motor.c: 296: {;d
      +                          c_motor.c: 297:     T0CON0bits.T0EN=0;
   950   000E94  9ED5               	bcf	213,7,c	;volatile
   951   000E96                     
   952                           ;dc_motor.c: 298:     timearray[timeposition]=timercount;
   953   000E96  C04F  F005         	movff	_timeposition,??_savetime
   954   000E9A  6A06               	clrf	(??_savetime+1)^0,c
   955   000E9C  BE05               	btfsc	??_savetime^0,7,c
   956   000E9E  0606               	decf	(??_savetime+1)^0,f,c
   957   000EA0  5005               	movf	??_savetime^0,w,c
   958   000EA2  2401               	addwf	savetime@timearray^0,w,c
   959   000EA4  6ED9               	movwf	fsr2l,c
   960   000EA6  5006               	movf	(??_savetime+1)^0,w,c
   961   000EA8  2002               	addwfc	(savetime@timearray+1)^0,w,c
   962   000EAA  6EDA               	movwf	fsr2h,c
   963   000EAC  C003  FFDF         	movff	savetime@timercount,indf2
   964   000EB0                     
   965                           ;dc_motor.c: 299:     timeposition++;
   966   000EB0  2A4F               	incf	_timeposition^0,f,c
   967   000EB2                     
   968                           ;dc_motor.c: 301:     return timercount;
   969   000EB2  0E00               	movlw	0
   970   000EB4  6E02               	movwf	(?_savetime+1)^0,c
   971   000EB6  0E00               	movlw	0
   972   000EB8  6E01               	movwf	?_savetime^0,c
   973   000EBA  0012               	return		;funcret
   974   000EBC                     __end_of_savetime:
   975                           	callstack 0
   976                           
   977 ;; *************** function _savepath *****************
   978 ;; Defined at:
   979 ;;		line 289 in file "dc_motor.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  path            2    0[COMRAM] PTR unsigned char 
   982 ;;		 -> main@path(100), 
   983 ;;  instruction     1    2[COMRAM] unsigned char 
   984 ;; Auto vars:     Size  Location     Type
   985 ;;		None
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   995 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   998 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   999 ;;Total ram usage:        5 bytes
  1000 ;; Hardware stack levels used: 1
  1001 ;; Hardware stack levels required when called: 1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text3
  1010   000F2A                     __ptext3:
  1011                           	callstack 0
  1012   000F2A                     _savepath:
  1013                           	callstack 29
  1014   000F2A                     
  1015                           ;dc_motor.c: 289: void savepath(char path[100], char instruction);dc_motor.c: 290: {;dc_
      +                          motor.c: 291:     path[pathposition] = instruction;
  1016   000F2A  C04E  F004         	movff	_pathposition,??_savepath
  1017   000F2E  6A05               	clrf	(??_savepath+1)^0,c
  1018   000F30  BE04               	btfsc	??_savepath^0,7,c
  1019   000F32  0605               	decf	(??_savepath+1)^0,f,c
  1020   000F34  5004               	movf	??_savepath^0,w,c
  1021   000F36  2401               	addwf	savepath@path^0,w,c
  1022   000F38  6ED9               	movwf	fsr2l,c
  1023   000F3A  5005               	movf	(??_savepath+1)^0,w,c
  1024   000F3C  2002               	addwfc	(savepath@path+1)^0,w,c
  1025   000F3E  6EDA               	movwf	fsr2h,c
  1026   000F40  C003  FFDF         	movff	savepath@instruction,indf2
  1027   000F44                     
  1028                           ;dc_motor.c: 292:     pathposition++;
  1029   000F44  2A4E               	incf	_pathposition^0,f,c
  1030   000F46  0012               	return		;funcret
  1031   000F48                     __end_of_savepath:
  1032                           	callstack 0
  1033                           
  1034 ;; *************** function _reversesquare *****************
  1035 ;; Defined at:
  1036 ;;		line 256 in file "dc_motor.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1039 ;;		 -> main@motorL(9), 
  1040 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1041 ;;		 -> main@motorR(9), 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  setpower        2   25[COMRAM] int 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1056 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1057 ;;Total ram usage:        8 bytes
  1058 ;; Hardware stack levels used: 1
  1059 ;; Hardware stack levels required when called: 3
  1060 ;; This function calls:
  1061 ;;		_setMotorPWM
  1062 ;; This function is called by:
  1063 ;;		_main
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text4
  1068   0009C8                     __ptext4:
  1069                           	callstack 0
  1070   0009C8                     _reversesquare:
  1071                           	callstack 27
  1072   0009C8                     
  1073                           ;dc_motor.c: 256: void reversesquare(DC_motor *mL, DC_motor *mR);dc_motor.c: 257: {;dc_m
      +                          otor.c: 258:     mL->brakemode=1;
  1074   0009C8  EE20 F002          	lfsr	2,2
  1075   0009CC  5014               	movf	reversesquare@mL^0,w,c
  1076   0009CE  26D9               	addwf	fsr2l,f,c
  1077   0009D0  5015               	movf	(reversesquare@mL+1)^0,w,c
  1078   0009D2  22DA               	addwfc	fsr2h,f,c
  1079   0009D4  0E01               	movlw	1
  1080   0009D6  6EDF               	movwf	indf2,c
  1081                           
  1082                           ;dc_motor.c: 259:     mR->brakemode=1;
  1083   0009D8  EE20 F002          	lfsr	2,2
  1084   0009DC  5016               	movf	reversesquare@mR^0,w,c
  1085   0009DE  26D9               	addwf	fsr2l,f,c
  1086   0009E0  5017               	movf	(reversesquare@mR+1)^0,w,c
  1087   0009E2  22DA               	addwfc	fsr2h,f,c
  1088   0009E4  0E01               	movlw	1
  1089   0009E6  6EDF               	movwf	indf2,c
  1090                           
  1091                           ;dc_motor.c: 260:     mL->direction = 0;
  1092   0009E8  EE20 F001          	lfsr	2,1
  1093   0009EC  5014               	movf	reversesquare@mL^0,w,c
  1094   0009EE  26D9               	addwf	fsr2l,f,c
  1095   0009F0  5015               	movf	(reversesquare@mL+1)^0,w,c
  1096   0009F2  22DA               	addwfc	fsr2h,f,c
  1097   0009F4  0E00               	movlw	0
  1098   0009F6  6EDF               	movwf	indf2,c
  1099                           
  1100                           ;dc_motor.c: 261:     mR->direction = 0;
  1101   0009F8  EE20 F001          	lfsr	2,1
  1102   0009FC  5016               	movf	reversesquare@mR^0,w,c
  1103   0009FE  26D9               	addwf	fsr2l,f,c
  1104   000A00  5017               	movf	(reversesquare@mR+1)^0,w,c
  1105   000A02  22DA               	addwfc	fsr2h,f,c
  1106   000A04  0E00               	movlw	0
  1107   000A06  6EDF               	movwf	indf2,c
  1108   000A08                     
  1109                           ;dc_motor.c: 263:     int setpower = 50;
  1110   000A08  0E00               	movlw	0
  1111   000A0A  6E1B               	movwf	(reversesquare@setpower+1)^0,c
  1112   000A0C  0E32               	movlw	50
  1113   000A0E  6E1A               	movwf	reversesquare@setpower^0,c
  1114                           
  1115                           ;dc_motor.c: 265:     while (mL->power != setpower || mR->power != setpower ) {
  1116   000A10  EF33  F005         	goto	l1857
  1117   000A14                     l1843:
  1118                           
  1119                           ;dc_motor.c: 266:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1120   000A14  0ED0               	movlw	208
  1121   000A16  6E18               	movwf	??_reversesquare^0,c
  1122   000A18  0ECA               	movlw	202
  1123   000A1A                     u737:
  1124   000A1A  2EE8               	decfsz	wreg,f,c
  1125   000A1C  D7FE               	bra	u737
  1126   000A1E  2E18               	decfsz	??_reversesquare^0,f,c
  1127   000A20  D7FC               	bra	u737
  1128   000A22                     
  1129                           ;dc_motor.c: 267:         mL->power++;
  1130   000A22  C014  FFD9         	movff	reversesquare@mL,fsr2l
  1131   000A26  C015  FFDA         	movff	reversesquare@mL+1,fsr2h
  1132   000A2A  2ADF               	incf	indf2,f,c
  1133   000A2C                     
  1134                           ;dc_motor.c: 268:         mR->power++;
  1135   000A2C  C016  FFD9         	movff	reversesquare@mR,fsr2l
  1136   000A30  C017  FFDA         	movff	reversesquare@mR+1,fsr2h
  1137   000A34  2ADF               	incf	indf2,f,c
  1138   000A36                     
  1139                           ;dc_motor.c: 269:         setMotorPWM(mL);
  1140   000A36  C014  F00E         	movff	reversesquare@mL,setMotorPWM@m
  1141   000A3A  C015  F00F         	movff	reversesquare@mL+1,setMotorPWM@m+1
  1142   000A3E  EC7D  F001         	call	_setMotorPWM	;wreg free
  1143   000A42                     
  1144                           ;dc_motor.c: 270:         setMotorPWM(mR);
  1145   000A42  C016  F00E         	movff	reversesquare@mR,setMotorPWM@m
  1146   000A46  C017  F00F         	movff	reversesquare@mR+1,setMotorPWM@m+1
  1147   000A4A  EC7D  F001         	call	_setMotorPWM	;wreg free
  1148   000A4E                     
  1149                           ;dc_motor.c: 272:     setMotorPWM(mL);
  1150   000A4E  C014  F00E         	movff	reversesquare@mL,setMotorPWM@m
  1151   000A52  C015  F00F         	movff	reversesquare@mL+1,setMotorPWM@m+1
  1152   000A56  EC7D  F001         	call	_setMotorPWM	;wreg free
  1153   000A5A                     
  1154                           ;dc_motor.c: 273:     setMotorPWM(mR);
  1155   000A5A  C016  F00E         	movff	reversesquare@mR,setMotorPWM@m
  1156   000A5E  C017  F00F         	movff	reversesquare@mR+1,setMotorPWM@m+1
  1157   000A62  EC7D  F001         	call	_setMotorPWM	;wreg free
  1158   000A66                     l1857:
  1159                           
  1160                           ;dc_motor.c: 265:     while (mL->power != setpower || mR->power != setpower ) {
  1161   000A66  C014  FFD9         	movff	reversesquare@mL,fsr2l
  1162   000A6A  C015  FFDA         	movff	reversesquare@mL+1,fsr2h
  1163   000A6E  50DF               	movf	indf2,w,c
  1164   000A70  6E18               	movwf	??_reversesquare^0,c
  1165   000A72  6A19               	clrf	(??_reversesquare+1)^0,c
  1166   000A74  501A               	movf	reversesquare@setpower^0,w,c
  1167   000A76  1818               	xorwf	??_reversesquare^0,w,c
  1168   000A78  E107               	bnz	u631
  1169   000A7A  501B               	movf	(reversesquare@setpower+1)^0,w,c
  1170   000A7C  1819               	xorwf	(??_reversesquare+1)^0,w,c
  1171   000A7E  A4D8               	btfss	status,2,c
  1172   000A80  EF44  F005         	goto	u631
  1173   000A84  EF46  F005         	goto	u630
  1174   000A88                     u631:
  1175   000A88  EF0A  F005         	goto	l1843
  1176   000A8C                     u630:
  1177   000A8C  C016  FFD9         	movff	reversesquare@mR,fsr2l
  1178   000A90  C017  FFDA         	movff	reversesquare@mR+1,fsr2h
  1179   000A94  50DF               	movf	indf2,w,c
  1180   000A96  6E18               	movwf	??_reversesquare^0,c
  1181   000A98  6A19               	clrf	(??_reversesquare+1)^0,c
  1182   000A9A  501A               	movf	reversesquare@setpower^0,w,c
  1183   000A9C  1818               	xorwf	??_reversesquare^0,w,c
  1184   000A9E  E107               	bnz	u641
  1185   000AA0  501B               	movf	(reversesquare@setpower+1)^0,w,c
  1186   000AA2  1819               	xorwf	(??_reversesquare+1)^0,w,c
  1187   000AA4  A4D8               	btfss	status,2,c
  1188   000AA6  EF57  F005         	goto	u641
  1189   000AAA  EF59  F005         	goto	u640
  1190   000AAE                     u641:
  1191   000AAE  EF0A  F005         	goto	l1843
  1192   000AB2                     u640:
  1193   000AB2  0012               	return		;funcret
  1194   000AB4                     __end_of_reversesquare:
  1195                           	callstack 0
  1196                           
  1197 ;; *************** function _returnhome *****************
  1198 ;; Defined at:
  1199 ;;		line 304 in file "dc_motor.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  path            2   51[COMRAM] PTR unsigned char 
  1202 ;;		 -> main@path(100), 
  1203 ;;  motorL          9   53[COMRAM] struct DC_motor
  1204 ;;  motorR          9   62[COMRAM] struct DC_motor
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1216 ;;      Params:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1218 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1219 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1220 ;;Total ram usage:       22 bytes
  1221 ;; Hardware stack levels used: 1
  1222 ;; Hardware stack levels required when called: 6
  1223 ;; This function calls:
  1224 ;;		_returnstep
  1225 ;; This function is called by:
  1226 ;;		_main
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           	psect	text5
  1231   000DE0                     __ptext5:
  1232                           	callstack 0
  1233   000DE0                     _returnhome:
  1234                           	callstack 24
  1235   000DE0                     
  1236                           ;dc_motor.c: 304: void returnhome(char path[100], DC_motor motorL, DC_motor motorR);dc_m
      +                          otor.c: 305: {;dc_motor.c: 306:     while (pathposition >= 0) {returnstep(path[pathposit
      +                          ion--], motorL, motorR);}
  1237   000DE0  EF13  F007         	goto	l1883
  1238   000DE4                     l1879:
  1239   000DE4  EE20  F036         	lfsr	2,returnhome@motorL
  1240   000DE8  EE00  F021         	lfsr	0,returnstep@motorL
  1241   000DEC  0E08               	movlw	8
  1242   000DEE                     u651:
  1243   000DEE  CFDB FFEB          	movff	plusw2,plusw0
  1244   000DF2  06E8               	decf	wreg,f,c
  1245   000DF4  E2FC               	bc	u651
  1246   000DF6  EE20  F03F         	lfsr	2,returnhome@motorR
  1247   000DFA  EE00  F02A         	lfsr	0,returnstep@motorR
  1248   000DFE  0E08               	movlw	8
  1249   000E00                     u661:
  1250   000E00  CFDB FFEB          	movff	plusw2,plusw0
  1251   000E04  06E8               	decf	wreg,f,c
  1252   000E06  E2FC               	bc	u661
  1253   000E08  C04E  F048         	movff	_pathposition,??_returnhome
  1254   000E0C  6A49               	clrf	(??_returnhome+1)^0,c
  1255   000E0E  BE48               	btfsc	??_returnhome^0,7,c
  1256   000E10  0649               	decf	(??_returnhome+1)^0,f,c
  1257   000E12  5048               	movf	??_returnhome^0,w,c
  1258   000E14  2434               	addwf	returnhome@path^0,w,c
  1259   000E16  6ED9               	movwf	fsr2l,c
  1260   000E18  5049               	movf	(??_returnhome+1)^0,w,c
  1261   000E1A  2035               	addwfc	(returnhome@path+1)^0,w,c
  1262   000E1C  6EDA               	movwf	fsr2h,c
  1263   000E1E  50DF               	movf	indf2,w,c
  1264   000E20  ECC4  F005         	call	_returnstep
  1265   000E24  064E               	decf	_pathposition^0,f,c
  1266   000E26                     l1883:
  1267   000E26  BE4E               	btfsc	_pathposition^0,7,c
  1268   000E28  EF1A  F007         	goto	u670
  1269   000E2C  EF18  F007         	goto	u671
  1270   000E30                     u671:
  1271   000E30  EFF2  F006         	goto	l1879
  1272   000E34                     u670:
  1273   000E34  0012               	return		;funcret
  1274   000E36                     __end_of_returnhome:
  1275                           	callstack 0
  1276                           
  1277 ;; *************** function _returnstep *****************
  1278 ;; Defined at:
  1279 ;;		line 309 in file "dc_motor.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  instruction     1    wreg     unsigned char 
  1282 ;;  motorL          9   32[COMRAM] struct DC_motor
  1283 ;;  motorR          9   41[COMRAM] struct DC_motor
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  instruction     1   50[COMRAM] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1295 ;;      Params:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1298 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1299 ;;Total ram usage:       19 bytes
  1300 ;; Hardware stack levels used: 1
  1301 ;; Hardware stack levels required when called: 5
  1302 ;; This function calls:
  1303 ;;		_turn180
  1304 ;;		_turnLeft135
  1305 ;;		_turnLeft90
  1306 ;;		_turnRight135
  1307 ;;		_turnRight90
  1308 ;; This function is called by:
  1309 ;;		_returnhome
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text6
  1314   000B88                     __ptext6:
  1315                           	callstack 0
  1316   000B88                     _returnstep:
  1317                           	callstack 24
  1318                           
  1319                           ;incstack = 0
  1320                           ;returnstep@instruction stored from wreg
  1321   000B88  6E33               	movwf	returnstep@instruction^0,c
  1322   000B8A                     
  1323                           ;dc_motor.c: 312:     if (instruction == 2) {turnLeft90(&motorL,&motorR);}
  1324   000B8A  0E02               	movlw	2
  1325   000B8C  1833               	xorwf	returnstep@instruction^0,w,c
  1326   000B8E  A4D8               	btfss	status,2,c
  1327   000B90  EFCC  F005         	goto	u561
  1328   000B94  EFCE  F005         	goto	u560
  1329   000B98                     u561:
  1330   000B98  EFD8  F005         	goto	l1771
  1331   000B9C                     u560:
  1332   000B9C  0E21               	movlw	low returnstep@motorL
  1333   000B9E  6E19               	movwf	turnLeft90@mL^0,c
  1334   000BA0  0E00               	movlw	high returnstep@motorL
  1335   000BA2  6E1A               	movwf	(turnLeft90@mL+1)^0,c
  1336   000BA4  0E2A               	movlw	low returnstep@motorR
  1337   000BA6  6E1B               	movwf	turnLeft90@mR^0,c
  1338   000BA8  0E00               	movlw	high returnstep@motorR
  1339   000BAA  6E1C               	movwf	(turnLeft90@mR+1)^0,c
  1340   000BAC  EC33  F002         	call	_turnLeft90	;wreg free
  1341   000BB0                     l1771:
  1342                           
  1343                           ;dc_motor.c: 313:     if (instruction == 3) {turnRight90(&motorL,&motorR);}
  1344   000BB0  0E03               	movlw	3
  1345   000BB2  1833               	xorwf	returnstep@instruction^0,w,c
  1346   000BB4  A4D8               	btfss	status,2,c
  1347   000BB6  EFDF  F005         	goto	u571
  1348   000BBA  EFE1  F005         	goto	u570
  1349   000BBE                     u571:
  1350   000BBE  EFEB  F005         	goto	l1775
  1351   000BC2                     u570:
  1352   000BC2  0E21               	movlw	low returnstep@motorL
  1353   000BC4  6E19               	movwf	turnRight90@mL^0,c
  1354   000BC6  0E00               	movlw	high returnstep@motorL
  1355   000BC8  6E1A               	movwf	(turnRight90@mL+1)^0,c
  1356   000BCA  0E2A               	movlw	low returnstep@motorR
  1357   000BCC  6E1B               	movwf	turnRight90@mR^0,c
  1358   000BCE  0E00               	movlw	high returnstep@motorR
  1359   000BD0  6E1C               	movwf	(turnRight90@mR+1)^0,c
  1360   000BD2  EC55  F003         	call	_turnRight90	;wreg free
  1361   000BD6                     l1775:
  1362                           
  1363                           ;dc_motor.c: 314:     if (instruction == 4) {turn180(&motorL,&motorR);}
  1364   000BD6  0E04               	movlw	4
  1365   000BD8  1833               	xorwf	returnstep@instruction^0,w,c
  1366   000BDA  A4D8               	btfss	status,2,c
  1367   000BDC  EFF2  F005         	goto	u581
  1368   000BE0  EFF4  F005         	goto	u580
  1369   000BE4                     u581:
  1370   000BE4  EFFE  F005         	goto	l1779
  1371   000BE8                     u580:
  1372   000BE8  0E21               	movlw	low returnstep@motorL
  1373   000BEA  6E19               	movwf	turn180@mL^0,c
  1374   000BEC  0E00               	movlw	high returnstep@motorL
  1375   000BEE  6E1A               	movwf	(turn180@mL+1)^0,c
  1376   000BF0  0E2A               	movlw	low returnstep@motorR
  1377   000BF2  6E1B               	movwf	turn180@mR^0,c
  1378   000BF4  0E00               	movlw	high returnstep@motorR
  1379   000BF6  6E1C               	movwf	(turn180@mR+1)^0,c
  1380   000BF8  EC5F  F004         	call	_turn180	;wreg free
  1381   000BFC                     l1779:
  1382                           
  1383                           ;dc_motor.c: 315:     if (instruction == 5) {turnLeft135(&motorL,&motorR);}
  1384   000BFC  0E05               	movlw	5
  1385   000BFE  1833               	xorwf	returnstep@instruction^0,w,c
  1386   000C00  A4D8               	btfss	status,2,c
  1387   000C02  EF05  F006         	goto	u591
  1388   000C06  EF07  F006         	goto	u590
  1389   000C0A                     u591:
  1390   000C0A  EF11  F006         	goto	l1783
  1391   000C0E                     u590:
  1392   000C0E  0E21               	movlw	low returnstep@motorL
  1393   000C10  6E19               	movwf	turnLeft135@mL^0,c
  1394   000C12  0E00               	movlw	high returnstep@motorL
  1395   000C14  6E1A               	movwf	(turnLeft135@mL+1)^0,c
  1396   000C16  0E2A               	movlw	low returnstep@motorR
  1397   000C18  6E1B               	movwf	turnLeft135@mR^0,c
  1398   000C1A  0E00               	movlw	high returnstep@motorR
  1399   000C1C  6E1C               	movwf	(turnLeft135@mR+1)^0,c
  1400   000C1E  ECC4  F002         	call	_turnLeft135	;wreg free
  1401   000C22                     l1783:
  1402                           
  1403                           ;dc_motor.c: 316:     if (instruction == 6) {turnRight135(&motorL,&motorR);}
  1404   000C22  0E06               	movlw	6
  1405   000C24  1833               	xorwf	returnstep@instruction^0,w,c
  1406   000C26  A4D8               	btfss	status,2,c
  1407   000C28  EF18  F006         	goto	u601
  1408   000C2C  EF1A  F006         	goto	u600
  1409   000C30                     u601:
  1410   000C30  EF24  F006         	goto	l217
  1411   000C34                     u600:
  1412   000C34  0E21               	movlw	low returnstep@motorL
  1413   000C36  6E19               	movwf	turnRight135@mL^0,c
  1414   000C38  0E00               	movlw	high returnstep@motorL
  1415   000C3A  6E1A               	movwf	(turnRight135@mL+1)^0,c
  1416   000C3C  0E2A               	movlw	low returnstep@motorR
  1417   000C3E  6E1B               	movwf	turnRight135@mR^0,c
  1418   000C40  0E00               	movlw	high returnstep@motorR
  1419   000C42  6E1C               	movwf	(turnRight135@mR+1)^0,c
  1420   000C44  ECDA  F003         	call	_turnRight135	;wreg free
  1421   000C48                     l217:
  1422   000C48  0012               	return		;funcret
  1423   000C4A                     __end_of_returnstep:
  1424                           	callstack 0
  1425                           
  1426 ;; *************** function _turnRight90 *****************
  1427 ;; Defined at:
  1428 ;;		line 136 in file "dc_motor.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1431 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1432 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1433 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;  setpower        2   30[COMRAM] int 
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1447 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1448 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1449 ;;Total ram usage:        8 bytes
  1450 ;; Hardware stack levels used: 1
  1451 ;; Hardware stack levels required when called: 4
  1452 ;; This function calls:
  1453 ;;		_setMotorPWM
  1454 ;;		_stop
  1455 ;; This function is called by:
  1456 ;;		_returnstep
  1457 ;;		_main
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           	psect	text7
  1462   0006AA                     __ptext7:
  1463                           	callstack 0
  1464   0006AA                     _turnRight90:
  1465                           	callstack 26
  1466   0006AA                     
  1467                           ;dc_motor.c: 136: void turnRight90(DC_motor *mL, DC_motor *mR);dc_motor.c: 137: { stop(m
      +                          L, mR);
  1468   0006AA  C019  F014         	movff	turnRight90@mL,stop@mL
  1469   0006AE  C01A  F015         	movff	turnRight90@mL+1,stop@mL+1
  1470   0006B2  C01B  F016         	movff	turnRight90@mR,stop@mR
  1471   0006B6  C01C  F017         	movff	turnRight90@mR+1,stop@mR+1
  1472   0006BA  EC25  F006         	call	_stop	;wreg free
  1473   0006BE                     
  1474                           ;dc_motor.c: 139:     mL->brakemode=1;
  1475   0006BE  EE20 F002          	lfsr	2,2
  1476   0006C2  5019               	movf	turnRight90@mL^0,w,c
  1477   0006C4  26D9               	addwf	fsr2l,f,c
  1478   0006C6  501A               	movf	(turnRight90@mL+1)^0,w,c
  1479   0006C8  22DA               	addwfc	fsr2h,f,c
  1480   0006CA  0E01               	movlw	1
  1481   0006CC  6EDF               	movwf	indf2,c
  1482   0006CE                     
  1483                           ;dc_motor.c: 140:     mR->brakemode=1;
  1484   0006CE  EE20 F002          	lfsr	2,2
  1485   0006D2  501B               	movf	turnRight90@mR^0,w,c
  1486   0006D4  26D9               	addwf	fsr2l,f,c
  1487   0006D6  501C               	movf	(turnRight90@mR+1)^0,w,c
  1488   0006D8  22DA               	addwfc	fsr2h,f,c
  1489   0006DA  0E01               	movlw	1
  1490   0006DC  6EDF               	movwf	indf2,c
  1491   0006DE                     
  1492                           ;dc_motor.c: 141:     mL->direction = 1;
  1493   0006DE  EE20 F001          	lfsr	2,1
  1494   0006E2  5019               	movf	turnRight90@mL^0,w,c
  1495   0006E4  26D9               	addwf	fsr2l,f,c
  1496   0006E6  501A               	movf	(turnRight90@mL+1)^0,w,c
  1497   0006E8  22DA               	addwfc	fsr2h,f,c
  1498   0006EA  0E01               	movlw	1
  1499   0006EC  6EDF               	movwf	indf2,c
  1500   0006EE                     
  1501                           ;dc_motor.c: 142:     mR->direction = 0;
  1502   0006EE  EE20 F001          	lfsr	2,1
  1503   0006F2  501B               	movf	turnRight90@mR^0,w,c
  1504   0006F4  26D9               	addwf	fsr2l,f,c
  1505   0006F6  501C               	movf	(turnRight90@mR+1)^0,w,c
  1506   0006F8  22DA               	addwfc	fsr2h,f,c
  1507   0006FA  0E00               	movlw	0
  1508   0006FC  6EDF               	movwf	indf2,c
  1509   0006FE                     
  1510                           ;dc_motor.c: 144:     int setpower = 50;
  1511   0006FE  0E00               	movlw	0
  1512   000700  6E20               	movwf	(turnRight90@setpower+1)^0,c
  1513   000702  0E32               	movlw	50
  1514   000704  6E1F               	movwf	turnRight90@setpower^0,c
  1515   000706                     
  1516                           ;dc_motor.c: 146:     mL->power = 20;
  1517   000706  C019  FFD9         	movff	turnRight90@mL,fsr2l
  1518   00070A  C01A  FFDA         	movff	turnRight90@mL+1,fsr2h
  1519   00070E  0E14               	movlw	20
  1520   000710  6EDF               	movwf	indf2,c
  1521   000712                     
  1522                           ;dc_motor.c: 147:     mR->power = 20;
  1523   000712  C01B  FFD9         	movff	turnRight90@mR,fsr2l
  1524   000716  C01C  FFDA         	movff	turnRight90@mR+1,fsr2h
  1525   00071A  0E14               	movlw	20
  1526   00071C  6EDF               	movwf	indf2,c
  1527                           
  1528                           ;dc_motor.c: 149:     while (mL->power != setpower || mR->power != setpower ) {
  1529   00071E  EFB3  F003         	goto	l1655
  1530   000722                     l1645:
  1531                           
  1532                           ;dc_motor.c: 150:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1533   000722  0E09               	movlw	9
  1534   000724  6E1E               	movwf	(??_turnRight90+1)^0,c
  1535   000726  0E1E               	movlw	30
  1536   000728  6E1D               	movwf	??_turnRight90^0,c
  1537   00072A  0EE4               	movlw	228
  1538   00072C                     u747:
  1539   00072C  2EE8               	decfsz	wreg,f,c
  1540   00072E  D7FE               	bra	u747
  1541   000730  2E1D               	decfsz	??_turnRight90^0,f,c
  1542   000732  D7FC               	bra	u747
  1543   000734  2E1E               	decfsz	(??_turnRight90+1)^0,f,c
  1544   000736  D7FA               	bra	u747
  1545   000738  D000               	nop2	
  1546   00073A                     
  1547                           ;dc_motor.c: 151:         mL->power++;
  1548   00073A  C019  FFD9         	movff	turnRight90@mL,fsr2l
  1549   00073E  C01A  FFDA         	movff	turnRight90@mL+1,fsr2h
  1550   000742  2ADF               	incf	indf2,f,c
  1551   000744                     
  1552                           ;dc_motor.c: 152:         mR->power++;
  1553   000744  C01B  FFD9         	movff	turnRight90@mR,fsr2l
  1554   000748  C01C  FFDA         	movff	turnRight90@mR+1,fsr2h
  1555   00074C  2ADF               	incf	indf2,f,c
  1556   00074E                     
  1557                           ;dc_motor.c: 153:         setMotorPWM(mL);
  1558   00074E  C019  F00E         	movff	turnRight90@mL,setMotorPWM@m
  1559   000752  C01A  F00F         	movff	turnRight90@mL+1,setMotorPWM@m+1
  1560   000756  EC7D  F001         	call	_setMotorPWM	;wreg free
  1561   00075A                     
  1562                           ;dc_motor.c: 154:         setMotorPWM(mR);
  1563   00075A  C01B  F00E         	movff	turnRight90@mR,setMotorPWM@m
  1564   00075E  C01C  F00F         	movff	turnRight90@mR+1,setMotorPWM@m+1
  1565   000762  EC7D  F001         	call	_setMotorPWM	;wreg free
  1566   000766                     l1655:
  1567                           
  1568                           ;dc_motor.c: 149:     while (mL->power != setpower || mR->power != setpower ) {
  1569   000766  C019  FFD9         	movff	turnRight90@mL,fsr2l
  1570   00076A  C01A  FFDA         	movff	turnRight90@mL+1,fsr2h
  1571   00076E  50DF               	movf	indf2,w,c
  1572   000770  6E1D               	movwf	??_turnRight90^0,c
  1573   000772  6A1E               	clrf	(??_turnRight90+1)^0,c
  1574   000774  501F               	movf	turnRight90@setpower^0,w,c
  1575   000776  181D               	xorwf	??_turnRight90^0,w,c
  1576   000778  E107               	bnz	u481
  1577   00077A  5020               	movf	(turnRight90@setpower+1)^0,w,c
  1578   00077C  181E               	xorwf	(??_turnRight90+1)^0,w,c
  1579   00077E  A4D8               	btfss	status,2,c
  1580   000780  EFC4  F003         	goto	u481
  1581   000784  EFC6  F003         	goto	u480
  1582   000788                     u481:
  1583   000788  EF91  F003         	goto	l1645
  1584   00078C                     u480:
  1585   00078C  C01B  FFD9         	movff	turnRight90@mR,fsr2l
  1586   000790  C01C  FFDA         	movff	turnRight90@mR+1,fsr2h
  1587   000794  50DF               	movf	indf2,w,c
  1588   000796  6E1D               	movwf	??_turnRight90^0,c
  1589   000798  6A1E               	clrf	(??_turnRight90+1)^0,c
  1590   00079A  501F               	movf	turnRight90@setpower^0,w,c
  1591   00079C  181D               	xorwf	??_turnRight90^0,w,c
  1592   00079E  E107               	bnz	u491
  1593   0007A0  5020               	movf	(turnRight90@setpower+1)^0,w,c
  1594   0007A2  181E               	xorwf	(??_turnRight90+1)^0,w,c
  1595   0007A4  A4D8               	btfss	status,2,c
  1596   0007A6  EFD7  F003         	goto	u491
  1597   0007AA  EFD9  F003         	goto	u490
  1598   0007AE                     u491:
  1599   0007AE  EF91  F003         	goto	l1645
  1600   0007B2                     u490:
  1601   0007B2  0012               	return		;funcret
  1602   0007B4                     __end_of_turnRight90:
  1603                           	callstack 0
  1604                           
  1605 ;; *************** function _turnRight135 *****************
  1606 ;; Defined at:
  1607 ;;		line 190 in file "dc_motor.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1610 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1611 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1612 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;  setpower        2   30[COMRAM] int 
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;Total ram usage:        8 bytes
  1629 ;; Hardware stack levels used: 1
  1630 ;; Hardware stack levels required when called: 4
  1631 ;; This function calls:
  1632 ;;		_setMotorPWM
  1633 ;;		_stop
  1634 ;; This function is called by:
  1635 ;;		_returnstep
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text8
  1641   0007B4                     __ptext8:
  1642                           	callstack 0
  1643   0007B4                     _turnRight135:
  1644                           	callstack 26
  1645   0007B4                     
  1646                           ;dc_motor.c: 190: void turnRight135(DC_motor *mL, DC_motor *mR);dc_motor.c: 191: {;dc_mo
      +                          tor.c: 192:     stop(mL, mR);
  1647   0007B4  C019  F014         	movff	turnRight135@mL,stop@mL
  1648   0007B8  C01A  F015         	movff	turnRight135@mL+1,stop@mL+1
  1649   0007BC  C01B  F016         	movff	turnRight135@mR,stop@mR
  1650   0007C0  C01C  F017         	movff	turnRight135@mR+1,stop@mR+1
  1651   0007C4  EC25  F006         	call	_stop	;wreg free
  1652   0007C8                     
  1653                           ;dc_motor.c: 194:     mL->brakemode=1;
  1654   0007C8  EE20 F002          	lfsr	2,2
  1655   0007CC  5019               	movf	turnRight135@mL^0,w,c
  1656   0007CE  26D9               	addwf	fsr2l,f,c
  1657   0007D0  501A               	movf	(turnRight135@mL+1)^0,w,c
  1658   0007D2  22DA               	addwfc	fsr2h,f,c
  1659   0007D4  0E01               	movlw	1
  1660   0007D6  6EDF               	movwf	indf2,c
  1661   0007D8                     
  1662                           ;dc_motor.c: 195:     mR->brakemode=1;
  1663   0007D8  EE20 F002          	lfsr	2,2
  1664   0007DC  501B               	movf	turnRight135@mR^0,w,c
  1665   0007DE  26D9               	addwf	fsr2l,f,c
  1666   0007E0  501C               	movf	(turnRight135@mR+1)^0,w,c
  1667   0007E2  22DA               	addwfc	fsr2h,f,c
  1668   0007E4  0E01               	movlw	1
  1669   0007E6  6EDF               	movwf	indf2,c
  1670   0007E8                     
  1671                           ;dc_motor.c: 196:     mL->direction = 1;
  1672   0007E8  EE20 F001          	lfsr	2,1
  1673   0007EC  5019               	movf	turnRight135@mL^0,w,c
  1674   0007EE  26D9               	addwf	fsr2l,f,c
  1675   0007F0  501A               	movf	(turnRight135@mL+1)^0,w,c
  1676   0007F2  22DA               	addwfc	fsr2h,f,c
  1677   0007F4  0E01               	movlw	1
  1678   0007F6  6EDF               	movwf	indf2,c
  1679   0007F8                     
  1680                           ;dc_motor.c: 197:     mR->direction = 0;
  1681   0007F8  EE20 F001          	lfsr	2,1
  1682   0007FC  501B               	movf	turnRight135@mR^0,w,c
  1683   0007FE  26D9               	addwf	fsr2l,f,c
  1684   000800  501C               	movf	(turnRight135@mR+1)^0,w,c
  1685   000802  22DA               	addwfc	fsr2h,f,c
  1686   000804  0E00               	movlw	0
  1687   000806  6EDF               	movwf	indf2,c
  1688   000808                     
  1689                           ;dc_motor.c: 199:     int setpower = 50;
  1690   000808  0E00               	movlw	0
  1691   00080A  6E20               	movwf	(turnRight135@setpower+1)^0,c
  1692   00080C  0E32               	movlw	50
  1693   00080E  6E1F               	movwf	turnRight135@setpower^0,c
  1694   000810                     
  1695                           ;dc_motor.c: 200:     mL->power = 20;
  1696   000810  C019  FFD9         	movff	turnRight135@mL,fsr2l
  1697   000814  C01A  FFDA         	movff	turnRight135@mL+1,fsr2h
  1698   000818  0E14               	movlw	20
  1699   00081A  6EDF               	movwf	indf2,c
  1700   00081C                     
  1701                           ;dc_motor.c: 201:     mR->power = 20;
  1702   00081C  C01B  FFD9         	movff	turnRight135@mR,fsr2l
  1703   000820  C01C  FFDA         	movff	turnRight135@mR+1,fsr2h
  1704   000824  0E14               	movlw	20
  1705   000826  6EDF               	movwf	indf2,c
  1706                           
  1707                           ;dc_motor.c: 203:     while (mL->power != setpower || mR->power != setpower ) {
  1708   000828  EF38  F004         	goto	l1717
  1709   00082C                     l1707:
  1710                           
  1711                           ;dc_motor.c: 204:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1712   00082C  0E09               	movlw	9
  1713   00082E  6E1E               	movwf	(??_turnRight135+1)^0,c
  1714   000830  0E1E               	movlw	30
  1715   000832  6E1D               	movwf	??_turnRight135^0,c
  1716   000834  0EE4               	movlw	228
  1717   000836                     u757:
  1718   000836  2EE8               	decfsz	wreg,f,c
  1719   000838  D7FE               	bra	u757
  1720   00083A  2E1D               	decfsz	??_turnRight135^0,f,c
  1721   00083C  D7FC               	bra	u757
  1722   00083E  2E1E               	decfsz	(??_turnRight135+1)^0,f,c
  1723   000840  D7FA               	bra	u757
  1724   000842  D000               	nop2	
  1725   000844                     
  1726                           ;dc_motor.c: 205:         mL->power++;
  1727   000844  C019  FFD9         	movff	turnRight135@mL,fsr2l
  1728   000848  C01A  FFDA         	movff	turnRight135@mL+1,fsr2h
  1729   00084C  2ADF               	incf	indf2,f,c
  1730   00084E                     
  1731                           ;dc_motor.c: 206:         mR->power++;
  1732   00084E  C01B  FFD9         	movff	turnRight135@mR,fsr2l
  1733   000852  C01C  FFDA         	movff	turnRight135@mR+1,fsr2h
  1734   000856  2ADF               	incf	indf2,f,c
  1735   000858                     
  1736                           ;dc_motor.c: 207:         setMotorPWM(mL);
  1737   000858  C019  F00E         	movff	turnRight135@mL,setMotorPWM@m
  1738   00085C  C01A  F00F         	movff	turnRight135@mL+1,setMotorPWM@m+1
  1739   000860  EC7D  F001         	call	_setMotorPWM	;wreg free
  1740   000864                     
  1741                           ;dc_motor.c: 208:         setMotorPWM(mR);
  1742   000864  C01B  F00E         	movff	turnRight135@mR,setMotorPWM@m
  1743   000868  C01C  F00F         	movff	turnRight135@mR+1,setMotorPWM@m+1
  1744   00086C  EC7D  F001         	call	_setMotorPWM	;wreg free
  1745   000870                     l1717:
  1746                           
  1747                           ;dc_motor.c: 203:     while (mL->power != setpower || mR->power != setpower ) {
  1748   000870  C019  FFD9         	movff	turnRight135@mL,fsr2l
  1749   000874  C01A  FFDA         	movff	turnRight135@mL+1,fsr2h
  1750   000878  50DF               	movf	indf2,w,c
  1751   00087A  6E1D               	movwf	??_turnRight135^0,c
  1752   00087C  6A1E               	clrf	(??_turnRight135+1)^0,c
  1753   00087E  501F               	movf	turnRight135@setpower^0,w,c
  1754   000880  181D               	xorwf	??_turnRight135^0,w,c
  1755   000882  E107               	bnz	u521
  1756   000884  5020               	movf	(turnRight135@setpower+1)^0,w,c
  1757   000886  181E               	xorwf	(??_turnRight135+1)^0,w,c
  1758   000888  A4D8               	btfss	status,2,c
  1759   00088A  EF49  F004         	goto	u521
  1760   00088E  EF4B  F004         	goto	u520
  1761   000892                     u521:
  1762   000892  EF16  F004         	goto	l1707
  1763   000896                     u520:
  1764   000896  C01B  FFD9         	movff	turnRight135@mR,fsr2l
  1765   00089A  C01C  FFDA         	movff	turnRight135@mR+1,fsr2h
  1766   00089E  50DF               	movf	indf2,w,c
  1767   0008A0  6E1D               	movwf	??_turnRight135^0,c
  1768   0008A2  6A1E               	clrf	(??_turnRight135+1)^0,c
  1769   0008A4  501F               	movf	turnRight135@setpower^0,w,c
  1770   0008A6  181D               	xorwf	??_turnRight135^0,w,c
  1771   0008A8  E107               	bnz	u531
  1772   0008AA  5020               	movf	(turnRight135@setpower+1)^0,w,c
  1773   0008AC  181E               	xorwf	(??_turnRight135+1)^0,w,c
  1774   0008AE  A4D8               	btfss	status,2,c
  1775   0008B0  EF5C  F004         	goto	u531
  1776   0008B4  EF5E  F004         	goto	u530
  1777   0008B8                     u531:
  1778   0008B8  EF16  F004         	goto	l1707
  1779   0008BC                     u530:
  1780   0008BC  0012               	return		;funcret
  1781   0008BE                     __end_of_turnRight135:
  1782                           	callstack 0
  1783                           
  1784 ;; *************** function _turnLeft90 *****************
  1785 ;; Defined at:
  1786 ;;		line 112 in file "dc_motor.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1789 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1790 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1791 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  setpower        2   30[COMRAM] int 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1804 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1805 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1806 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1807 ;;Total ram usage:        8 bytes
  1808 ;; Hardware stack levels used: 1
  1809 ;; Hardware stack levels required when called: 4
  1810 ;; This function calls:
  1811 ;;		_setMotorPWM
  1812 ;;		_stop
  1813 ;; This function is called by:
  1814 ;;		_returnstep
  1815 ;;		_main
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text9
  1820   000466                     __ptext9:
  1821                           	callstack 0
  1822   000466                     _turnLeft90:
  1823                           	callstack 26
  1824   000466                     
  1825                           ;dc_motor.c: 112: void turnLeft90(DC_motor *mL, DC_motor *mR);dc_motor.c: 113: { stop(mL
      +                          , mR);
  1826   000466  C019  F014         	movff	turnLeft90@mL,stop@mL
  1827   00046A  C01A  F015         	movff	turnLeft90@mL+1,stop@mL+1
  1828   00046E  C01B  F016         	movff	turnLeft90@mR,stop@mR
  1829   000472  C01C  F017         	movff	turnLeft90@mR+1,stop@mR+1
  1830   000476  EC25  F006         	call	_stop	;wreg free
  1831   00047A                     
  1832                           ;dc_motor.c: 115:     mL->brakemode=1;
  1833   00047A  EE20 F002          	lfsr	2,2
  1834   00047E  5019               	movf	turnLeft90@mL^0,w,c
  1835   000480  26D9               	addwf	fsr2l,f,c
  1836   000482  501A               	movf	(turnLeft90@mL+1)^0,w,c
  1837   000484  22DA               	addwfc	fsr2h,f,c
  1838   000486  0E01               	movlw	1
  1839   000488  6EDF               	movwf	indf2,c
  1840   00048A                     
  1841                           ;dc_motor.c: 116:     mR->brakemode=1;
  1842   00048A  EE20 F002          	lfsr	2,2
  1843   00048E  501B               	movf	turnLeft90@mR^0,w,c
  1844   000490  26D9               	addwf	fsr2l,f,c
  1845   000492  501C               	movf	(turnLeft90@mR+1)^0,w,c
  1846   000494  22DA               	addwfc	fsr2h,f,c
  1847   000496  0E01               	movlw	1
  1848   000498  6EDF               	movwf	indf2,c
  1849   00049A                     
  1850                           ;dc_motor.c: 117:     mL->direction = 0;
  1851   00049A  EE20 F001          	lfsr	2,1
  1852   00049E  5019               	movf	turnLeft90@mL^0,w,c
  1853   0004A0  26D9               	addwf	fsr2l,f,c
  1854   0004A2  501A               	movf	(turnLeft90@mL+1)^0,w,c
  1855   0004A4  22DA               	addwfc	fsr2h,f,c
  1856   0004A6  0E00               	movlw	0
  1857   0004A8  6EDF               	movwf	indf2,c
  1858   0004AA                     
  1859                           ;dc_motor.c: 118:     mR->direction = 1;
  1860   0004AA  EE20 F001          	lfsr	2,1
  1861   0004AE  501B               	movf	turnLeft90@mR^0,w,c
  1862   0004B0  26D9               	addwf	fsr2l,f,c
  1863   0004B2  501C               	movf	(turnLeft90@mR+1)^0,w,c
  1864   0004B4  22DA               	addwfc	fsr2h,f,c
  1865   0004B6  0E01               	movlw	1
  1866   0004B8  6EDF               	movwf	indf2,c
  1867   0004BA                     
  1868                           ;dc_motor.c: 120:     int setpower = 50;
  1869   0004BA  0E00               	movlw	0
  1870   0004BC  6E20               	movwf	(turnLeft90@setpower+1)^0,c
  1871   0004BE  0E32               	movlw	50
  1872   0004C0  6E1F               	movwf	turnLeft90@setpower^0,c
  1873   0004C2                     
  1874                           ;dc_motor.c: 121:     mL->power = 20;
  1875   0004C2  C019  FFD9         	movff	turnLeft90@mL,fsr2l
  1876   0004C6  C01A  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1877   0004CA  0E14               	movlw	20
  1878   0004CC  6EDF               	movwf	indf2,c
  1879   0004CE                     
  1880                           ;dc_motor.c: 122:     mR->power = 20;
  1881   0004CE  C01B  FFD9         	movff	turnLeft90@mR,fsr2l
  1882   0004D2  C01C  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1883   0004D6  0E14               	movlw	20
  1884   0004D8  6EDF               	movwf	indf2,c
  1885                           
  1886                           ;dc_motor.c: 124:     while (mL->power != setpower || mR->power != setpower ) {
  1887   0004DA  EF91  F002         	goto	l1623
  1888   0004DE                     l1613:
  1889                           
  1890                           ;dc_motor.c: 125:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1891   0004DE  0E09               	movlw	9
  1892   0004E0  6E1E               	movwf	(??_turnLeft90+1)^0,c
  1893   0004E2  0E1E               	movlw	30
  1894   0004E4  6E1D               	movwf	??_turnLeft90^0,c
  1895   0004E6  0EE4               	movlw	228
  1896   0004E8                     u767:
  1897   0004E8  2EE8               	decfsz	wreg,f,c
  1898   0004EA  D7FE               	bra	u767
  1899   0004EC  2E1D               	decfsz	??_turnLeft90^0,f,c
  1900   0004EE  D7FC               	bra	u767
  1901   0004F0  2E1E               	decfsz	(??_turnLeft90+1)^0,f,c
  1902   0004F2  D7FA               	bra	u767
  1903   0004F4  D000               	nop2	
  1904   0004F6                     
  1905                           ;dc_motor.c: 126:         mL->power++;
  1906   0004F6  C019  FFD9         	movff	turnLeft90@mL,fsr2l
  1907   0004FA  C01A  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1908   0004FE  2ADF               	incf	indf2,f,c
  1909   000500                     
  1910                           ;dc_motor.c: 127:         mR->power++;
  1911   000500  C01B  FFD9         	movff	turnLeft90@mR,fsr2l
  1912   000504  C01C  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1913   000508  2ADF               	incf	indf2,f,c
  1914   00050A                     
  1915                           ;dc_motor.c: 128:         setMotorPWM(mL);
  1916   00050A  C019  F00E         	movff	turnLeft90@mL,setMotorPWM@m
  1917   00050E  C01A  F00F         	movff	turnLeft90@mL+1,setMotorPWM@m+1
  1918   000512  EC7D  F001         	call	_setMotorPWM	;wreg free
  1919   000516                     
  1920                           ;dc_motor.c: 129:         setMotorPWM(mR);
  1921   000516  C01B  F00E         	movff	turnLeft90@mR,setMotorPWM@m
  1922   00051A  C01C  F00F         	movff	turnLeft90@mR+1,setMotorPWM@m+1
  1923   00051E  EC7D  F001         	call	_setMotorPWM	;wreg free
  1924   000522                     l1623:
  1925                           
  1926                           ;dc_motor.c: 124:     while (mL->power != setpower || mR->power != setpower ) {
  1927   000522  C019  FFD9         	movff	turnLeft90@mL,fsr2l
  1928   000526  C01A  FFDA         	movff	turnLeft90@mL+1,fsr2h
  1929   00052A  50DF               	movf	indf2,w,c
  1930   00052C  6E1D               	movwf	??_turnLeft90^0,c
  1931   00052E  6A1E               	clrf	(??_turnLeft90+1)^0,c
  1932   000530  501F               	movf	turnLeft90@setpower^0,w,c
  1933   000532  181D               	xorwf	??_turnLeft90^0,w,c
  1934   000534  E107               	bnz	u461
  1935   000536  5020               	movf	(turnLeft90@setpower+1)^0,w,c
  1936   000538  181E               	xorwf	(??_turnLeft90+1)^0,w,c
  1937   00053A  A4D8               	btfss	status,2,c
  1938   00053C  EFA2  F002         	goto	u461
  1939   000540  EFA4  F002         	goto	u460
  1940   000544                     u461:
  1941   000544  EF6F  F002         	goto	l1613
  1942   000548                     u460:
  1943   000548  C01B  FFD9         	movff	turnLeft90@mR,fsr2l
  1944   00054C  C01C  FFDA         	movff	turnLeft90@mR+1,fsr2h
  1945   000550  50DF               	movf	indf2,w,c
  1946   000552  6E1D               	movwf	??_turnLeft90^0,c
  1947   000554  6A1E               	clrf	(??_turnLeft90+1)^0,c
  1948   000556  501F               	movf	turnLeft90@setpower^0,w,c
  1949   000558  181D               	xorwf	??_turnLeft90^0,w,c
  1950   00055A  E107               	bnz	u471
  1951   00055C  5020               	movf	(turnLeft90@setpower+1)^0,w,c
  1952   00055E  181E               	xorwf	(??_turnLeft90+1)^0,w,c
  1953   000560  A4D8               	btfss	status,2,c
  1954   000562  EFB5  F002         	goto	u471
  1955   000566  EFB7  F002         	goto	u470
  1956   00056A                     u471:
  1957   00056A  EF6F  F002         	goto	l1613
  1958   00056E                     u470:
  1959   00056E                     
  1960                           ;dc_motor.c: 131:     setMotorPWM(mL);
  1961   00056E  C019  F00E         	movff	turnLeft90@mL,setMotorPWM@m
  1962   000572  C01A  F00F         	movff	turnLeft90@mL+1,setMotorPWM@m+1
  1963   000576  EC7D  F001         	call	_setMotorPWM	;wreg free
  1964                           
  1965                           ;dc_motor.c: 132:     setMotorPWM(mR);
  1966   00057A  C01B  F00E         	movff	turnLeft90@mR,setMotorPWM@m
  1967   00057E  C01C  F00F         	movff	turnLeft90@mR+1,setMotorPWM@m+1
  1968   000582  EC7D  F001         	call	_setMotorPWM	;wreg free
  1969   000586  0012               	return		;funcret
  1970   000588                     __end_of_turnLeft90:
  1971                           	callstack 0
  1972                           
  1973 ;; *************** function _turnLeft135 *****************
  1974 ;; Defined at:
  1975 ;;		line 161 in file "dc_motor.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  1978 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  1979 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  1980 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  setpower        2   30[COMRAM] int 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1992 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1995 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1996 ;;Total ram usage:        8 bytes
  1997 ;; Hardware stack levels used: 1
  1998 ;; Hardware stack levels required when called: 4
  1999 ;; This function calls:
  2000 ;;		_setMotorPWM
  2001 ;;		_stop
  2002 ;; This function is called by:
  2003 ;;		_returnstep
  2004 ;;		_main
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text10
  2009   000588                     __ptext10:
  2010                           	callstack 0
  2011   000588                     _turnLeft135:
  2012                           	callstack 26
  2013   000588                     
  2014                           ;dc_motor.c: 161: void turnLeft135(DC_motor *mL, DC_motor *mR);dc_motor.c: 162: {;dc_mot
      +                          or.c: 163:     stop(mL, mR);
  2015   000588  C019  F014         	movff	turnLeft135@mL,stop@mL
  2016   00058C  C01A  F015         	movff	turnLeft135@mL+1,stop@mL+1
  2017   000590  C01B  F016         	movff	turnLeft135@mR,stop@mR
  2018   000594  C01C  F017         	movff	turnLeft135@mR+1,stop@mR+1
  2019   000598  EC25  F006         	call	_stop	;wreg free
  2020   00059C                     
  2021                           ;dc_motor.c: 165:     mL->brakemode=1;
  2022   00059C  EE20 F002          	lfsr	2,2
  2023   0005A0  5019               	movf	turnLeft135@mL^0,w,c
  2024   0005A2  26D9               	addwf	fsr2l,f,c
  2025   0005A4  501A               	movf	(turnLeft135@mL+1)^0,w,c
  2026   0005A6  22DA               	addwfc	fsr2h,f,c
  2027   0005A8  0E01               	movlw	1
  2028   0005AA  6EDF               	movwf	indf2,c
  2029   0005AC                     
  2030                           ;dc_motor.c: 166:     mR->brakemode=1;
  2031   0005AC  EE20 F002          	lfsr	2,2
  2032   0005B0  501B               	movf	turnLeft135@mR^0,w,c
  2033   0005B2  26D9               	addwf	fsr2l,f,c
  2034   0005B4  501C               	movf	(turnLeft135@mR+1)^0,w,c
  2035   0005B6  22DA               	addwfc	fsr2h,f,c
  2036   0005B8  0E01               	movlw	1
  2037   0005BA  6EDF               	movwf	indf2,c
  2038   0005BC                     
  2039                           ;dc_motor.c: 168:     mL->direction = 0;
  2040   0005BC  EE20 F001          	lfsr	2,1
  2041   0005C0  5019               	movf	turnLeft135@mL^0,w,c
  2042   0005C2  26D9               	addwf	fsr2l,f,c
  2043   0005C4  501A               	movf	(turnLeft135@mL+1)^0,w,c
  2044   0005C6  22DA               	addwfc	fsr2h,f,c
  2045   0005C8  0E00               	movlw	0
  2046   0005CA  6EDF               	movwf	indf2,c
  2047   0005CC                     
  2048                           ;dc_motor.c: 169:     mR->direction = 1;
  2049   0005CC  EE20 F001          	lfsr	2,1
  2050   0005D0  501B               	movf	turnLeft135@mR^0,w,c
  2051   0005D2  26D9               	addwf	fsr2l,f,c
  2052   0005D4  501C               	movf	(turnLeft135@mR+1)^0,w,c
  2053   0005D6  22DA               	addwfc	fsr2h,f,c
  2054   0005D8  0E01               	movlw	1
  2055   0005DA  6EDF               	movwf	indf2,c
  2056   0005DC                     
  2057                           ;dc_motor.c: 171:     int setpower = 50;
  2058   0005DC  0E00               	movlw	0
  2059   0005DE  6E20               	movwf	(turnLeft135@setpower+1)^0,c
  2060   0005E0  0E32               	movlw	50
  2061   0005E2  6E1F               	movwf	turnLeft135@setpower^0,c
  2062   0005E4                     
  2063                           ;dc_motor.c: 173:     mL->power = 20;
  2064   0005E4  C019  FFD9         	movff	turnLeft135@mL,fsr2l
  2065   0005E8  C01A  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2066   0005EC  0E14               	movlw	20
  2067   0005EE  6EDF               	movwf	indf2,c
  2068   0005F0                     
  2069                           ;dc_motor.c: 174:     mR->power = 20;
  2070   0005F0  C01B  FFD9         	movff	turnLeft135@mR,fsr2l
  2071   0005F4  C01C  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2072   0005F8  0E14               	movlw	20
  2073   0005FA  6EDF               	movwf	indf2,c
  2074                           
  2075                           ;dc_motor.c: 176:     while (mL->power != setpower || mR->power != setpower ) {
  2076   0005FC  EF22  F003         	goto	l1685
  2077   000600                     l1675:
  2078                           
  2079                           ;dc_motor.c: 177:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2080   000600  0E09               	movlw	9
  2081   000602  6E1E               	movwf	(??_turnLeft135+1)^0,c
  2082   000604  0E1E               	movlw	30
  2083   000606  6E1D               	movwf	??_turnLeft135^0,c
  2084   000608  0EE4               	movlw	228
  2085   00060A                     u777:
  2086   00060A  2EE8               	decfsz	wreg,f,c
  2087   00060C  D7FE               	bra	u777
  2088   00060E  2E1D               	decfsz	??_turnLeft135^0,f,c
  2089   000610  D7FC               	bra	u777
  2090   000612  2E1E               	decfsz	(??_turnLeft135+1)^0,f,c
  2091   000614  D7FA               	bra	u777
  2092   000616  D000               	nop2	
  2093   000618                     
  2094                           ;dc_motor.c: 178:         mL->power++;
  2095   000618  C019  FFD9         	movff	turnLeft135@mL,fsr2l
  2096   00061C  C01A  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2097   000620  2ADF               	incf	indf2,f,c
  2098   000622                     
  2099                           ;dc_motor.c: 179:         mR->power++;
  2100   000622  C01B  FFD9         	movff	turnLeft135@mR,fsr2l
  2101   000626  C01C  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2102   00062A  2ADF               	incf	indf2,f,c
  2103   00062C                     
  2104                           ;dc_motor.c: 180:         setMotorPWM(mL);
  2105   00062C  C019  F00E         	movff	turnLeft135@mL,setMotorPWM@m
  2106   000630  C01A  F00F         	movff	turnLeft135@mL+1,setMotorPWM@m+1
  2107   000634  EC7D  F001         	call	_setMotorPWM	;wreg free
  2108   000638                     
  2109                           ;dc_motor.c: 181:         setMotorPWM(mR);
  2110   000638  C01B  F00E         	movff	turnLeft135@mR,setMotorPWM@m
  2111   00063C  C01C  F00F         	movff	turnLeft135@mR+1,setMotorPWM@m+1
  2112   000640  EC7D  F001         	call	_setMotorPWM	;wreg free
  2113   000644                     l1685:
  2114                           
  2115                           ;dc_motor.c: 176:     while (mL->power != setpower || mR->power != setpower ) {
  2116   000644  C019  FFD9         	movff	turnLeft135@mL,fsr2l
  2117   000648  C01A  FFDA         	movff	turnLeft135@mL+1,fsr2h
  2118   00064C  50DF               	movf	indf2,w,c
  2119   00064E  6E1D               	movwf	??_turnLeft135^0,c
  2120   000650  6A1E               	clrf	(??_turnLeft135+1)^0,c
  2121   000652  501F               	movf	turnLeft135@setpower^0,w,c
  2122   000654  181D               	xorwf	??_turnLeft135^0,w,c
  2123   000656  E107               	bnz	u501
  2124   000658  5020               	movf	(turnLeft135@setpower+1)^0,w,c
  2125   00065A  181E               	xorwf	(??_turnLeft135+1)^0,w,c
  2126   00065C  A4D8               	btfss	status,2,c
  2127   00065E  EF33  F003         	goto	u501
  2128   000662  EF35  F003         	goto	u500
  2129   000666                     u501:
  2130   000666  EF00  F003         	goto	l1675
  2131   00066A                     u500:
  2132   00066A  C01B  FFD9         	movff	turnLeft135@mR,fsr2l
  2133   00066E  C01C  FFDA         	movff	turnLeft135@mR+1,fsr2h
  2134   000672  50DF               	movf	indf2,w,c
  2135   000674  6E1D               	movwf	??_turnLeft135^0,c
  2136   000676  6A1E               	clrf	(??_turnLeft135+1)^0,c
  2137   000678  501F               	movf	turnLeft135@setpower^0,w,c
  2138   00067A  181D               	xorwf	??_turnLeft135^0,w,c
  2139   00067C  E107               	bnz	u511
  2140   00067E  5020               	movf	(turnLeft135@setpower+1)^0,w,c
  2141   000680  181E               	xorwf	(??_turnLeft135+1)^0,w,c
  2142   000682  A4D8               	btfss	status,2,c
  2143   000684  EF46  F003         	goto	u511
  2144   000688  EF48  F003         	goto	u510
  2145   00068C                     u511:
  2146   00068C  EF00  F003         	goto	l1675
  2147   000690                     u510:
  2148   000690                     
  2149                           ;dc_motor.c: 184:     setMotorPWM(mL);
  2150   000690  C019  F00E         	movff	turnLeft135@mL,setMotorPWM@m
  2151   000694  C01A  F00F         	movff	turnLeft135@mL+1,setMotorPWM@m+1
  2152   000698  EC7D  F001         	call	_setMotorPWM	;wreg free
  2153                           
  2154                           ;dc_motor.c: 185:     setMotorPWM(mR);
  2155   00069C  C01B  F00E         	movff	turnLeft135@mR,setMotorPWM@m
  2156   0006A0  C01C  F00F         	movff	turnLeft135@mR+1,setMotorPWM@m+1
  2157   0006A4  EC7D  F001         	call	_setMotorPWM	;wreg free
  2158   0006A8  0012               	return		;funcret
  2159   0006AA                     __end_of_turnLeft135:
  2160                           	callstack 0
  2161                           
  2162 ;; *************** function _turn180 *****************
  2163 ;; Defined at:
  2164 ;;		line 212 in file "dc_motor.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  2167 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  2168 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  2169 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  setpower        2   30[COMRAM] int 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2181 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;Total ram usage:        8 bytes
  2186 ;; Hardware stack levels used: 1
  2187 ;; Hardware stack levels required when called: 4
  2188 ;; This function calls:
  2189 ;;		_setMotorPWM
  2190 ;;		_stop
  2191 ;; This function is called by:
  2192 ;;		_returnstep
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text11
  2198   0008BE                     __ptext11:
  2199                           	callstack 0
  2200   0008BE                     _turn180:
  2201                           	callstack 26
  2202   0008BE                     
  2203                           ;dc_motor.c: 212: void turn180(DC_motor *mL, DC_motor *mR);dc_motor.c: 213: {;dc_motor.c
      +                          : 214:     stop(mL, mR);
  2204   0008BE  C019  F014         	movff	turn180@mL,stop@mL
  2205   0008C2  C01A  F015         	movff	turn180@mL+1,stop@mL+1
  2206   0008C6  C01B  F016         	movff	turn180@mR,stop@mR
  2207   0008CA  C01C  F017         	movff	turn180@mR+1,stop@mR+1
  2208   0008CE  EC25  F006         	call	_stop	;wreg free
  2209   0008D2                     
  2210                           ;dc_motor.c: 215:     mL->brakemode=1;
  2211   0008D2  EE20 F002          	lfsr	2,2
  2212   0008D6  5019               	movf	turn180@mL^0,w,c
  2213   0008D8  26D9               	addwf	fsr2l,f,c
  2214   0008DA  501A               	movf	(turn180@mL+1)^0,w,c
  2215   0008DC  22DA               	addwfc	fsr2h,f,c
  2216   0008DE  0E01               	movlw	1
  2217   0008E0  6EDF               	movwf	indf2,c
  2218   0008E2                     
  2219                           ;dc_motor.c: 216:     mR->brakemode=1;
  2220   0008E2  EE20 F002          	lfsr	2,2
  2221   0008E6  501B               	movf	turn180@mR^0,w,c
  2222   0008E8  26D9               	addwf	fsr2l,f,c
  2223   0008EA  501C               	movf	(turn180@mR+1)^0,w,c
  2224   0008EC  22DA               	addwfc	fsr2h,f,c
  2225   0008EE  0E01               	movlw	1
  2226   0008F0  6EDF               	movwf	indf2,c
  2227   0008F2                     
  2228                           ;dc_motor.c: 217:     mL->direction = 1;
  2229   0008F2  EE20 F001          	lfsr	2,1
  2230   0008F6  5019               	movf	turn180@mL^0,w,c
  2231   0008F8  26D9               	addwf	fsr2l,f,c
  2232   0008FA  501A               	movf	(turn180@mL+1)^0,w,c
  2233   0008FC  22DA               	addwfc	fsr2h,f,c
  2234   0008FE  0E01               	movlw	1
  2235   000900  6EDF               	movwf	indf2,c
  2236   000902                     
  2237                           ;dc_motor.c: 218:     mR->direction = 0;
  2238   000902  EE20 F001          	lfsr	2,1
  2239   000906  501B               	movf	turn180@mR^0,w,c
  2240   000908  26D9               	addwf	fsr2l,f,c
  2241   00090A  501C               	movf	(turn180@mR+1)^0,w,c
  2242   00090C  22DA               	addwfc	fsr2h,f,c
  2243   00090E  0E00               	movlw	0
  2244   000910  6EDF               	movwf	indf2,c
  2245   000912                     
  2246                           ;dc_motor.c: 220:     int setpower = 50;
  2247   000912  0E00               	movlw	0
  2248   000914  6E20               	movwf	(turn180@setpower+1)^0,c
  2249   000916  0E32               	movlw	50
  2250   000918  6E1F               	movwf	turn180@setpower^0,c
  2251   00091A                     
  2252                           ;dc_motor.c: 221:     mL->power = 20;
  2253   00091A  C019  FFD9         	movff	turn180@mL,fsr2l
  2254   00091E  C01A  FFDA         	movff	turn180@mL+1,fsr2h
  2255   000922  0E14               	movlw	20
  2256   000924  6EDF               	movwf	indf2,c
  2257   000926                     
  2258                           ;dc_motor.c: 222:     mR->power = 20;
  2259   000926  C01B  FFD9         	movff	turn180@mR,fsr2l
  2260   00092A  C01C  FFDA         	movff	turn180@mR+1,fsr2h
  2261   00092E  0E14               	movlw	20
  2262   000930  6EDF               	movwf	indf2,c
  2263                           
  2264                           ;dc_motor.c: 224:     while (mL->power != setpower || mR->power != setpower ) {
  2265   000932  EFBD  F004         	goto	l1747
  2266   000936                     l1737:
  2267                           
  2268                           ;dc_motor.c: 225:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2269   000936  0E09               	movlw	9
  2270   000938  6E1E               	movwf	(??_turn180+1)^0,c
  2271   00093A  0E1E               	movlw	30
  2272   00093C  6E1D               	movwf	??_turn180^0,c
  2273   00093E  0EE4               	movlw	228
  2274   000940                     u787:
  2275   000940  2EE8               	decfsz	wreg,f,c
  2276   000942  D7FE               	bra	u787
  2277   000944  2E1D               	decfsz	??_turn180^0,f,c
  2278   000946  D7FC               	bra	u787
  2279   000948  2E1E               	decfsz	(??_turn180+1)^0,f,c
  2280   00094A  D7FA               	bra	u787
  2281   00094C  D000               	nop2	
  2282   00094E                     
  2283                           ;dc_motor.c: 226:         mL->power++;
  2284   00094E  C019  FFD9         	movff	turn180@mL,fsr2l
  2285   000952  C01A  FFDA         	movff	turn180@mL+1,fsr2h
  2286   000956  2ADF               	incf	indf2,f,c
  2287   000958                     
  2288                           ;dc_motor.c: 227:         mR->power++;
  2289   000958  C01B  FFD9         	movff	turn180@mR,fsr2l
  2290   00095C  C01C  FFDA         	movff	turn180@mR+1,fsr2h
  2291   000960  2ADF               	incf	indf2,f,c
  2292   000962                     
  2293                           ;dc_motor.c: 228:         setMotorPWM(mL);
  2294   000962  C019  F00E         	movff	turn180@mL,setMotorPWM@m
  2295   000966  C01A  F00F         	movff	turn180@mL+1,setMotorPWM@m+1
  2296   00096A  EC7D  F001         	call	_setMotorPWM	;wreg free
  2297   00096E                     
  2298                           ;dc_motor.c: 229:         setMotorPWM(mR);
  2299   00096E  C01B  F00E         	movff	turn180@mR,setMotorPWM@m
  2300   000972  C01C  F00F         	movff	turn180@mR+1,setMotorPWM@m+1
  2301   000976  EC7D  F001         	call	_setMotorPWM	;wreg free
  2302   00097A                     l1747:
  2303                           
  2304                           ;dc_motor.c: 224:     while (mL->power != setpower || mR->power != setpower ) {
  2305   00097A  C019  FFD9         	movff	turn180@mL,fsr2l
  2306   00097E  C01A  FFDA         	movff	turn180@mL+1,fsr2h
  2307   000982  50DF               	movf	indf2,w,c
  2308   000984  6E1D               	movwf	??_turn180^0,c
  2309   000986  6A1E               	clrf	(??_turn180+1)^0,c
  2310   000988  501F               	movf	turn180@setpower^0,w,c
  2311   00098A  181D               	xorwf	??_turn180^0,w,c
  2312   00098C  E107               	bnz	u541
  2313   00098E  5020               	movf	(turn180@setpower+1)^0,w,c
  2314   000990  181E               	xorwf	(??_turn180+1)^0,w,c
  2315   000992  A4D8               	btfss	status,2,c
  2316   000994  EFCE  F004         	goto	u541
  2317   000998  EFD0  F004         	goto	u540
  2318   00099C                     u541:
  2319   00099C  EF9B  F004         	goto	l1737
  2320   0009A0                     u540:
  2321   0009A0  C01B  FFD9         	movff	turn180@mR,fsr2l
  2322   0009A4  C01C  FFDA         	movff	turn180@mR+1,fsr2h
  2323   0009A8  50DF               	movf	indf2,w,c
  2324   0009AA  6E1D               	movwf	??_turn180^0,c
  2325   0009AC  6A1E               	clrf	(??_turn180+1)^0,c
  2326   0009AE  501F               	movf	turn180@setpower^0,w,c
  2327   0009B0  181D               	xorwf	??_turn180^0,w,c
  2328   0009B2  E107               	bnz	u551
  2329   0009B4  5020               	movf	(turn180@setpower+1)^0,w,c
  2330   0009B6  181E               	xorwf	(??_turn180+1)^0,w,c
  2331   0009B8  A4D8               	btfss	status,2,c
  2332   0009BA  EFE1  F004         	goto	u551
  2333   0009BE  EFE3  F004         	goto	u550
  2334   0009C2                     u551:
  2335   0009C2  EF9B  F004         	goto	l1737
  2336   0009C6                     u550:
  2337   0009C6  0012               	return		;funcret
  2338   0009C8                     __end_of_turn180:
  2339                           	callstack 0
  2340                           
  2341 ;; *************** function _stop *****************
  2342 ;; Defined at:
  2343 ;;		line 96 in file "dc_motor.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2346 ;;		 -> main@motorL(9), returnstep@motorL(9), 
  2347 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2348 ;;		 -> main@motorR(9), returnstep@motorR(9), 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;		None
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;Total ram usage:        5 bytes
  2365 ;; Hardware stack levels used: 1
  2366 ;; Hardware stack levels required when called: 3
  2367 ;; This function calls:
  2368 ;;		_setMotorPWM
  2369 ;; This function is called by:
  2370 ;;		_turnLeft90
  2371 ;;		_turnRight90
  2372 ;;		_turnLeft135
  2373 ;;		_turnRight135
  2374 ;;		_turn180
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text12
  2379   000C4A                     __ptext12:
  2380                           	callstack 0
  2381   000C4A                     _stop:
  2382                           	callstack 26
  2383   000C4A                     
  2384                           ;dc_motor.c: 96: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 97: {;dc_motor.c: 98:
      +                               mL->brakemode=1;
  2385   000C4A  EE20 F002          	lfsr	2,2
  2386   000C4E  5014               	movf	stop@mL^0,w,c
  2387   000C50  26D9               	addwf	fsr2l,f,c
  2388   000C52  5015               	movf	(stop@mL+1)^0,w,c
  2389   000C54  22DA               	addwfc	fsr2h,f,c
  2390   000C56  0E01               	movlw	1
  2391   000C58  6EDF               	movwf	indf2,c
  2392                           
  2393                           ;dc_motor.c: 99:     mR->brakemode=1;
  2394   000C5A  EE20 F002          	lfsr	2,2
  2395   000C5E  5016               	movf	stop@mR^0,w,c
  2396   000C60  26D9               	addwf	fsr2l,f,c
  2397   000C62  5017               	movf	(stop@mR+1)^0,w,c
  2398   000C64  22DA               	addwfc	fsr2h,f,c
  2399   000C66  0E01               	movlw	1
  2400   000C68  6EDF               	movwf	indf2,c
  2401                           
  2402                           ;dc_motor.c: 101:     while (mL->power != 0 && mR->power != 0) {
  2403   000C6A  EF55  F006         	goto	l1581
  2404   000C6E                     l1573:
  2405                           
  2406                           ;dc_motor.c: 102:     mL->power--;
  2407   000C6E  C014  FFD9         	movff	stop@mL,fsr2l
  2408   000C72  C015  FFDA         	movff	stop@mL+1,fsr2h
  2409   000C76  06DF               	decf	indf2,f,c
  2410                           
  2411                           ;dc_motor.c: 103:     mR->power--;
  2412   000C78  C016  FFD9         	movff	stop@mR,fsr2l
  2413   000C7C  C017  FFDA         	movff	stop@mR+1,fsr2h
  2414   000C80  06DF               	decf	indf2,f,c
  2415   000C82                     
  2416                           ;dc_motor.c: 104:     _delay((unsigned long)((1)*(64000000/4000.0)));
  2417   000C82  0E15               	movlw	21
  2418   000C84  6E18               	movwf	??_stop^0,c
  2419   000C86  0EC6               	movlw	198
  2420   000C88                     u797:
  2421   000C88  2EE8               	decfsz	wreg,f,c
  2422   000C8A  D7FE               	bra	u797
  2423   000C8C  2E18               	decfsz	??_stop^0,f,c
  2424   000C8E  D7FC               	bra	u797
  2425   000C90  D000               	nop2	
  2426   000C92                     
  2427                           ;dc_motor.c: 105:     setMotorPWM(mL);
  2428   000C92  C014  F00E         	movff	stop@mL,setMotorPWM@m
  2429   000C96  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  2430   000C9A  EC7D  F001         	call	_setMotorPWM	;wreg free
  2431   000C9E                     
  2432                           ;dc_motor.c: 106:     setMotorPWM(mR);
  2433   000C9E  C016  F00E         	movff	stop@mR,setMotorPWM@m
  2434   000CA2  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  2435   000CA6  EC7D  F001         	call	_setMotorPWM	;wreg free
  2436   000CAA                     l1581:
  2437                           
  2438                           ;dc_motor.c: 101:     while (mL->power != 0 && mR->power != 0) {
  2439   000CAA  C014  FFD9         	movff	stop@mL,fsr2l
  2440   000CAE  C015  FFDA         	movff	stop@mL+1,fsr2h
  2441   000CB2  50DF               	movf	indf2,w,c
  2442   000CB4  B4D8               	btfsc	status,2,c
  2443   000CB6  EF5F  F006         	goto	u441
  2444   000CBA  EF61  F006         	goto	u440
  2445   000CBE                     u441:
  2446   000CBE  EF6D  F006         	goto	l153
  2447   000CC2                     u440:
  2448   000CC2  C016  FFD9         	movff	stop@mR,fsr2l
  2449   000CC6  C017  FFDA         	movff	stop@mR+1,fsr2h
  2450   000CCA  50DF               	movf	indf2,w,c
  2451   000CCC  A4D8               	btfss	status,2,c
  2452   000CCE  EF6B  F006         	goto	u451
  2453   000CD2  EF6D  F006         	goto	u450
  2454   000CD6                     u451:
  2455   000CD6  EF37  F006         	goto	l1573
  2456   000CDA                     u450:
  2457   000CDA                     l153:
  2458   000CDA  0012               	return		;funcret
  2459   000CDC                     __end_of_stop:
  2460                           	callstack 0
  2461                           
  2462 ;; *************** function _initDCmotorsPWM *****************
  2463 ;; Defined at:
  2464 ;;		line 6 in file "dc_motor.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2478 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;Total ram usage:        2 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 1
  2485 ;; This function calls:
  2486 ;;		Nothing
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text13
  2493   000CDC                     __ptext13:
  2494                           	callstack 0
  2495   000CDC                     _initDCmotorsPWM:
  2496                           	callstack 29
  2497   000CDC                     
  2498                           ;dc_motor.c: 9:     LATEbits.LATE2 = 0;
  2499   000CDC  947D               	bcf	125,2,c	;volatile
  2500                           
  2501                           ;dc_motor.c: 10:     LATEbits.LATE4 = 0;
  2502   000CDE  987D               	bcf	125,4,c	;volatile
  2503                           
  2504                           ;dc_motor.c: 11:     LATCbits.LATC7 = 0;
  2505   000CE0  9E7B               	bcf	123,7,c	;volatile
  2506                           
  2507                           ;dc_motor.c: 12:     LATGbits.LATG6 = 0;
  2508   000CE2  9C7F               	bcf	127,6,c	;volatile
  2509                           
  2510                           ;dc_motor.c: 14:     TRISEbits.TRISE2 = 0;
  2511   000CE4  9485               	bcf	133,2,c	;volatile
  2512                           
  2513                           ;dc_motor.c: 15:     TRISEbits.TRISE4 = 0;
  2514   000CE6  9885               	bcf	133,4,c	;volatile
  2515                           
  2516                           ;dc_motor.c: 16:     TRISCbits.TRISC7 = 0;
  2517   000CE8  9E83               	bcf	131,7,c	;volatile
  2518                           
  2519                           ;dc_motor.c: 17:     TRISGbits.TRISG6 = 0;
  2520   000CEA  9C87               	bcf	135,6,c	;volatile
  2521   000CEC                     
  2522                           ;dc_motor.c: 20:     RE2PPS=0x05;
  2523   000CEC  0E05               	movlw	5
  2524   000CEE  010E               	movlb	14	; () banked
  2525   000CF0  6F74               	movwf	116,b	;volatile
  2526                           
  2527                           ;dc_motor.c: 21:     RE4PPS=0x06;
  2528   000CF2  0E06               	movlw	6
  2529   000CF4  6F76               	movwf	118,b	;volatile
  2530                           
  2531                           ;dc_motor.c: 22:     RC7PPS=0x07;
  2532   000CF6  0E07               	movlw	7
  2533   000CF8  6F69               	movwf	105,b	;volatile
  2534                           
  2535                           ;dc_motor.c: 23:     RG6PPS=0x08;
  2536   000CFA  0E08               	movlw	8
  2537   000CFC  6F88               	movwf	136,b	;volatile
  2538                           
  2539                           ;dc_motor.c: 32:     T2CONbits.CKPS=011;
  2540   000CFE  50BD               	movf	189,w,c	;volatile
  2541   000D00  0B8F               	andlw	-113
  2542   000D02  0910               	iorlw	16
  2543   000D04  6EBD               	movwf	189,c	;volatile
  2544                           
  2545                           ;dc_motor.c: 33:     T2HLTbits.MODE=0b00000;
  2546   000D06  0EE0               	movlw	-32
  2547   000D08  16BE               	andwf	190,f,c	;volatile
  2548                           
  2549                           ;dc_motor.c: 34:     T2CLKCONbits.CS=0b0001;
  2550   000D0A  50BF               	movf	191,w,c	;volatile
  2551   000D0C  0BF0               	andlw	-16
  2552   000D0E  0901               	iorlw	1
  2553   000D10  6EBF               	movwf	191,c	;volatile
  2554                           
  2555                           ;dc_motor.c: 38:     T2PR=199;
  2556   000D12  0EC7               	movlw	199
  2557   000D14  6EBC               	movwf	188,c	;volatile
  2558   000D16                     
  2559                           ; BSR set to: 14
  2560                           ;dc_motor.c: 39:     T2CONbits.ON=1;
  2561   000D16  8EBD               	bsf	189,7,c	;volatile
  2562                           
  2563                           ;dc_motor.c: 43:     CCPR1H=0;
  2564   000D18  0E00               	movlw	0
  2565   000D1A  6EAA               	movwf	170,c	;volatile
  2566                           
  2567                           ;dc_motor.c: 44:     CCPR2H=0;
  2568   000D1C  0E00               	movlw	0
  2569   000D1E  6EA6               	movwf	166,c	;volatile
  2570                           
  2571                           ;dc_motor.c: 45:     CCPR3H=0;
  2572   000D20  0E00               	movlw	0
  2573   000D22  010F               	movlb	15	; () banked
  2574   000D24  6F25               	movwf	37,b	;volatile
  2575                           
  2576                           ;dc_motor.c: 46:     CCPR4H=0;
  2577   000D26  0E00               	movlw	0
  2578   000D28  6F21               	movwf	33,b	;volatile
  2579                           
  2580                           ;dc_motor.c: 49:     CCPTMRS0bits.C1TSEL=0;
  2581   000D2A  0EFC               	movlw	-4
  2582   000D2C  16AD               	andwf	173,f,c	;volatile
  2583                           
  2584                           ;dc_motor.c: 50:     CCPTMRS0bits.C2TSEL=0;
  2585   000D2E  0EF3               	movlw	-13
  2586   000D30  16AD               	andwf	173,f,c	;volatile
  2587                           
  2588                           ;dc_motor.c: 51:     CCPTMRS0bits.C3TSEL=0;
  2589   000D32  0ECF               	movlw	-49
  2590   000D34  16AD               	andwf	173,f,c	;volatile
  2591                           
  2592                           ;dc_motor.c: 52:     CCPTMRS0bits.C4TSEL=0;
  2593   000D36  0E3F               	movlw	-193
  2594   000D38  16AD               	andwf	173,f,c	;volatile
  2595   000D3A                     
  2596                           ; BSR set to: 15
  2597                           ;dc_motor.c: 55:     CCP1CONbits.FMT=1;
  2598   000D3A  88AB               	bsf	171,4,c	;volatile
  2599                           
  2600                           ;dc_motor.c: 56:     CCP1CONbits.CCP1MODE=0b1100;
  2601   000D3C  50AB               	movf	171,w,c	;volatile
  2602   000D3E  0BF0               	andlw	-16
  2603   000D40  090C               	iorlw	12
  2604   000D42  6EAB               	movwf	171,c	;volatile
  2605   000D44                     
  2606                           ; BSR set to: 15
  2607                           ;dc_motor.c: 57:     CCP1CONbits.EN=1;
  2608   000D44  8EAB               	bsf	171,7,c	;volatile
  2609   000D46                     
  2610                           ; BSR set to: 15
  2611                           ;dc_motor.c: 59:     CCP2CONbits.FMT=1;
  2612   000D46  88A7               	bsf	167,4,c	;volatile
  2613                           
  2614                           ;dc_motor.c: 60:     CCP2CONbits.CCP2MODE=0b1100;
  2615   000D48  50A7               	movf	167,w,c	;volatile
  2616   000D4A  0BF0               	andlw	-16
  2617   000D4C  090C               	iorlw	12
  2618   000D4E  6EA7               	movwf	167,c	;volatile
  2619   000D50                     
  2620                           ; BSR set to: 15
  2621                           ;dc_motor.c: 61:     CCP2CONbits.EN=1;
  2622   000D50  8EA7               	bsf	167,7,c	;volatile
  2623   000D52                     
  2624                           ; BSR set to: 15
  2625                           ;dc_motor.c: 63:     CCP3CONbits.FMT=1;
  2626   000D52  8926               	bsf	38,4,b	;volatile
  2627                           
  2628                           ;dc_motor.c: 64:     CCP3CONbits.CCP3MODE=0b1100;
  2629   000D54  5126               	movf	38,w,b	;volatile
  2630   000D56  0BF0               	andlw	-16
  2631   000D58  090C               	iorlw	12
  2632   000D5A  6F26               	movwf	38,b	;volatile
  2633   000D5C                     
  2634                           ; BSR set to: 15
  2635                           ;dc_motor.c: 65:     CCP3CONbits.EN=1;
  2636   000D5C  8F26               	bsf	38,7,b	;volatile
  2637   000D5E                     
  2638                           ; BSR set to: 15
  2639                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  2640   000D5E  8922               	bsf	34,4,b	;volatile
  2641                           
  2642                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  2643   000D60  5122               	movf	34,w,b	;volatile
  2644   000D62  0BF0               	andlw	-16
  2645   000D64  090C               	iorlw	12
  2646   000D66  6F22               	movwf	34,b	;volatile
  2647   000D68                     
  2648                           ; BSR set to: 15
  2649                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  2650   000D68  8F22               	bsf	34,7,b	;volatile
  2651   000D6A                     
  2652                           ; BSR set to: 15
  2653   000D6A  0012               	return		;funcret
  2654   000D6C                     __end_of_initDCmotorsPWM:
  2655                           	callstack 0
  2656                           
  2657 ;; *************** function _fullSpeedAhead *****************
  2658 ;; Defined at:
  2659 ;;		line 235 in file "dc_motor.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2662 ;;		 -> main@motorL(9), 
  2663 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2664 ;;		 -> main@motorR(9), 
  2665 ;;  dir             1   23[COMRAM] unsigned char 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  setpower        2   26[COMRAM] int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2677 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2680 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2681 ;;Total ram usage:        9 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; Hardware stack levels required when called: 3
  2684 ;; This function calls:
  2685 ;;		_setMotorPWM
  2686 ;; This function is called by:
  2687 ;;		_main
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text14
  2692   000AB4                     __ptext14:
  2693                           	callstack 0
  2694   000AB4                     _fullSpeedAhead:
  2695                           	callstack 27
  2696   000AB4                     
  2697                           ;dc_motor.c: 235: void fullSpeedAhead(DC_motor *mL, DC_motor *mR, char dir);dc_motor.c: 
      +                          236: {;dc_motor.c: 237:     mL->brakemode=1;
  2698   000AB4  EE20 F002          	lfsr	2,2
  2699   000AB8  5014               	movf	fullSpeedAhead@mL^0,w,c
  2700   000ABA  26D9               	addwf	fsr2l,f,c
  2701   000ABC  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2702   000ABE  22DA               	addwfc	fsr2h,f,c
  2703   000AC0  0E01               	movlw	1
  2704   000AC2  6EDF               	movwf	indf2,c
  2705                           
  2706                           ;dc_motor.c: 238:     mR->brakemode=1;
  2707   000AC4  EE20 F002          	lfsr	2,2
  2708   000AC8  5016               	movf	fullSpeedAhead@mR^0,w,c
  2709   000ACA  26D9               	addwf	fsr2l,f,c
  2710   000ACC  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2711   000ACE  22DA               	addwfc	fsr2h,f,c
  2712   000AD0  0E01               	movlw	1
  2713   000AD2  6EDF               	movwf	indf2,c
  2714                           
  2715                           ;dc_motor.c: 239:     mL->direction = dir;
  2716   000AD4  EE20 F001          	lfsr	2,1
  2717   000AD8  5014               	movf	fullSpeedAhead@mL^0,w,c
  2718   000ADA  26D9               	addwf	fsr2l,f,c
  2719   000ADC  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2720   000ADE  22DA               	addwfc	fsr2h,f,c
  2721   000AE0  C018  FFDF         	movff	fullSpeedAhead@dir,indf2
  2722                           
  2723                           ;dc_motor.c: 240:     mR->direction = dir;
  2724   000AE4  EE20 F001          	lfsr	2,1
  2725   000AE8  5016               	movf	fullSpeedAhead@mR^0,w,c
  2726   000AEA  26D9               	addwf	fsr2l,f,c
  2727   000AEC  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2728   000AEE  22DA               	addwfc	fsr2h,f,c
  2729   000AF0  C018  FFDF         	movff	fullSpeedAhead@dir,indf2
  2730   000AF4                     
  2731                           ;dc_motor.c: 244:     int setpower = 50;
  2732   000AF4  0E00               	movlw	0
  2733   000AF6  6E1C               	movwf	(fullSpeedAhead@setpower+1)^0,c
  2734   000AF8  0E32               	movlw	50
  2735   000AFA  6E1B               	movwf	fullSpeedAhead@setpower^0,c
  2736                           
  2737                           ;dc_motor.c: 246:     while (mL->power != setpower || mR->power != setpower ) {
  2738   000AFC  EF9D  F005         	goto	l1835
  2739   000B00                     l1825:
  2740                           
  2741                           ;dc_motor.c: 247:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2742   000B00  0ED0               	movlw	208
  2743   000B02  6E19               	movwf	??_fullSpeedAhead^0,c
  2744   000B04  0ECA               	movlw	202
  2745   000B06                     u807:
  2746   000B06  2EE8               	decfsz	wreg,f,c
  2747   000B08  D7FE               	bra	u807
  2748   000B0A  2E19               	decfsz	??_fullSpeedAhead^0,f,c
  2749   000B0C  D7FC               	bra	u807
  2750   000B0E                     
  2751                           ;dc_motor.c: 248:         mL->power++;
  2752   000B0E  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2753   000B12  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2754   000B16  2ADF               	incf	indf2,f,c
  2755   000B18                     
  2756                           ;dc_motor.c: 249:         mR->power++;
  2757   000B18  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2758   000B1C  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2759   000B20  2ADF               	incf	indf2,f,c
  2760   000B22                     
  2761                           ;dc_motor.c: 250:         setMotorPWM(mL);
  2762   000B22  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2763   000B26  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2764   000B2A  EC7D  F001         	call	_setMotorPWM	;wreg free
  2765   000B2E                     
  2766                           ;dc_motor.c: 251:         setMotorPWM(mR);
  2767   000B2E  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2768   000B32  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2769   000B36  EC7D  F001         	call	_setMotorPWM	;wreg free
  2770   000B3A                     l1835:
  2771                           
  2772                           ;dc_motor.c: 246:     while (mL->power != setpower || mR->power != setpower ) {
  2773   000B3A  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2774   000B3E  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2775   000B42  50DF               	movf	indf2,w,c
  2776   000B44  6E19               	movwf	??_fullSpeedAhead^0,c
  2777   000B46  6A1A               	clrf	(??_fullSpeedAhead+1)^0,c
  2778   000B48  501B               	movf	fullSpeedAhead@setpower^0,w,c
  2779   000B4A  1819               	xorwf	??_fullSpeedAhead^0,w,c
  2780   000B4C  E107               	bnz	u611
  2781   000B4E  501C               	movf	(fullSpeedAhead@setpower+1)^0,w,c
  2782   000B50  181A               	xorwf	(??_fullSpeedAhead+1)^0,w,c
  2783   000B52  A4D8               	btfss	status,2,c
  2784   000B54  EFAE  F005         	goto	u611
  2785   000B58  EFB0  F005         	goto	u610
  2786   000B5C                     u611:
  2787   000B5C  EF80  F005         	goto	l1825
  2788   000B60                     u610:
  2789   000B60  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2790   000B64  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2791   000B68  50DF               	movf	indf2,w,c
  2792   000B6A  6E19               	movwf	??_fullSpeedAhead^0,c
  2793   000B6C  6A1A               	clrf	(??_fullSpeedAhead+1)^0,c
  2794   000B6E  501B               	movf	fullSpeedAhead@setpower^0,w,c
  2795   000B70  1819               	xorwf	??_fullSpeedAhead^0,w,c
  2796   000B72  E107               	bnz	u621
  2797   000B74  501C               	movf	(fullSpeedAhead@setpower+1)^0,w,c
  2798   000B76  181A               	xorwf	(??_fullSpeedAhead+1)^0,w,c
  2799   000B78  A4D8               	btfss	status,2,c
  2800   000B7A  EFC1  F005         	goto	u621
  2801   000B7E  EFC3  F005         	goto	u620
  2802   000B82                     u621:
  2803   000B82  EF80  F005         	goto	l1825
  2804   000B86                     u620:
  2805   000B86  0012               	return		;funcret
  2806   000B88                     __end_of_fullSpeedAhead:
  2807                           	callstack 0
  2808                           
  2809 ;; *************** function _setMotorPWM *****************
  2810 ;; Defined at:
  2811 ;;		line 73 in file "dc_motor.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;  m               2   13[COMRAM] PTR struct DC_motor
  2814 ;;		 -> main@motorL(9), main@motorR(9), returnstep@motorR(9), returnstep@motorL(9), 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;  negDuty         1   18[COMRAM] unsigned char 
  2817 ;;  posDuty         1   17[COMRAM] unsigned char 
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2831 ;;Total ram usage:        6 bytes
  2832 ;; Hardware stack levels used: 1
  2833 ;; Hardware stack levels required when called: 2
  2834 ;; This function calls:
  2835 ;;		___lwdiv
  2836 ;;		___wmul
  2837 ;; This function is called by:
  2838 ;;		_stop
  2839 ;;		_turnLeft90
  2840 ;;		_turnRight90
  2841 ;;		_turnLeft135
  2842 ;;		_turnRight135
  2843 ;;		_turn180
  2844 ;;		_fullSpeedAhead
  2845 ;;		_reversesquare
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text15
  2850   0002FA                     __ptext15:
  2851                           	callstack 0
  2852   0002FA                     _setMotorPWM:
  2853                           	callstack 26
  2854   0002FA                     
  2855                           ;dc_motor.c: 73: void setMotorPWM(DC_motor *m);dc_motor.c: 74: {;dc_motor.c: 75:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 77:     if(m->brakemode) {
  2856   0002FA  EE20 F002          	lfsr	2,2
  2857   0002FE  500E               	movf	setMotorPWM@m^0,w,c
  2858   000300  26D9               	addwf	fsr2l,f,c
  2859   000302  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2860   000304  22DA               	addwfc	fsr2h,f,c
  2861   000306  50DF               	movf	indf2,w,c
  2862   000308  B4D8               	btfsc	status,2,c
  2863   00030A  EF89  F001         	goto	u401
  2864   00030E  EF8B  F001         	goto	u400
  2865   000312                     u401:
  2866   000312  EFBF  F001         	goto	l1557
  2867   000316                     u400:
  2868   000316                     
  2869                           ;dc_motor.c: 78:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  2870   000316  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  2871   00031A  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2872   00031E  50DF               	movf	indf2,w,c
  2873   000320  6E10               	movwf	??_setMotorPWM^0,c
  2874   000322  5010               	movf	??_setMotorPWM^0,w,c
  2875   000324  6E01               	movwf	___wmul@multiplier^0,c
  2876   000326  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2877   000328  EE20 F003          	lfsr	2,3
  2878   00032C  500E               	movf	setMotorPWM@m^0,w,c
  2879   00032E  26D9               	addwf	fsr2l,f,c
  2880   000330  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2881   000332  22DA               	addwfc	fsr2h,f,c
  2882   000334  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2883   000338  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2884   00033C  EC72  F007         	call	___wmul	;wreg free
  2885   000340  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2886   000344  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2887   000348  0E00               	movlw	0
  2888   00034A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2889   00034C  0E64               	movlw	100
  2890   00034E  6E09               	movwf	___lwdiv@divisor^0,c
  2891   000350  ECB6  F006         	call	___lwdiv	;wreg free
  2892   000354  EE20 F003          	lfsr	2,3
  2893   000358  500E               	movf	setMotorPWM@m^0,w,c
  2894   00035A  26D9               	addwf	fsr2l,f,c
  2895   00035C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2896   00035E  22DA               	addwfc	fsr2h,f,c
  2897   000360  50DF               	movf	indf2,w,c
  2898   000362  6E11               	movwf	(??_setMotorPWM+1)^0,c
  2899   000364  5007               	movf	?___lwdiv^0,w,c
  2900   000366  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  2901   000368  6E12               	movwf	setMotorPWM@posDuty^0,c
  2902   00036A                     
  2903                           ;dc_motor.c: 79:         negDuty=m->PWMperiod;
  2904   00036A  EE20 F003          	lfsr	2,3
  2905   00036E  500E               	movf	setMotorPWM@m^0,w,c
  2906   000370  26D9               	addwf	fsr2l,f,c
  2907   000372  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2908   000374  22DA               	addwfc	fsr2h,f,c
  2909   000376  50DF               	movf	indf2,w,c
  2910   000378  6E13               	movwf	setMotorPWM@negDuty^0,c
  2911                           
  2912                           ;dc_motor.c: 80:     }
  2913   00037A  EFE2  F001         	goto	l1561
  2914   00037E                     l1557:
  2915                           
  2916                           ;dc_motor.c: 82:         posDuty=0;
  2917   00037E  0E00               	movlw	0
  2918   000380  6E12               	movwf	setMotorPWM@posDuty^0,c
  2919   000382                     
  2920                           ;dc_motor.c: 83:         negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  2921   000382  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  2922   000386  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2923   00038A  50DF               	movf	indf2,w,c
  2924   00038C  6E10               	movwf	??_setMotorPWM^0,c
  2925   00038E  5010               	movf	??_setMotorPWM^0,w,c
  2926   000390  6E01               	movwf	___wmul@multiplier^0,c
  2927   000392  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2928   000394  EE20 F003          	lfsr	2,3
  2929   000398  500E               	movf	setMotorPWM@m^0,w,c
  2930   00039A  26D9               	addwf	fsr2l,f,c
  2931   00039C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2932   00039E  22DA               	addwfc	fsr2h,f,c
  2933   0003A0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2934   0003A4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2935   0003A8  EC72  F007         	call	___wmul	;wreg free
  2936   0003AC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2937   0003B0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2938   0003B4  0E00               	movlw	0
  2939   0003B6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2940   0003B8  0E64               	movlw	100
  2941   0003BA  6E09               	movwf	___lwdiv@divisor^0,c
  2942   0003BC  ECB6  F006         	call	___lwdiv	;wreg free
  2943   0003C0  5007               	movf	?___lwdiv^0,w,c
  2944   0003C2  6E13               	movwf	setMotorPWM@negDuty^0,c
  2945   0003C4                     l1561:
  2946                           
  2947                           ;dc_motor.c: 86:     if (m->direction) {
  2948   0003C4  EE20 F001          	lfsr	2,1
  2949   0003C8  500E               	movf	setMotorPWM@m^0,w,c
  2950   0003CA  26D9               	addwf	fsr2l,f,c
  2951   0003CC  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2952   0003CE  22DA               	addwfc	fsr2h,f,c
  2953   0003D0  50DF               	movf	indf2,w,c
  2954   0003D2  B4D8               	btfsc	status,2,c
  2955   0003D4  EFEE  F001         	goto	u411
  2956   0003D8  EFF0  F001         	goto	u410
  2957   0003DC                     u411:
  2958   0003DC  EF12  F002         	goto	l1565
  2959   0003E0                     u410:
  2960   0003E0                     
  2961                           ;dc_motor.c: 87:         *(m->posDutyHighByte)=posDuty;
  2962   0003E0  EE20 F005          	lfsr	2,5
  2963   0003E4  500E               	movf	setMotorPWM@m^0,w,c
  2964   0003E6  26D9               	addwf	fsr2l,f,c
  2965   0003E8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2966   0003EA  22DA               	addwfc	fsr2h,f,c
  2967   0003EC  CFDE F010          	movff	postinc2,??_setMotorPWM
  2968   0003F0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2969   0003F4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2970   0003F8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2971   0003FC  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  2972                           
  2973                           ;dc_motor.c: 88:         *(m->negDutyHighByte)=negDuty;
  2974   000400  EE20 F007          	lfsr	2,7
  2975   000404  500E               	movf	setMotorPWM@m^0,w,c
  2976   000406  26D9               	addwf	fsr2l,f,c
  2977   000408  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2978   00040A  22DA               	addwfc	fsr2h,f,c
  2979   00040C  CFDE F010          	movff	postinc2,??_setMotorPWM
  2980   000410  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2981   000414  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2982   000418  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2983   00041C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  2984                           
  2985                           ;dc_motor.c: 89:     } else {
  2986   000420  EF32  F002         	goto	l145
  2987   000424                     l1565:
  2988                           
  2989                           ;dc_motor.c: 90:         *(m->posDutyHighByte)=negDuty;
  2990   000424  EE20 F005          	lfsr	2,5
  2991   000428  500E               	movf	setMotorPWM@m^0,w,c
  2992   00042A  26D9               	addwf	fsr2l,f,c
  2993   00042C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2994   00042E  22DA               	addwfc	fsr2h,f,c
  2995   000430  CFDE F010          	movff	postinc2,??_setMotorPWM
  2996   000434  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2997   000438  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2998   00043C  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2999   000440  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  3000                           
  3001                           ;dc_motor.c: 91:         *(m->negDutyHighByte)=posDuty;
  3002   000444  EE20 F007          	lfsr	2,7
  3003   000448  500E               	movf	setMotorPWM@m^0,w,c
  3004   00044A  26D9               	addwf	fsr2l,f,c
  3005   00044C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3006   00044E  22DA               	addwfc	fsr2h,f,c
  3007   000450  CFDE F010          	movff	postinc2,??_setMotorPWM
  3008   000454  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3009   000458  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3010   00045C  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3011   000460  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  3012   000464                     l145:
  3013   000464  0012               	return		;funcret
  3014   000466                     __end_of_setMotorPWM:
  3015                           	callstack 0
  3016                           
  3017 ;; *************** function ___wmul *****************
  3018 ;; Defined at:
  3019 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  multiplier      2    0[COMRAM] unsigned int 
  3022 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  product         2    4[COMRAM] unsigned int 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  2    0[COMRAM] unsigned int 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, prodl, prodh
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3034 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3037 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3038 ;;Total ram usage:        6 bytes
  3039 ;; Hardware stack levels used: 1
  3040 ;; Hardware stack levels required when called: 1
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_setMotorPWM
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text16
  3049   000EE4                     __ptext16:
  3050                           	callstack 0
  3051   000EE4                     ___wmul:
  3052                           	callstack 26
  3053   000EE4  5001               	movf	___wmul@multiplier^0,w,c
  3054   000EE6  0203               	mulwf	___wmul@multiplicand^0,c
  3055   000EE8  CFF3 F005          	movff	prodl,___wmul@product
  3056   000EEC  CFF4 F006          	movff	prodh,___wmul@product+1
  3057   000EF0  5001               	movf	___wmul@multiplier^0,w,c
  3058   000EF2  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3059   000EF4  50F3               	movf	243,w,c
  3060   000EF6  2606               	addwf	(___wmul@product+1)^0,f,c
  3061   000EF8  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3062   000EFA  0203               	mulwf	___wmul@multiplicand^0,c
  3063   000EFC  50F3               	movf	243,w,c
  3064   000EFE  2606               	addwf	(___wmul@product+1)^0,f,c
  3065   000F00  C005  F001         	movff	___wmul@product,?___wmul
  3066   000F04  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3067   000F08  0012               	return		;funcret
  3068   000F0A                     __end_of___wmul:
  3069                           	callstack 0
  3070                           
  3071 ;; *************** function ___lwdiv *****************
  3072 ;; Defined at:
  3073 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  dividend        2    6[COMRAM] unsigned int 
  3076 ;;  divisor         2    8[COMRAM] unsigned int 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  quotient        2   10[COMRAM] unsigned int 
  3079 ;;  counter         1   12[COMRAM] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  2    6[COMRAM] unsigned int 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3089 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;Total ram usage:        7 bytes
  3094 ;; Hardware stack levels used: 1
  3095 ;; Hardware stack levels required when called: 1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_setMotorPWM
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text17
  3104   000D6C                     __ptext17:
  3105                           	callstack 0
  3106   000D6C                     ___lwdiv:
  3107                           	callstack 26
  3108   000D6C  0E00               	movlw	0
  3109   000D6E  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  3110   000D70  0E00               	movlw	0
  3111   000D72  6E0B               	movwf	___lwdiv@quotient^0,c
  3112   000D74  5009               	movf	___lwdiv@divisor^0,w,c
  3113   000D76  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3114   000D78  B4D8               	btfsc	status,2,c
  3115   000D7A  EFC1  F006         	goto	u371
  3116   000D7E  EFC3  F006         	goto	u370
  3117   000D82                     u371:
  3118   000D82  EFEB  F006         	goto	l823
  3119   000D86                     u370:
  3120   000D86  0E01               	movlw	1
  3121   000D88  6E0D               	movwf	___lwdiv@counter^0,c
  3122   000D8A  EFCB  F006         	goto	l1537
  3123   000D8E                     l1535:
  3124   000D8E  90D8               	bcf	status,0,c
  3125   000D90  3609               	rlcf	___lwdiv@divisor^0,f,c
  3126   000D92  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3127   000D94  2A0D               	incf	___lwdiv@counter^0,f,c
  3128   000D96                     l1537:
  3129   000D96  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  3130   000D98  EFD0  F006         	goto	u381
  3131   000D9C  EFD2  F006         	goto	u380
  3132   000DA0                     u381:
  3133   000DA0  EFC7  F006         	goto	l1535
  3134   000DA4                     u380:
  3135   000DA4                     l1539:
  3136   000DA4  90D8               	bcf	status,0,c
  3137   000DA6  360B               	rlcf	___lwdiv@quotient^0,f,c
  3138   000DA8  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3139   000DAA  5009               	movf	___lwdiv@divisor^0,w,c
  3140   000DAC  5C07               	subwf	___lwdiv@dividend^0,w,c
  3141   000DAE  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3142   000DB0  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3143   000DB2  A0D8               	btfss	status,0,c
  3144   000DB4  EFDE  F006         	goto	u391
  3145   000DB8  EFE0  F006         	goto	u390
  3146   000DBC                     u391:
  3147   000DBC  EFE5  F006         	goto	l1547
  3148   000DC0                     u390:
  3149   000DC0  5009               	movf	___lwdiv@divisor^0,w,c
  3150   000DC2  5E07               	subwf	___lwdiv@dividend^0,f,c
  3151   000DC4  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3152   000DC6  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3153   000DC8  800B               	bsf	___lwdiv@quotient^0,0,c
  3154   000DCA                     l1547:
  3155   000DCA  90D8               	bcf	status,0,c
  3156   000DCC  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3157   000DCE  3209               	rrcf	___lwdiv@divisor^0,f,c
  3158   000DD0  2E0D               	decfsz	___lwdiv@counter^0,f,c
  3159   000DD2  EFD2  F006         	goto	l1539
  3160   000DD6                     l823:
  3161   000DD6  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  3162   000DDA  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3163   000DDE  0012               	return		;funcret
  3164   000DE0                     __end_of___lwdiv:
  3165                           	callstack 0
  3166                           
  3167 ;; *************** function _color_click_init *****************
  3168 ;; Defined at:
  3169 ;;		line 5 in file "color.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		wreg, status,2, status,0, cstack
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3186 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3187 ;;Total ram usage:        1 bytes
  3188 ;; Hardware stack levels used: 1
  3189 ;; Hardware stack levels required when called: 4
  3190 ;; This function calls:
  3191 ;;		_I2C_2_Master_Init
  3192 ;;		_color_writetoaddr
  3193 ;; This function is called by:
  3194 ;;		_main
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text18
  3199   000E36                     __ptext18:
  3200                           	callstack 0
  3201   000E36                     _color_click_init:
  3202                           	callstack 26
  3203   000E36                     
  3204                           ;color.c: 8:     I2C_2_Master_Init();
  3205   000E36  EC35  F007         	call	_I2C_2_Master_Init	;wreg free
  3206   000E3A                     
  3207                           ;color.c: 11:   color_writetoaddr(0x00, 0x01);
  3208   000E3A  0E01               	movlw	1
  3209   000E3C  6E03               	movwf	color_writetoaddr@value^0,c
  3210   000E3E  0E00               	movlw	0
  3211   000E40  EC85  F007         	call	_color_writetoaddr
  3212   000E44                     
  3213                           ;color.c: 12:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3214   000E44  0E3F               	movlw	63
  3215   000E46  6E05               	movwf	??_color_click_init^0,c
  3216   000E48  0E55               	movlw	85
  3217   000E4A                     u817:
  3218   000E4A  2EE8               	decfsz	wreg,f,c
  3219   000E4C  D7FE               	bra	u817
  3220   000E4E  2E05               	decfsz	??_color_click_init^0,f,c
  3221   000E50  D7FC               	bra	u817
  3222   000E52  F000               	nop	
  3223   000E54                     
  3224                           ;color.c: 15:  color_writetoaddr(0x00, 0x03);
  3225   000E54  0E03               	movlw	3
  3226   000E56  6E03               	movwf	color_writetoaddr@value^0,c
  3227   000E58  0E00               	movlw	0
  3228   000E5A  EC85  F007         	call	_color_writetoaddr
  3229   000E5E                     
  3230                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  3231   000E5E  0ED5               	movlw	213
  3232   000E60  6E03               	movwf	color_writetoaddr@value^0,c
  3233   000E62  0E01               	movlw	1
  3234   000E64  EC85  F007         	call	_color_writetoaddr
  3235   000E68  0012               	return		;funcret
  3236   000E6A                     __end_of_color_click_init:
  3237                           	callstack 0
  3238                           
  3239 ;; *************** function _color_writetoaddr *****************
  3240 ;; Defined at:
  3241 ;;		line 21 in file "color.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  address         1    wreg     unsigned char 
  3244 ;;  value           1    2[COMRAM] unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  address         1    3[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3256 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;Total ram usage:        2 bytes
  3261 ;; Hardware stack levels used: 1
  3262 ;; Hardware stack levels required when called: 3
  3263 ;; This function calls:
  3264 ;;		_I2C_2_Master_Start
  3265 ;;		_I2C_2_Master_Stop
  3266 ;;		_I2C_2_Master_Write
  3267 ;; This function is called by:
  3268 ;;		_color_click_init
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text19
  3273   000F0A                     __ptext19:
  3274                           	callstack 0
  3275   000F0A                     _color_writetoaddr:
  3276                           	callstack 26
  3277                           
  3278                           ;incstack = 0
  3279                           ;color_writetoaddr@address stored from wreg
  3280   000F0A  6E04               	movwf	color_writetoaddr@address^0,c
  3281   000F0C                     
  3282                           ;color.c: 22:     I2C_2_Master_Start();
  3283   000F0C  ECD1  F007         	call	_I2C_2_Master_Start	;wreg free
  3284                           
  3285                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  3286   000F10  0E52               	movlw	82
  3287   000F12  ECBB  F007         	call	_I2C_2_Master_Write
  3288                           
  3289                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  3290   000F16  5004               	movf	color_writetoaddr@address^0,w,c
  3291   000F18  0980               	iorlw	128
  3292   000F1A  ECBB  F007         	call	_I2C_2_Master_Write
  3293                           
  3294                           ;color.c: 25:     I2C_2_Master_Write(value);
  3295   000F1E  5003               	movf	color_writetoaddr@value^0,w,c
  3296   000F20  ECBB  F007         	call	_I2C_2_Master_Write
  3297                           
  3298                           ;color.c: 26:     I2C_2_Master_Stop();
  3299   000F24  ECCC  F007         	call	_I2C_2_Master_Stop	;wreg free
  3300   000F28  0012               	return		;funcret
  3301   000F2A                     __end_of_color_writetoaddr:
  3302                           	callstack 0
  3303                           
  3304 ;; *************** function _I2C_2_Master_Write *****************
  3305 ;; Defined at:
  3306 ;;		line 45 in file "i2c.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  data_byte       1    wreg     unsigned char 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  data_byte       1    1[COMRAM] unsigned char 
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg, status,2, status,0, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : 0/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3324 ;;Total ram usage:        1 bytes
  3325 ;; Hardware stack levels used: 1
  3326 ;; Hardware stack levels required when called: 2
  3327 ;; This function calls:
  3328 ;;		_I2C_2_Master_Idle
  3329 ;; This function is called by:
  3330 ;;		_color_writetoaddr
  3331 ;;		_color_read_Red
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text20
  3336   000F76                     __ptext20:
  3337                           	callstack 0
  3338   000F76                     _I2C_2_Master_Write:
  3339                           	callstack 26
  3340                           
  3341                           ;incstack = 0
  3342                           ;I2C_2_Master_Write@data_byte stored from wreg
  3343   000F76  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3344   000F78                     
  3345                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3346   000F78  EC5E  F007         	call	_I2C_2_Master_Idle	;wreg free
  3347   000F7C                     
  3348                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3349   000F7C  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3350   000F80  0012               	return		;funcret
  3351   000F82                     __end_of_I2C_2_Master_Write:
  3352                           	callstack 0
  3353                           
  3354 ;; *************** function _I2C_2_Master_Stop *****************
  3355 ;; Defined at:
  3356 ;;		line 39 in file "i2c.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2, status,0, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3374 ;;Total ram usage:        0 bytes
  3375 ;; Hardware stack levels used: 1
  3376 ;; Hardware stack levels required when called: 2
  3377 ;; This function calls:
  3378 ;;		_I2C_2_Master_Idle
  3379 ;; This function is called by:
  3380 ;;		_color_writetoaddr
  3381 ;;		_color_read_Red
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text21
  3386   000F98                     __ptext21:
  3387                           	callstack 0
  3388   000F98                     _I2C_2_Master_Stop:
  3389                           	callstack 26
  3390   000F98                     
  3391                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3392   000F98  EC5E  F007         	call	_I2C_2_Master_Idle	;wreg free
  3393   000F9C                     
  3394                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  3395   000F9C  010E               	movlb	14	; () banked
  3396   000F9E  85DA               	bsf	218,2,b	;volatile
  3397   000FA0                     
  3398                           ; BSR set to: 14
  3399   000FA0  0012               	return		;funcret
  3400   000FA2                     __end_of_I2C_2_Master_Stop:
  3401                           	callstack 0
  3402                           
  3403 ;; *************** function _I2C_2_Master_Start *****************
  3404 ;; Defined at:
  3405 ;;		line 27 in file "i2c.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3423 ;;Total ram usage:        0 bytes
  3424 ;; Hardware stack levels used: 1
  3425 ;; Hardware stack levels required when called: 2
  3426 ;; This function calls:
  3427 ;;		_I2C_2_Master_Idle
  3428 ;; This function is called by:
  3429 ;;		_color_writetoaddr
  3430 ;;		_color_read_Red
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text22
  3435   000FA2                     __ptext22:
  3436                           	callstack 0
  3437   000FA2                     _I2C_2_Master_Start:
  3438                           	callstack 26
  3439   000FA2                     
  3440                           ;i2c.c: 29:   I2C_2_Master_Idle();
  3441   000FA2  EC5E  F007         	call	_I2C_2_Master_Idle	;wreg free
  3442   000FA6                     
  3443                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  3444   000FA6  010E               	movlb	14	; () banked
  3445   000FA8  81DA               	bsf	218,0,b	;volatile
  3446   000FAA                     
  3447                           ; BSR set to: 14
  3448   000FAA  0012               	return		;funcret
  3449   000FAC                     __end_of_I2C_2_Master_Start:
  3450                           	callstack 0
  3451                           
  3452 ;; *************** function _I2C_2_Master_Idle *****************
  3453 ;; Defined at:
  3454 ;;		line 22 in file "i2c.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;		None
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3472 ;;Total ram usage:        1 bytes
  3473 ;; Hardware stack levels used: 1
  3474 ;; Hardware stack levels required when called: 1
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_I2C_2_Master_Start
  3479 ;;		_I2C_2_Master_Stop
  3480 ;;		_I2C_2_Master_Write
  3481 ;;		_I2C_2_Master_RepStart
  3482 ;;		_I2C_2_Master_Read
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text23
  3487   000EBC                     __ptext23:
  3488                           	callstack 0
  3489   000EBC                     _I2C_2_Master_Idle:
  3490                           	callstack 26
  3491   000EBC                     l55:
  3492   000EBC  010E               	movlb	14	; () banked
  3493   000EBE  B5D8               	btfsc	216,2,b	;volatile
  3494   000EC0  EF64  F007         	goto	u421
  3495   000EC4  EF66  F007         	goto	u420
  3496   000EC8                     u421:
  3497   000EC8  EF5E  F007         	goto	l55
  3498   000ECC                     u420:
  3499   000ECC                     
  3500                           ; BSR set to: 14
  3501   000ECC  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  3502   000ED0  0E1F               	movlw	31
  3503   000ED2  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  3504   000ED4  A4D8               	btfss	status,2,c
  3505   000ED6  EF6F  F007         	goto	u431
  3506   000EDA  EF71  F007         	goto	u430
  3507   000EDE                     u431:
  3508   000EDE  EF5E  F007         	goto	l55
  3509   000EE2                     u430:
  3510   000EE2                     
  3511                           ; BSR set to: 14
  3512   000EE2  0012               	return		;funcret
  3513   000EE4                     __end_of_I2C_2_Master_Idle:
  3514                           	callstack 0
  3515                           
  3516 ;; *************** function _I2C_2_Master_Init *****************
  3517 ;; Defined at:
  3518 ;;		line 4 in file "i2c.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3536 ;;Total ram usage:        0 bytes
  3537 ;; Hardware stack levels used: 1
  3538 ;; Hardware stack levels required when called: 1
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_color_click_init
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text24
  3547   000E6A                     __ptext24:
  3548                           	callstack 0
  3549   000E6A                     _I2C_2_Master_Init:
  3550                           	callstack 28
  3551   000E6A                     
  3552                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3553   000E6A  010E               	movlb	14	; () banked
  3554   000E6C  51D9               	movf	217,w,b	;volatile
  3555   000E6E  0BF0               	andlw	-16
  3556   000E70  0908               	iorlw	8
  3557   000E72  6FD9               	movwf	217,b	;volatile
  3558   000E74                     
  3559                           ; BSR set to: 14
  3560                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  3561   000E74  8BD9               	bsf	217,5,b	;volatile
  3562                           
  3563                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  3564   000E76  0E9F               	movlw	159
  3565   000E78  6FD6               	movwf	214,b	;volatile
  3566   000E7A                     
  3567                           ; BSR set to: 14
  3568                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  3569   000E7A  8A84               	bsf	132,5,c	;volatile
  3570   000E7C                     
  3571                           ; BSR set to: 14
  3572                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  3573   000E7C  8C84               	bsf	132,6,c	;volatile
  3574   000E7E                     
  3575                           ; BSR set to: 14
  3576                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  3577   000E7E  9BA7               	bcf	167,5,b	;volatile
  3578   000E80                     
  3579                           ; BSR set to: 14
  3580                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  3581   000E80  9DA7               	bcf	167,6,b	;volatile
  3582                           
  3583                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  3584   000E82  0E1D               	movlw	29
  3585   000E84  6F1D               	movwf	29,b	;volatile
  3586                           
  3587                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  3588   000E86  0E1E               	movlw	30
  3589   000E88  6F1C               	movwf	28,b	;volatile
  3590                           
  3591                           ;i2c.c: 18:   RD5PPS=0x1C;
  3592   000E8A  0E1C               	movlw	28
  3593   000E8C  6F6F               	movwf	111,b	;volatile
  3594                           
  3595                           ;i2c.c: 19:   RD6PPS=0x1B;
  3596   000E8E  0E1B               	movlw	27
  3597   000E90  6F70               	movwf	112,b	;volatile
  3598   000E92                     
  3599                           ; BSR set to: 14
  3600   000E92  0012               	return		;funcret
  3601   000E94                     __end_of_I2C_2_Master_Init:
  3602                           	callstack 0
  3603                           
  3604 ;; *************** function _Timer0_init *****************
  3605 ;; Defined at:
  3606 ;;		line 20 in file "timer0.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3624 ;;Total ram usage:        0 bytes
  3625 ;; Hardware stack levels used: 1
  3626 ;; Hardware stack levels required when called: 1
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text25
  3635   000F64                     __ptext25:
  3636                           	callstack 0
  3637   000F64                     _Timer0_init:
  3638                           	callstack 29
  3639   000F64                     
  3640                           ;timer0.c: 33:     T0CON1bits.T0CS=0b010;
  3641   000F64  50D6               	movf	214,w,c	;volatile
  3642   000F66  0B1F               	andlw	-225
  3643   000F68  0940               	iorlw	64
  3644   000F6A  6ED6               	movwf	214,c	;volatile
  3645   000F6C                     
  3646                           ;timer0.c: 34:     T0CON1bits.T0ASYNC=1;
  3647   000F6C  88D6               	bsf	214,4,c	;volatile
  3648                           
  3649                           ;timer0.c: 35:     T0CON1bits.T0CKPS=0b0000;
  3650   000F6E  0EF0               	movlw	-16
  3651   000F70  16D6               	andwf	214,f,c	;volatile
  3652   000F72                     
  3653                           ;timer0.c: 36:     T0CON0bits.T016BIT=1;
  3654   000F72  88D5               	bsf	213,4,c	;volatile
  3655   000F74  0012               	return		;funcret
  3656   000F76                     __end_of_Timer0_init:
  3657                           	callstack 0
  3658                           
  3659 ;; *************** function _Interrupts_init *****************
  3660 ;; Defined at:
  3661 ;;		line 8 in file "timer0.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;		None
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;		None
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		None
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3679 ;;Total ram usage:        0 bytes
  3680 ;; Hardware stack levels used: 1
  3681 ;; Hardware stack levels required when called: 1
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_main
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text26
  3690   000F82                     __ptext26:
  3691                           	callstack 0
  3692   000F82                     _Interrupts_init:
  3693                           	callstack 29
  3694   000F82                     
  3695                           ;timer0.c: 10:     PIE0bits.TMR0IE=1;
  3696   000F82  010E               	movlb	14	; () banked
  3697   000F84  8B29               	bsf	41,5,b	;volatile
  3698                           
  3699                           ;timer0.c: 11:     INTCONbits.PEIE=1;
  3700   000F86  8CF2               	bsf	242,6,c	;volatile
  3701                           
  3702                           ;timer0.c: 12:     INTCONbits.IPEN=0;
  3703   000F88  9AF2               	bcf	242,5,c	;volatile
  3704                           
  3705                           ;timer0.c: 13:     INTCONbits.GIE=1;
  3706   000F8A  8EF2               	bsf	242,7,c	;volatile
  3707   000F8C                     
  3708                           ; BSR set to: 14
  3709   000F8C  0012               	return		;funcret
  3710   000F8E                     __end_of_Interrupts_init:
  3711                           	callstack 0
  3712                           
  3713 ;; *************** function _HighISR *****************
  3714 ;; Defined at:
  3715 ;;		line 143 in file "mainfinal.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;		None
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		status,2, status,0
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3733 ;;Total ram usage:        0 bytes
  3734 ;; Hardware stack levels used: 1
  3735 ;; This function calls:
  3736 ;;		Nothing
  3737 ;; This function is called by:
  3738 ;;		Interrupt level 2
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	intcode
  3743   000008                     __pintcode:
  3744                           	callstack 0
  3745   000008                     _HighISR:
  3746                           	callstack 24
  3747                           
  3748                           ; BSR set to: 14
  3749                           ;incstack = 0
  3750   000008  8250               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3751   00000A                     
  3752                           ;mainfinal.c: 145:     if (PIR0bits.TMR0IF)
  3753   00000A  010E               	movlb	14	; () banked
  3754   00000C  AB33               	btfss	51,5,b	;volatile
  3755   00000E  EF0B  F000         	goto	i2u72_41
  3756   000012  EF0D  F000         	goto	i2u72_40
  3757   000016                     i2u72_41:
  3758   000016  EF10  F000         	goto	i2l2023
  3759   00001A                     i2u72_40:
  3760   00001A                     
  3761                           ; BSR set to: 14
  3762                           ;mainfinal.c: 146:     {;mainfinal.c: 147:         timercount++;
  3763   00001A  0101               	movlb	1	; () banked
  3764   00001C  4BDA               	infsnz	_timercount& (0+255),f,b
  3765   00001E  2BDB               	incf	(_timercount+1)& (0+255),f,b
  3766   000020                     i2l2023:
  3767                           
  3768                           ;mainfinal.c: 149:     PIR0bits.TMR0IF=0;
  3769   000020  010E               	movlb	14	; () banked
  3770   000022  9B33               	bcf	51,5,b	;volatile
  3771   000024                     
  3772                           ; BSR set to: 14
  3773   000024  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3774   000026  0011               	retfie		f
  3775   000028                     __end_of_HighISR:
  3776                           	callstack 0
  3777   000000                     
  3778                           	psect	rparam
  3779   000000                     
  3780                           	psect	temp
  3781   000050                     btemp:
  3782                           	callstack 0
  3783   000050                     	ds	1
  3784   000000                     int$flags	set	btemp
  3785   000000                     wtemp8	set	btemp+1
  3786   000000                     ttemp5	set	btemp+1
  3787   000000                     ttemp6	set	btemp+4
  3788   000000                     ttemp7	set	btemp+8
  3789                           
  3790                           	psect	idloc
  3791                           
  3792                           ;Config register IDLOC0 @ 0x200000
  3793                           ;	unspecified, using default values
  3794   200000                     	org	2097152
  3795   200000  0FFF               	dw	4095
  3796                           
  3797                           ;Config register IDLOC1 @ 0x200002
  3798                           ;	unspecified, using default values
  3799   200002                     	org	2097154
  3800   200002  0FFF               	dw	4095
  3801                           
  3802                           ;Config register IDLOC2 @ 0x200004
  3803                           ;	unspecified, using default values
  3804   200004                     	org	2097156
  3805   200004  0FFF               	dw	4095
  3806                           
  3807                           ;Config register IDLOC3 @ 0x200006
  3808                           ;	unspecified, using default values
  3809   200006                     	org	2097158
  3810   200006  0FFF               	dw	4095
  3811                           
  3812                           ;Config register IDLOC4 @ 0x200008
  3813                           ;	unspecified, using default values
  3814   200008                     	org	2097160
  3815   200008  0FFF               	dw	4095
  3816                           
  3817                           ;Config register IDLOC5 @ 0x20000A
  3818                           ;	unspecified, using default values
  3819   20000A                     	org	2097162
  3820   20000A  0FFF               	dw	4095
  3821                           
  3822                           ;Config register IDLOC6 @ 0x20000C
  3823                           ;	unspecified, using default values
  3824   20000C                     	org	2097164
  3825   20000C  0FFF               	dw	4095
  3826                           
  3827                           ;Config register IDLOC7 @ 0x20000E
  3828                           ;	unspecified, using default values
  3829   20000E                     	org	2097166
  3830   20000E  0FFF               	dw	4095
  3831                           
  3832                           	psect	config
  3833                           
  3834                           ;Config register CONFIG1L @ 0x300000
  3835                           ;	External Oscillator mode Selection bits
  3836                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3837                           ;	Power-up default value for COSC bits
  3838                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3839   300000                     	org	3145728
  3840   300000  AA                 	db	170
  3841                           
  3842                           ;Config register CONFIG1H @ 0x300001
  3843                           ;	unspecified, using default values
  3844                           ;	Clock Out Enable bit
  3845                           ;	CLKOUTEN = 0x1, unprogrammed default
  3846                           ;	Clock Switch Enable bit
  3847                           ;	CSWEN = 0x1, unprogrammed default
  3848                           ;	Fail-Safe Clock Monitor Enable bit
  3849                           ;	FCMEN = 0x1, unprogrammed default
  3850   300001                     	org	3145729
  3851   300001  FF                 	db	255
  3852                           
  3853                           ;Config register CONFIG2L @ 0x300002
  3854                           ;	unspecified, using default values
  3855                           ;	Master Clear Enable bit
  3856                           ;	MCLRE = 0x1, unprogrammed default
  3857                           ;	Power-up Timer Enable bit
  3858                           ;	PWRTE = 0x1, unprogrammed default
  3859                           ;	Low-power BOR enable bit
  3860                           ;	LPBOREN = 0x1, unprogrammed default
  3861                           ;	Brown-out Reset Enable bits
  3862                           ;	BOREN = 0x3, unprogrammed default
  3863   300002                     	org	3145730
  3864   300002  FF                 	db	255
  3865                           
  3866                           ;Config register CONFIG2H @ 0x300003
  3867                           ;	unspecified, using default values
  3868                           ;	Brown Out Reset Voltage selection bits
  3869                           ;	BORV = 0x3, unprogrammed default
  3870                           ;	ZCD Disable bit
  3871                           ;	ZCD = 0x1, unprogrammed default
  3872                           ;	PPSLOCK bit One-Way Set Enable bit
  3873                           ;	PPS1WAY = 0x1, unprogrammed default
  3874                           ;	Stack Full/Underflow Reset Enable bit
  3875                           ;	STVREN = 0x1, unprogrammed default
  3876                           ;	Debugger Enable bit
  3877                           ;	DEBUG = 0x1, unprogrammed default
  3878                           ;	Extended Instruction Set Enable bit
  3879                           ;	XINST = 0x1, unprogrammed default
  3880   300003                     	org	3145731
  3881   300003  FF                 	db	255
  3882                           
  3883                           ;Config register CONFIG3L @ 0x300004
  3884                           ;	WDT Period Select bits
  3885                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3886                           ;	WDT operating mode
  3887                           ;	WDTE = OFF, WDT Disabled
  3888   300004                     	org	3145732
  3889   300004  9F                 	db	159
  3890                           
  3891                           ;Config register CONFIG3H @ 0x300005
  3892                           ;	unspecified, using default values
  3893                           ;	WDT Window Select bits
  3894                           ;	WDTCWS = 0x7, unprogrammed default
  3895                           ;	WDT input clock selector
  3896                           ;	WDTCCS = 0x7, unprogrammed default
  3897   300005                     	org	3145733
  3898   300005  FF                 	db	255
  3899                           
  3900                           ;Config register CONFIG4L @ 0x300006
  3901                           ;	unspecified, using default values
  3902                           ;	Write Protection Block 0
  3903                           ;	WRT0 = 0x1, unprogrammed default
  3904                           ;	Write Protection Block 1
  3905                           ;	WRT1 = 0x1, unprogrammed default
  3906                           ;	Write Protection Block 2
  3907                           ;	WRT2 = 0x1, unprogrammed default
  3908                           ;	Write Protection Block 3
  3909                           ;	WRT3 = 0x1, unprogrammed default
  3910                           ;	Write Protection Block 3
  3911                           ;	WRT4 = 0x1, unprogrammed default
  3912                           ;	Write Protection Block 3
  3913                           ;	WRT5 = 0x1, unprogrammed default
  3914                           ;	Write Protection Block 3
  3915                           ;	WRT6 = 0x1, unprogrammed default
  3916                           ;	Write Protection Block 3
  3917                           ;	WRT7 = 0x1, unprogrammed default
  3918   300006                     	org	3145734
  3919   300006  FF                 	db	255
  3920                           
  3921                           ;Config register CONFIG4H @ 0x300007
  3922                           ;	unspecified, using default values
  3923                           ;	Configuration Register Write Protection bit
  3924                           ;	WRTC = 0x1, unprogrammed default
  3925                           ;	Boot Block Write Protection bit
  3926                           ;	WRTB = 0x1, unprogrammed default
  3927                           ;	Data EEPROM Write Protection bit
  3928                           ;	WRTD = 0x1, unprogrammed default
  3929                           ;	Scanner Enable bit
  3930                           ;	SCANE = 0x1, unprogrammed default
  3931                           ;	Low Voltage Programming Enable bit
  3932                           ;	LVP = 0x1, unprogrammed default
  3933   300007                     	org	3145735
  3934   300007  FF                 	db	255
  3935                           
  3936                           ;Config register CONFIG5L @ 0x300008
  3937                           ;	unspecified, using default values
  3938                           ;	UserNVM Program Memory Code Protection bit
  3939                           ;	CP = 0x1, unprogrammed default
  3940                           ;	DataNVM Memory Code Protection bit
  3941                           ;	CPD = 0x1, unprogrammed default
  3942   300008                     	org	3145736
  3943   300008  FF                 	db	255
  3944                           
  3945                           ;Config register CONFIG5H @ 0x300009
  3946                           ;	unspecified, using default values
  3947   300009                     	org	3145737
  3948   300009  FF                 	db	255
  3949                           
  3950                           ;Config register CONFIG6L @ 0x30000A
  3951                           ;	unspecified, using default values
  3952                           ;	Table Read Protection Block 0
  3953                           ;	EBTR0 = 0x1, unprogrammed default
  3954                           ;	Table Read Protection Block 1
  3955                           ;	EBTR1 = 0x1, unprogrammed default
  3956                           ;	Table Read Protection Block 2
  3957                           ;	EBTR2 = 0x1, unprogrammed default
  3958                           ;	Table Read Protection Block 3
  3959                           ;	EBTR3 = 0x1, unprogrammed default
  3960                           ;	Table Read Protection Block 4
  3961                           ;	EBTR4 = 0x1, unprogrammed default
  3962                           ;	Table Read Protection Block 5
  3963                           ;	EBTR5 = 0x1, unprogrammed default
  3964                           ;	Table Read Protection Block 6
  3965                           ;	EBTR6 = 0x1, unprogrammed default
  3966                           ;	Table Read Protection Block 7
  3967                           ;	EBTR7 = 0x1, unprogrammed default
  3968   30000A                     	org	3145738
  3969   30000A  FF                 	db	255
  3970                           
  3971                           ;Config register CONFIG6H @ 0x30000B
  3972                           ;	unspecified, using default values
  3973                           ;	Boot Block Table Read Protection bit
  3974                           ;	EBTRB = 0x1, unprogrammed default
  3975   30000B                     	org	3145739
  3976   30000B  FF                 	db	255
  3977                           tosu	equ	0xFFF
  3978                           tosh	equ	0xFFE
  3979                           tosl	equ	0xFFD
  3980                           stkptr	equ	0xFFC
  3981                           pclatu	equ	0xFFB
  3982                           pclath	equ	0xFFA
  3983                           pcl	equ	0xFF9
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           indf0	equ	0xFEF
  3991                           postinc0	equ	0xFEE
  3992                           postdec0	equ	0xFED
  3993                           preinc0	equ	0xFEC
  3994                           plusw0	equ	0xFEB
  3995                           fsr0h	equ	0xFEA
  3996                           fsr0l	equ	0xFE9
  3997                           wreg	equ	0xFE8
  3998                           indf1	equ	0xFE7
  3999                           postinc1	equ	0xFE6
  4000                           postdec1	equ	0xFE5
  4001                           preinc1	equ	0xFE4
  4002                           plusw1	equ	0xFE3
  4003                           fsr1h	equ	0xFE2
  4004                           fsr1l	equ	0xFE1
  4005                           bsr	equ	0xFE0
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           preinc2	equ	0xFDC
  4010                           plusw2	equ	0xFDB
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     73      79
    BANK0           160      0       0
    BANK1           256    218     220
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    returnhome@path	PTR unsigned char  size(2) Largest target is 100
		 -> main@path(BANK1[100]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    savetime@timearray	PTR unsigned char  size(2) Largest target is 100
		 -> main@timearray(BANK1[100]), 

    savepath@path	PTR unsigned char  size(2) Largest target is 100
		 -> main@path(BANK1[100]), 

    reversesquare@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reversesquare@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reversesquare@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    reversesquare@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reversesquare@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reversesquare@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turn180@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turn180@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turn180@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turn180@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turn180@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turn180@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft135@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft135@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft135@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnRight90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnRight90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnRight90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnRight90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    turnLeft90@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    turnLeft90@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    turnLeft90@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), returnstep@motorL(COMRAM[9]), 

    S845DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S845DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), main@motorR(BANK1[9]), returnstep@motorR(COMRAM[9]), returnstep@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_returnhome
    _reversesquare->_setMotorPWM
    _returnhome->_returnstep
    _returnstep->_turn180
    _returnstep->_turnLeft135
    _returnstep->_turnLeft90
    _returnstep->_turnRight135
    _returnstep->_turnRight90
    _turnRight90->_stop
    _turnRight135->_stop
    _turnLeft90->_stop
    _turnLeft135->_stop
    _turn180->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               222   222      0   86314
                                              0 BANK1    218   218      0
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
                     _fullSpeedAhead
                    _initDCmotorsPWM
                         _returnhome
                      _reversesquare
                           _savepath
                           _savetime
                        _starttimer0
                            _turn180
                        _turnLeft135
                         _turnLeft90
                       _turnRight135
                        _turnRight90
 ---------------------------------------------------------------------------------
 (1) _starttimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _savetime                                             6     2      4    1283
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _savepath                                             5     2      3    1260
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _reversesquare                                        8     4      4    3492
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _returnhome                                          22     2     20   38069
                                             51 COMRAM    22     2     20
                         _returnstep
 ---------------------------------------------------------------------------------
 (2) _returnstep                                          19     1     18   37775
                                             32 COMRAM    19     1     18
                            _turn180
                        _turnLeft135
                         _turnLeft90
                       _turnRight135
                        _turnRight90
 ---------------------------------------------------------------------------------
 (1) _turnRight90                                          8     4      4    7503
                                             24 COMRAM     8     4      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnRight135                                         8     4      4    7351
                                             24 COMRAM     8     4      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft90                                           8     4      4    7547
                                             24 COMRAM     8     4      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turnLeft135                                          8     4      4    7395
                                             24 COMRAM     8     4      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _turn180                                              8     4      4    7351
                                             24 COMRAM     8     4      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    3815
                                             19 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       9     4      5    3438
                                             19 COMRAM     9     4      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2879
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     493
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _fullSpeedAhead
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _returnhome
     _returnstep
       _turn180
         _setMotorPWM
         _stop
           _setMotorPWM
       _turnLeft135
         _setMotorPWM
         _stop
       _turnLeft90
         _setMotorPWM
         _stop
       _turnRight135
         _setMotorPWM
         _stop
       _turnRight90
         _setMotorPWM
         _stop
   _reversesquare
     _setMotorPWM
   _savepath
   _savetime
   _starttimer0
   _turn180
   _turnLeft135
   _turnLeft90
   _turnRight135
   _turnRight90

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      57        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     DA      DC       7       85.9%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     49      4F       1       84.0%
BITBIGSFRhlllh      54      0       0      42        0.0%
BITBIGSFRhlllll     46      0       0      44        0.0%
BITBIGSFRlllhll     35      0       0      52        0.0%
BITBIGSFRllh        2D      0       0      46        0.0%
BITBIGSFRllll       2D      0       0      55        0.0%
BITBIGSFRlllhhh     1E      0       0      47        0.0%
BITBIGSFRhhhlll     1D      0       0      38        0.0%
BITBIGSFRhhhhhl     1B      0       0      33        0.0%
BITBIGSFRhhhhl      13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      48        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhhh      D      0       0      32        0.0%
BITBIGSFRlllhll      B      0       0      54        0.0%
BITBIGSFRlllhll      9      0       0      53        0.0%
BITBIGSFRlllhlh      5      0       0      51        0.0%
BITBIGSFRlllhhl      3      0       0      50        0.0%
BITBIGSFRhllllh      2      0       0      43        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhlhh        2      0       0      40        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      49        0.0%
BITBIGSFRhlhl        1      0       0      41        0.0%
BITBIGSFRhhl         1      0       0      39        0.0%
BITBIGSFRlh          1      0       0      45        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12B      56        0.0%
DATA                 0      0     12B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Dec 03 01:08:09 2022

                         l22 0F28                           l19 0E68                           l52 0E92  
                         l61 0FAA                           l70 0F80                           l55 0EBC  
                         l58 0EE2                           l67 0FA0            fullSpeedAhead@dir 0018  
        ___wmul@multiplicand 0003            ??_Interrupts_init 0001                          l202 0EBA  
                        l320 0F74                          l208 0E34                          l145 0464  
                        l153 0CDA                          l217 0C48                          l138 0D6A  
                        l171 06A8                          l323 0F96                          l332 0F08  
                        l317 0F8C                          l165 07B2                          l190 0B86  
                        l183 09C6                          l159 0586                          l177 08BC  
                        l196 0AB2                          l199 0F46                          l830 0DDE  
                        l823 0DD6                          u400 0316                          u401 0312  
                        u410 03E0                          u411 03DC                          u420 0ECC  
                        u500 066A                          u421 0EC8                          u501 0666  
                        u430 0EE2                          u510 0690                          u431 0EDE  
                        u511 068C                          u440 0CC2                          u520 0896  
                        u600 0C34                          u441 0CBE                          u521 0892  
                        u601 0C30                          u370 0D86                          u610 0B60  
                        u450 0CDA                          u530 08BC                          u371 0D82  
                        u611 0B5C                          u451 0CD6                          u531 08B8  
                        u380 0DA4                          u620 0B86                          u540 09A0  
                        u460 0548                          u381 0DA0                          u621 0B82  
                        u541 099C                          u461 0544                          u701 02D4  
                        u390 0DC0                          u550 09C6                          u470 056E  
                        u630 0A8C                          u391 0DBC                          u551 09C2  
                        u471 056A                          u631 0A88                          u711 02E6  
                        u480 078C                          u560 0B9C                          u640 0AB2  
                        u481 0788                          u561 0B98                          u641 0AAE  
                        u490 07B2                          u570 0BC2                          u491 07AE  
                        u571 0BBE                          u651 0DEE                          u580 0BE8  
                        u581 0BE4                          u661 0E00                          u590 0C0E  
                        u670 0E34                          u807 0B06                          u591 0C0A  
                        u671 0E30                          u817 0E4A                          u737 0A1A  
                        u747 072C                          u757 0836                          u767 04E8  
                        u777 060A                          u787 0940                          u797 0C88  
                        wreg 000FE8                  _starttimer0 0F8E                         l2001 0216  
                       l2011 0282                         l2003 0226                         l2013 0296  
                       l2005 0242                         l2015 02A6                         l2007 0256  
                       l2017 02C2                         l2009 0266                         l1601 048A  
                       l1531 0D74                         l1523 0EE4                         l1611 04CE  
                       l1603 049A                         l1541 0DAA                         l1533 0D86  
                       l1525 0F00                         l1621 0516                         l1613 04DE  
                       l1605 04AA                         l1701 0808                         l1543 0DC0  
                       l1535 0D8E                         l1551 02FA                         l1615 04F6  
                       l1623 0522                         l1607 04BA                         l1711 084E  
                       l1703 0810                         l1631 06BE                         l1545 0DC8  
                       l1537 0D96                         l1529 0D6C                         l1561 03C4  
                       l1553 0316                         l1801 0D16                         l1721 08BE  
                       l1625 0548                         l1617 0500                         l1609 04C2  
                       l1713 0858                         l1705 081C                         l1641 0706  
                       l1633 06CE                         l1547 0DCA                         l1539 0DA4  
                       l1563 03E0                         l1555 036A                         l1811 0D52  
                       l1803 0D3A                         l1571 0C4A                         l1731 0912  
                       l1723 08D2                         l1627 056E                         l1619 050A  
                       l1715 0864                         l1707 082C                         l1651 074E  
                       l1643 0712                         l1635 06DE                         l1549 0DD0  
                       l1565 0424                         l1557 037E                         l1813 0D5C  
                       l1805 0D44                         l1573 0C6E                         l1581 0CAA  
                       l1741 0958                         l1733 091A                         l1725 08E2  
                       l1661 059C                         l1709 0844                         l1717 0870  
                       l1653 075A                         l1645 0722                         l1637 06EE  
                       l1629 06AA                         l1751 0E6A                         l1567 0EBC  
                       l1591 0F7C                         l1559 0382                         l1831 0B22  
                       l1823 0AF4                         l1815 0D5E                         l1807 0D46  
                       l1583 0CC2                         l1575 0C82                         l1743 0962  
                       l1735 0926                         l1727 08F2                         l1671 05E4  
                       l1663 05AC                         l1719 0896                         l1647 073A  
                       l1655 0766                         l1639 06FE                         l1761 0E80  
                       l1753 0E74                         l1569 0ECC                         l1585 0FA2  
                       l1593 0F98                         l1833 0B2E                         l1825 0B00  
                       l1817 0D68                         l1809 0D50                         l1577 0C92  
                       l1745 096E                         l1737 0936                         l1729 0902  
                       l1681 062C                         l1673 05F0                         l1665 05BC  
                       l1657 078C                         l1649 0744                         l1841 0A08  
                       l1921 002C                         l1755 0E7A                         l1587 0FA6  
                       l1595 0F9C                         l1763 0F0C                         l1827 0B0E  
                       l1835 0B3A                         l1819 0AB4                         l1579 0C9E  
                       l1739 094E                         l1747 097A                         l1683 0638  
                       l1675 0600                         l1667 05CC                         l1659 0588  
                       l1691 07B4                         l1771 0BB0                         l1851 0A42  
                       l1843 0A14                         l1931 0044                         l1923 002C  
                       l1757 0E7C                         l1589 0F78                         l1837 0B60  
                       l1829 0B18                         l1749 09A0                         l1677 0618  
                       l1685 0644                         l1669 05DC                         l1597 0466  
                       l1693 07C8                         l1781 0C0E                         l1773 0BC2  
                       l1765 0B8A                         l1853 0A4E                         l1845 0A22  
                       l1861 0F2A                         l1941 004E                         l1933 0046  
                       l1925 0034                         l1759 0E7E                         l1791 0E44  
                       l1687 066A                         l1679 0622                         l1599 047A  
                       l1695 07D8                         l1783 0C22                         l1775 0BD6  
                       l1767 0B8A                         l1855 0A5A                         l1847 0A2C  
                       l1839 09C8                         l1863 0F44                         l1871 0EB2  
                       l1951 006A                         l1943 0050                         l1935 0048  
                       l1927 0040                         l1793 0E54                         l1689 0690  
                       l1697 07E8                         l1785 0C34                         l1777 0BE8  
                       l1769 0B9C                         l1881 0E24                         l1849 0A36  
                       l1857 0A66                         l1873 0EB2                         l1865 0E94  
                       l1961 008A                         l1953 0072                         l1945 0056  
                       l1937 004A                         l1929 0044                         l1891 0F82  
                       l1795 0E5E                         l1787 0E36                         l1699 07F8  
                       l1779 0BFC                         l1883 0E26                         l1859 0A8C  
                       l1867 0E96                         l1971 00DA                         l1963 0092  
                       l1955 0076                         l1947 005A                         l1939 004C  
                       l1885 0F64                         l1789 0E3A                         l1797 0CDC  
                       l1877 0DE0                         l1869 0EB0                         l1893 0F8E  
                       l1981 013E                         l1973 00EE                         l1965 0096  
                       l1957 007A                         l1949 0062                         l1887 0F6C  
                       l1799 0CEC                         l1879 0DE4                         l1895 0F92  
                       l1991 01AE                         l1983 015A                         l1975 00FE  
                       l1967 00AE                         l1959 0082                         l1889 0F72  
                       l1897 0F94                         l1993 01C2                         l1985 016E  
                       l1977 011A                         l1969 00BE                         l1995 01D2  
                       l1987 017E                         l1979 012E                         l1997 01EE  
                       l1989 019A                         l1999 0202                         _T2PR 000FBC  
                       _main 002C                         fsr2h 000FDA                         indf2 000FDF  
                       fsr2l 000FD9                         btemp 0050                         _stop 0C4A  
                       prodh 000FF4                         prodl 000FF3                         start 0028  
            __end_of_HighISR 0028                 ___param_bank 000000                  _turnLeft135 0588  
                _turnRight90 06AA                        ?_main 0001                        ?_stop 0014  
            __end_of___lwdiv 0DE0                        i2l298 0024                        _TMR0H 000FD4  
                      _TMR0L 000FD3   __end_of_I2C_2_Master_Start 0FAC   __end_of_I2C_2_Master_Write 0F82  
                      plusw0 000FEB                        plusw2 000FDB              __end_of_turn180 09C8  
             returnhome@path 0034                        ttemp5 0051                        ttemp6 0054  
                      ttemp7 0058                        status 000FD8                        wtemp8 0051  
            __initialization 0F48                 __end_of_main 02FA                 __end_of_stop 0CDC  
                     ??_main 004A                       ??_stop 0018                __activetblptr 000000  
               _turnRight135 07B4              turn180@setpower 001F                 ?_setMotorPWM 000E  
                     _CCPR1H 000FAA                       _CCPR2H 000FA6                       _CCPR3H 000F25  
                     _CCPR4H 000F21                       _RE2PPS 000E74                       _RD5PPS 000E6F  
                     _RC7PPS 000E69                       _RE4PPS 000E76                       _RD6PPS 000E70  
                     i2l2021 001A                       i2l2023 0020                       i2l2019 000A  
                     _RG6PPS 000E88                    ??_HighISR 0001     __end_of_color_click_init 0E6A  
              ??_Timer0_init 0001                 _CCPTMRS0bits 000FAD        returnstep@instruction 0033  
                     ___wmul 0EE4                    ??___lwdiv 000B                       isa$std 000001  
              main@timearray 0100             __end_of_savepath 0F48             __end_of_savetime 0EBC  
          savetime@timearray 0001                    ??_turn180 001D                       stop@mL 0014  
                     stop@mR 0016            ??_initDCmotorsPWM 0003                   __accesstop 0060  
    __end_of__initialization 0F5A                ___rparam_used 000001              _Interrupts_init 0F82  
             __pcstackCOMRAM 0001          __end_of_Timer0_init 0F76                 ?_starttimer0 0001  
                 __pbssBANK1 01DA            _color_writetoaddr 0F0A                 _T2CLKCONbits 000FBF  
               ?_turnLeft135 0019        __end_of_reversesquare 0AB4           ?_color_writetoaddr 0003  
                    ?___wmul 0001                 ?_turnRight90 0019          ??_color_writetoaddr 0004  
                    i2u72_40 001A                      i2u72_41 0016         turnRight135@setpower 001F  
                    _SSP2ADD 000ED6                      _SSP2BUF 000ED5      __end_of_Interrupts_init 0F8E  
     color_writetoaddr@value 0003                      _HighISR 0008    __end_of_color_writetoaddr 0F2A  
         _I2C_2_Master_Start 0FA2           _I2C_2_Master_Write 0F76                      __Hparam 0000  
                    __Lparam 0000                    ?_savepath 0001                    ?_savetime 0001  
                _Timer0_init 0F64          ?_I2C_2_Master_Start 0001                      ___lwdiv 0D6C  
        ?_I2C_2_Master_Write 0001                   _off_period 004A                 turnLeft90@mL 0019  
               turnLeft90@mR 001B                      __pcinit 0F48                      __ramtop 0E00  
                    __ptext0 002C                      __ptext1 0F8E                      __ptext2 0E94  
                    __ptext3 0F2A                      __ptext4 09C8                      __ptext5 0DE0  
                    __ptext6 0B88                      __ptext7 06AA                      __ptext8 07B4  
                    __ptext9 0466                    _T2CONbits 000FBD                    _T2HLTbits 000FBE  
                    _turn180 08BE         ??_I2C_2_Master_Start 0002          turnRight90@setpower 001F  
       ??_I2C_2_Master_Write 0002         end_of_initialization 0F5A            ?_color_click_init 0001  
        turnLeft135@setpower 001F           ??_color_click_init 0005                   ??_savepath 0004  
     fullSpeedAhead@setpower 001B                   ??_savetime 0005           savetime@timercount 0003  
                    postdec2 000FDD                      postinc2 000FDE             returnhome@motorL 0036  
           returnhome@motorR 003F              _initDCmotorsPWM 0CDC           turnLeft90@setpower 001F  
                 _returnhome 0DE0                   _timercount 01DA           setMotorPWM@negDuty 0013  
                 _returnstep 0B88           setMotorPWM@posDuty 0012                    _TRISCbits 000F83  
                  _TRISDbits 000F84                    _TRISEbits 000F85                    _TRISGbits 000F87  
                  _TRISHbits 000F88             fullSpeedAhead@mL 0014             fullSpeedAhead@mR 0016  
   color_writetoaddr@address 0004             ?_Interrupts_init 0001                  _CCP1CONbits 000FAB  
                _CCP2CONbits 000FA7                  _CCP3CONbits 000F26                  _CCP4CONbits 000F22  
                 main@motorL 01C8                   main@motorR 01D1                   _turnLeft90 0466  
            reversesquare@mL 0014              reversesquare@mR 0016               _fullSpeedAhead 0AB4  
             __end_of___wmul 0F0A          start_initialization 0F48      __end_of_initDCmotorsPWM 0D6C  
     __end_of_fullSpeedAhead 0B88                     ??___wmul 0005                  ?_returnhome 0034  
                ?_returnstep 0021                  __pbssCOMRAM 004A                __pcstackBANK1 0100  
                   ?_HighISR 0001             ___lwdiv@dividend 0007                 ?_Timer0_init 0001  
                ?_turnLeft90 0019              ?_fullSpeedAhead 0014                    __pintcode 0008  
        savepath@instruction 0003                     ?___lwdiv 0007                ?_turnRight135 0019  
          _I2C_2_Master_Idle 0EBC        reversesquare@setpower 001A            _I2C_2_Master_Init 0E6A  
           returnstep@motorL 0021             returnstep@motorR 002A            _I2C_2_Master_Stop 0F98  
         ?_I2C_2_Master_Idle 0001           ?_I2C_2_Master_Init 0001                ??_setMotorPWM 0010  
                   ?_turn180 0019           ?_I2C_2_Master_Stop 0001             ___lwdiv@quotient 000B  
   initDCmotorsPWM@PWMperiod 0001          ??_I2C_2_Master_Idle 0001          ??_I2C_2_Master_Init 0001  
             ___wmul@product 0005          ??_I2C_2_Master_Stop 0002                     _LATCbits 000F7B  
                   _LATDbits 000F7C                     _LATEbits 000F7D                    _on_period 004C  
                   _LATGbits 000F7F                     _LATHbits 000F80                     _PIE0bits 000E29  
                   _PIR0bits 000E33             ?_initDCmotorsPWM 0001                     _SSP2CON2 000EDA  
                   _SSP2STAT 000ED8    __end_of_I2C_2_Master_Idle 0EE4    __end_of_I2C_2_Master_Init 0E94  
          ___wmul@multiplier 0001               ??_turnRight135 001D    __end_of_I2C_2_Master_Stop 0FA2  
               setMotorPWM@m 000E  I2C_2_Master_Write@data_byte 0002                 _pathposition 004E  
        __end_of_setMotorPWM 0466                     __Hrparam 0000                     __Lrparam 0000  
              _reversesquare 09C8               turnRight135@mL 0019               turnRight135@mR 001B  
              turnLeft135@mL 0019                turnLeft135@mR 001B                   _ANSELDbits 000EA7  
               savepath@path 0001                   _T0CON0bits 000FD5                   _T0CON1bits 000FD6  
              ??_starttimer0 0001              ___lwdiv@divisor 0009              ___lwdiv@counter 000D  
                   __ptext10 0588                     __ptext11 08BE                     __ptext20 0F76  
                   __ptext12 0C4A                     __ptext21 0F98                     __ptext13 0CDC  
                   __ptext22 0FA2                     __ptext14 0AB4                     __ptext23 0EBC  
                   __ptext15 02FA                     __ptext24 0E6A                     __ptext16 0EE4  
                   __ptext25 0F64                     __ptext17 0D6C                     __ptext26 0F82  
                   __ptext18 0E36                     __ptext19 0F0A                 _SSP2CON1bits 000ED9  
               _SSP2CON2bits 000EDA                     _savepath 0F2A                ??_turnLeft135 001D  
                   _savetime 0E94                     isa$xinst 000000               ?_reversesquare 0014  
                   int$flags 0050                ??_turnRight90 001D                     main@path 0164  
               ??_returnhome 0048                 ??_returnstep 0033                    turn180@mL 0019  
                  turn180@mR 001B                   _INTCONbits 000FF2                  _setMotorPWM 02FA  
                   intlevel2 0000                turnRight90@mL 0019                turnRight90@mR 001B  
        __end_of_starttimer0 0F98             ??_fullSpeedAhead 0019         __end_of_turnRight135 08BE  
         __end_of_returnhome 0E36           __end_of_returnstep 0C4A                 ??_turnLeft90 001D  
           _color_click_init 0E36          __end_of_turnLeft135 06AA                   _SSP2DATPPS 000E1D  
               _timeposition 004F                   _SSP2CLKPPS 000E1C          __end_of_turnRight90 07B4  
         __end_of_turnLeft90 0588              ??_reversesquare 0018  
